WEBVTT

00:00:08.960 --> 00:00:12.638
Caption: hello everyone my name is sam price and

00:00:10.960 --> 00:00:15.360
Caption: i&#39;m currently a software architect with

00:00:12.638 --> 00:00:15.758
Caption: family zone cyber

00:00:15.359 --> 00:00:18.799
Caption: over safety

00:00:15.758 --> 00:00:20.959
Caption: last probably six or seven years or so

00:00:18.799 --> 00:00:22.399
Caption: i&#39;ve had the opportunity to

00:00:20.959 --> 00:00:24.559
Caption: be involved with systems that have

00:00:22.399 --> 00:00:27.038
Caption: needed to scale um quite often scale

00:00:24.559 --> 00:00:29.038
Caption: quite considerable amounts and

00:00:27.038 --> 00:00:31.518
Caption: through those experiences there have

00:00:29.038 --> 00:00:33.599
Caption: been lessons learned observations and

00:00:31.518 --> 00:00:35.919
Caption: changes to daily routines

00:00:33.599 --> 00:00:39.119
Caption: and it&#39;s the ladder bit that i&#39;d like to

00:00:35.919 --> 00:00:42.000
Caption: talk a little bit about today so things

00:00:39.119 --> 00:00:44.558
Caption: how i&#39;ve changed my daily routine to

00:00:42.000 --> 00:00:46.719
Caption: keep performance in mind

00:00:44.558 --> 00:00:48.159
Caption: okay

00:00:46.719 --> 00:00:50.000
Caption: now before we get into it i just wanted

00:00:48.159 --> 00:00:53.199
Caption: to say thank you to all of our amazing

00:00:50.000 --> 00:00:55.039
Caption: sponsors um dignity perth

00:00:53.199 --> 00:00:57.600
Caption: as an attendee has always been my my

00:00:55.039 --> 00:00:59.359
Caption: favorite con conference and it wouldn&#39;t

00:00:57.599 --> 00:01:01.038
Caption: be possible without all of the sponsors

00:00:59.359 --> 00:01:04.719
Caption: so thank you very much for supporting

00:01:01.039 --> 00:01:04.719
Caption: local local perth talent

00:01:05.599 --> 00:01:10.400
Caption: why practical performance

00:01:08.319 --> 00:01:13.040
Caption: well i&#39;m going to suggest a few reasons

00:01:10.400 --> 00:01:14.559
Caption: that um the companies that i&#39;ve worked

00:01:13.040 --> 00:01:16.720
Caption: for

00:01:14.559 --> 00:01:18.959
Caption: value but then later suggest one of my

00:01:16.720 --> 00:01:18.959
Caption: own

00:01:19.119 --> 00:01:25.280
Caption: our customers without customers we we

00:01:22.400 --> 00:01:27.119
Caption: can&#39;t make money typically

00:01:25.279 --> 00:01:30.158
Caption: and so we we need our customers to have

00:01:27.119 --> 00:01:32.720
Caption: compelling experiences

00:01:30.158 --> 00:01:35.438
Caption: now jacob nielsen was actually a very

00:01:32.720 --> 00:01:38.159
Caption: well regarded usability expert

00:01:35.439 --> 00:01:39.200
Caption: and a lot of the ux

00:01:38.158 --> 00:01:40.959
Caption: design

00:01:39.199 --> 00:01:42.798
Caption: principles these days are actually based

00:01:40.959 --> 00:01:45.839
Caption: on on his foundation

00:01:42.799 --> 00:01:45.840
Caption: foundational research

00:01:47.519 --> 00:01:52.158
Caption: if you do a quick google search you&#39;ll

00:01:49.519 --> 00:01:54.639
Caption: find many many statistics on

00:01:52.158 --> 00:01:56.879
Caption: what happens when sites are unresponsive

00:01:54.639 --> 00:01:58.559
Caption: or apps take a long time to to load

00:01:56.879 --> 00:02:00.319
Caption: screens

00:01:58.559 --> 00:02:02.000
Caption: and i&#39;m sure we&#39;ve all seen these kinds

00:02:00.319 --> 00:02:03.680
Caption: of things before so i&#39;ve just selected a

00:02:02.000 --> 00:02:04.799
Caption: few random

00:02:03.680 --> 00:02:06.799
Caption: stats

00:02:04.799 --> 00:02:10.238
Caption: both from google in the hope that you

00:02:06.799 --> 00:02:10.238
Caption: trust it there they&#39;re real and true

00:02:10.800 --> 00:02:14.080
Caption: why else

00:02:12.080 --> 00:02:14.958
Caption: low operating costs

00:02:14.080 --> 00:02:17.839
Caption: uh

00:02:14.958 --> 00:02:19.759
Caption: these days uh infrastructure hosting is

00:02:17.839 --> 00:02:21.919
Caption: a major expense for a lot of a lot of

00:02:19.759 --> 00:02:24.159
Caption: companies and particularly in the the

00:02:21.919 --> 00:02:27.520
Caption: new world or newish world of cloud it&#39;s

00:02:24.160 --> 00:02:30.000
Caption: very easy to inadvertently dial up uh

00:02:27.520 --> 00:02:31.760
Caption: how much you&#39;re spending and so i&#39;m

00:02:30.000 --> 00:02:33.679
Caption: hoping that through good

00:02:31.759 --> 00:02:37.119
Caption: good performance practices we can keep

00:02:33.679 --> 00:02:38.799
Caption: our costs a little bit lower and

00:02:37.119 --> 00:02:40.559
Caption: i think we all may have experienced this

00:02:38.800 --> 00:02:42.238
Caption: this kind of thing before where the

00:02:40.559 --> 00:02:44.800
Caption: easiest thing to do is to vertically

00:02:42.238 --> 00:02:47.839
Caption: scale um but it&#39;s not not effectively

00:02:44.800 --> 00:02:47.839
Caption: the most cost effective

00:02:48.080 --> 00:02:52.319
Caption: and so if we we have good performance

00:02:50.160 --> 00:02:53.919
Caption: practices quite often our software will

00:02:52.319 --> 00:02:57.759
Caption: end up performing too

00:02:53.919 --> 00:02:57.759
Caption: which typically keeps our costs low

00:02:59.119 --> 00:03:03.598
Caption: and the final reason is that

00:03:02.080 --> 00:03:05.680
Caption: i&#39;ve observed that a lot of software

00:03:03.598 --> 00:03:07.518
Caption: engineers don&#39;t necessarily include

00:03:05.679 --> 00:03:09.039
Caption: practical

00:03:07.518 --> 00:03:10.238
Caption: performance practices in their daily

00:03:09.039 --> 00:03:15.719
Caption: routine

00:03:10.238 --> 00:03:15.720
Caption: now i don&#39;t necessarily blame them

00:03:18.559 --> 00:03:22.958
Caption: i think this is sort of the

00:03:20.639 --> 00:03:24.958
Caption: classic quote premature optimization is

00:03:22.958 --> 00:03:26.080
Caption: the root of all evil

00:03:24.958 --> 00:03:27.679
Caption: i think

00:03:26.080 --> 00:03:29.360
Caption: most of us have heard that and it does

00:03:27.679 --> 00:03:31.119
Caption: discourage us a little bit from thinking

00:03:29.360 --> 00:03:32.000
Caption: about performance

00:03:31.119 --> 00:03:34.238
Caption: and

00:03:32.000 --> 00:03:34.238
Caption: so

00:03:35.119 --> 00:03:41.518
Caption: now sir tony horror actually uh expands

00:03:38.238 --> 00:03:43.598
Caption: on his often misquoted quote

00:03:41.518 --> 00:03:44.958
Caption: and explains that really we shouldn&#39;t

00:03:43.598 --> 00:03:47.598
Caption: think about

00:03:44.958 --> 00:03:50.878
Caption: micro optimizations 97 of the time but

00:03:47.598 --> 00:03:53.360
Caption: instead spend that 97 percent of time uh

00:03:50.878 --> 00:03:54.878
Caption: with good software design so

00:03:53.360 --> 00:03:57.039
Caption: what algorithms and data structures

00:03:54.878 --> 00:04:01.000
Caption: we&#39;re going to use how we&#39;ll design apis

00:03:57.039 --> 00:04:01.000
Caption: and things like that

00:04:01.598 --> 00:04:07.518
Caption: performance principles

00:04:04.479 --> 00:04:09.919
Caption: i personally use when i when i look at

00:04:07.518 --> 00:04:12.080
Caption: my day-to-day work but then also

00:04:09.919 --> 00:04:14.238
Caption: when designing solutions

00:04:12.080 --> 00:04:16.000
Caption: and i&#39;ll present two principles that i

00:04:14.238 --> 00:04:19.440
Caption: use

00:04:16.000 --> 00:04:21.199
Caption: so the first one is craftsmanship

00:04:19.440 --> 00:04:23.440
Caption: which is really well designed software

00:04:21.199 --> 00:04:25.839
Caption: systems using modern technologies and

00:04:23.440 --> 00:04:28.799
Caption: processors will outperform systems built

00:04:25.839 --> 00:04:31.440
Caption: in an ad hoc manner without good process

00:04:28.799 --> 00:04:34.159
Caption: much like how craft beer out-tastes

00:04:31.440 --> 00:04:34.160
Caption: factory beer

00:04:35.759 --> 00:04:40.160
Caption: so what does it mean to be to

00:04:38.000 --> 00:04:41.199
Caption: practice craftsmanship

00:04:40.160 --> 00:04:42.559
Caption: so

00:04:41.199 --> 00:04:44.320
Caption: firstly we need to understand our

00:04:42.559 --> 00:04:46.239
Caption: customers and our users how they&#39;re

00:04:44.320 --> 00:04:48.080
Caption: using our software

00:04:46.239 --> 00:04:51.440
Caption: and what they need we need to need to

00:04:48.079 --> 00:04:53.758
Caption: understand our programming languages

00:04:51.440 --> 00:04:55.679
Caption: we need to understand what what third

00:04:53.759 --> 00:04:57.440
Caption: party i guess technologies that our

00:04:55.679 --> 00:05:00.320
Caption: software solutions integrate with so

00:04:57.440 --> 00:05:01.839
Caption: databases caches queues various other

00:05:00.320 --> 00:05:04.240
Caption: bits and pieces

00:05:01.839 --> 00:05:06.399
Caption: um how is our software being run

00:05:04.239 --> 00:05:09.039
Caption: are we running it are we using linux as

00:05:06.399 --> 00:05:11.519
Caption: an os or is it an ec2 maybe we&#39;re using

00:05:09.039 --> 00:05:13.519
Caption: kubernetes for orchestration

00:05:11.519 --> 00:05:15.198
Caption: and then sort of the glue that holds all

00:05:13.519 --> 00:05:17.679
Caption: of this together is

00:05:15.199 --> 00:05:20.000
Caption: good old computer science theory so

00:05:17.679 --> 00:05:21.839
Caption: from human computer interaction for our

00:05:20.000 --> 00:05:24.479
Caption: users all the way through to data

00:05:21.839 --> 00:05:25.600
Caption: structures and algorithms

00:05:24.479 --> 00:05:27.119
Caption: and so

00:05:25.600 --> 00:05:28.559
Caption: to exhibit craftsmanship it&#39;d be

00:05:27.119 --> 00:05:30.559
Caption: wonderful to be an expert in all of

00:05:28.559 --> 00:05:32.320
Caption: these things but the reality is that&#39;s

00:05:30.559 --> 00:05:34.079
Caption: that&#39;s not going to be possible and so

00:05:32.320 --> 00:05:36.479
Caption: we&#39;ll each have

00:05:34.079 --> 00:05:38.159
Caption: various skill depths

00:05:36.479 --> 00:05:40.399
Caption: but really i think what we what we kind

00:05:38.160 --> 00:05:42.800
Caption: of need to do is to uh as software

00:05:40.399 --> 00:05:44.720
Caption: engineers spend a little bit of time to

00:05:42.799 --> 00:05:47.119
Caption: to understand

00:05:44.720 --> 00:05:49.279
Caption: our tools so that we can hopefully write

00:05:47.119 --> 00:05:51.279
Caption: performance solutions that are good for

00:05:49.279 --> 00:05:52.799
Caption: our businesses and customers and so how

00:05:51.279 --> 00:05:54.720
Caption: might we do this we&#39;re all busy we&#39;ve

00:05:52.799 --> 00:05:56.720
Caption: all got different routines so i&#39;d

00:05:54.720 --> 00:05:58.479
Caption: suggest that actually what we want to do

00:05:56.720 --> 00:06:02.239
Caption: is narrow our scope so don&#39;t try and

00:05:58.479 --> 00:06:04.399
Caption: understand every aspect of a database

00:06:02.239 --> 00:06:06.160
Caption: instead just focus on on one little

00:06:04.399 --> 00:06:08.319
Caption: thing

00:06:06.160 --> 00:06:09.759
Caption: similarly factor in time for planning

00:06:08.319 --> 00:06:12.799
Caption: and learning so

00:06:09.759 --> 00:06:15.119
Caption: some of us might be practicing agile

00:06:12.799 --> 00:06:17.119
Caption: and so when we do estimation it&#39;s nice

00:06:15.119 --> 00:06:19.279
Caption: to bump that up a little bit if we if we

00:06:17.119 --> 00:06:20.799
Caption: want to go and spend time to deliver

00:06:19.279 --> 00:06:22.079
Caption: something quality

00:06:20.799 --> 00:06:24.159
Caption: and obviously anything that we&#39;ve

00:06:22.079 --> 00:06:26.959
Caption: learned we wish to apply during the

00:06:24.160 --> 00:06:29.759
Caption: implementation phase

00:06:26.959 --> 00:06:30.720
Caption: now here&#39;s an example of

00:06:29.759 --> 00:06:32.880
Caption: where

00:06:30.720 --> 00:06:35.679
Caption: i guess a team that i&#39;ve worked with

00:06:32.880 --> 00:06:36.880
Caption: where we had a lapse in craftsmanship

00:06:35.679 --> 00:06:38.720
Caption: there were two services that

00:06:36.880 --> 00:06:39.839
Caption: communicated to each other

00:06:38.720 --> 00:06:41.759
Caption: both

00:06:39.839 --> 00:06:44.559
Caption: http

00:06:41.759 --> 00:06:47.279
Caption: one service used an http library called

00:06:44.559 --> 00:06:49.119
Caption: apache http components and

00:06:47.279 --> 00:06:52.319
Caption: we brought that in in its default

00:06:49.119 --> 00:06:56.479
Caption: configuration without reading the manual

00:06:52.319 --> 00:06:58.479
Caption: and the manual very clearly states

00:06:56.479 --> 00:07:01.279
Caption: no more than two concurrent connections

00:06:58.479 --> 00:07:03.440
Caption: per given route so that means i cannot

00:07:01.279 --> 00:07:05.598
Caption: have more than two threads making

00:07:03.440 --> 00:07:06.720
Caption: requests to a single uri on a single

00:07:05.598 --> 00:07:08.479
Caption: host

00:07:06.720 --> 00:07:10.880
Caption: which is actually very limiting and that

00:07:08.479 --> 00:07:13.919
Caption: proved to be the case for us and sadly

00:07:10.880 --> 00:07:13.919
Caption: this happened twice

00:07:14.399 --> 00:07:17.919
Caption: the other principle that i wanted to

00:07:15.839 --> 00:07:19.279
Caption: introduce is less is more i think a lot

00:07:17.919 --> 00:07:21.919
Caption: of us would have heard of that before

00:07:19.279 --> 00:07:23.919
Caption: but um the idea here is that a system

00:07:21.919 --> 00:07:26.240
Caption: that does less is more for performance

00:07:23.919 --> 00:07:27.759
Caption: than a system that does more and

00:07:26.239 --> 00:07:29.598
Caption: certainly in the sort of ultra high

00:07:27.759 --> 00:07:31.759
Caption: performance um

00:07:29.598 --> 00:07:34.399
Caption: sort of category

00:07:31.759 --> 00:07:36.080
Caption: really high performing systems like have

00:07:34.399 --> 00:07:38.880
Caption: almost no features they do one thing and

00:07:36.079 --> 00:07:40.720
Caption: they do it very well

00:07:38.880 --> 00:07:43.199
Caption: now what are some examples of less is

00:07:40.720 --> 00:07:45.279
Caption: more i could probably write a list of

00:07:43.199 --> 00:07:47.598
Caption: about 50 things here but i&#39;ll keep it

00:07:45.279 --> 00:07:49.359
Caption: fairly limited

00:07:47.598 --> 00:07:53.519
Caption: one of my favorites is

00:07:49.359 --> 00:07:55.679
Caption: complexity so kiss holds holds true and

00:07:53.519 --> 00:07:57.839
Caption: at all levels as well so from the the

00:07:55.679 --> 00:08:00.000
Caption: level of actually writing code

00:07:57.839 --> 00:08:01.519
Caption: if you&#39;re using a compiled language

00:08:00.000 --> 00:08:03.359
Caption: for example

00:08:01.519 --> 00:08:05.119
Caption: the compiler will often optimize your

00:08:03.359 --> 00:08:07.119
Caption: code and the compiler does a better job

00:08:05.119 --> 00:08:09.359
Caption: of optimizing simple code than it does

00:08:07.119 --> 00:08:11.199
Caption: complex code

00:08:09.359 --> 00:08:12.799
Caption: all the way up to maybe a service level

00:08:11.199 --> 00:08:14.720
Caption: if you&#39;ve got a fairly simple service

00:08:12.799 --> 00:08:16.878
Caption: maybe it&#39;s a microservice but it has

00:08:14.720 --> 00:08:19.519
Caption: some deficiency it&#39;s much easier to

00:08:16.878 --> 00:08:21.679
Caption: replace that service than a horribly

00:08:19.519 --> 00:08:22.799
Caption: complex monolith

00:08:21.679 --> 00:08:24.479
Caption: and so

00:08:22.799 --> 00:08:25.198
Caption: i&#39;m not advocating either way by the way

00:08:24.479 --> 00:08:27.360
Caption: for

00:08:25.199 --> 00:08:28.399
Caption: mono said minor services so

00:08:27.359 --> 00:08:30.559
Caption: sorry

00:08:28.399 --> 00:08:32.718
Caption: monoliths or micro services

00:08:30.559 --> 00:08:34.320
Caption: um but yeah this list goes on and on but

00:08:32.718 --> 00:08:35.760
Caption: i won&#39;t i won&#39;t go through all of these

00:08:34.320 --> 00:08:38.320
Caption: things

00:08:35.760 --> 00:08:40.398
Caption: and here&#39;s a classic

00:08:38.320 --> 00:08:43.598
Caption: table from the greater internet some of

00:08:40.398 --> 00:08:45.359
Caption: us may have seen this before

00:08:43.598 --> 00:08:47.838
Caption: the thing that i like about this table

00:08:45.359 --> 00:08:49.679
Caption: is enables me to understand what happens

00:08:47.838 --> 00:08:51.359
Caption: when my software is run through the eyes

00:08:49.679 --> 00:08:53.518
Caption: of the computer a little bit and how

00:08:51.359 --> 00:08:55.039
Caption: long various things take

00:08:53.518 --> 00:08:56.719
Caption: but to make it a little bit more clear i

00:08:55.039 --> 00:08:57.759
Caption: thought it might be fun if we pretended

00:08:56.719 --> 00:09:00.079
Caption: that

00:08:57.760 --> 00:09:01.919
Caption: we&#39;re in perth and

00:09:00.080 --> 00:09:05.200
Caption: for us to go to the level one cache is

00:09:01.919 --> 00:09:07.278
Caption: just one simple step

00:09:05.200 --> 00:09:09.679
Caption: but then for us to actually send two

00:09:07.278 --> 00:09:11.278
Caption: kilobytes over a gigabit network well

00:09:09.679 --> 00:09:13.278
Caption: that&#39;s that&#39;s like us going all the way

00:09:11.278 --> 00:09:14.000
Caption: to free mountain back

00:09:13.278 --> 00:09:15.359
Caption: well

00:09:14.000 --> 00:09:17.679
Caption: what about if we wanted to read a meg

00:09:15.359 --> 00:09:19.359
Caption: from memory um that&#39;s like us going to

00:09:17.679 --> 00:09:21.599
Caption: dancer and back it&#39;s quite a while like

00:09:19.359 --> 00:09:23.760
Caption: sorry us going just in amsterdam quite a

00:09:21.599 --> 00:09:25.518
Caption: while and then finally a single packet

00:09:23.760 --> 00:09:28.160
Caption: from perth to california and back to

00:09:25.518 --> 00:09:29.518
Caption: perth again halfway to the moon

00:09:28.159 --> 00:09:31.039
Caption: so if we think about these things when

00:09:29.518 --> 00:09:31.838
Caption: writing software

00:09:31.039 --> 00:09:33.278
Caption: it

00:09:31.838 --> 00:09:36.000
Caption: puts things into perspective a little

00:09:33.278 --> 00:09:38.479
Caption: bit

00:09:36.000 --> 00:09:41.278
Caption: so this is a an example where we

00:09:38.479 --> 00:09:44.398
Caption: leveraged less is more um

00:09:41.278 --> 00:09:46.559
Caption: so the context here is that we had a

00:09:44.398 --> 00:09:48.880
Caption: native library that filtered network

00:09:46.559 --> 00:09:51.838
Caption: traffic now i&#39;ve ported that code and

00:09:48.880 --> 00:09:51.838
Caption: simplified it to java

00:09:52.479 --> 00:09:58.079
Caption: and this library it one runs on our

00:09:55.039 --> 00:10:01.119
Caption: wi-fi routers but we we wanted to reuse

00:09:58.080 --> 00:10:03.360
Caption: that at the end of our vpn

00:10:01.119 --> 00:10:06.640
Caption: and so all of a sudden the environment

00:10:03.359 --> 00:10:08.799
Caption: has changed we went from 20 uh

00:10:06.640 --> 00:10:10.799
Caption: queries per second really to about 2 000

00:10:08.799 --> 00:10:12.880
Caption: queries per second

00:10:10.799 --> 00:10:15.518
Caption: and our poor little filter client

00:10:12.880 --> 00:10:17.679
Caption: library did not like it so this is the

00:10:15.518 --> 00:10:19.200
Caption: code beforehand and

00:10:17.679 --> 00:10:21.760
Caption: after looking at the code we made a

00:10:19.200 --> 00:10:24.720
Caption: simple change

00:10:21.760 --> 00:10:24.720
Caption: did anybody see it

00:10:26.880 --> 00:10:30.838
Caption: so anyway we changed a tree map to a

00:10:29.200 --> 00:10:34.000
Caption: hashmap

00:10:30.838 --> 00:10:37.278
Caption: so why would replacing treemap with

00:10:34.000 --> 00:10:37.278
Caption: hashmap make a difference

00:10:38.078 --> 00:10:40.799
Caption: well

00:10:39.039 --> 00:10:42.559
Caption: obviously the synchronized block itself

00:10:40.799 --> 00:10:45.760
Caption: is a bit of an issue and it&#39;s mutually

00:10:42.559 --> 00:10:48.159
Caption: exclusive and blocks all but one thread

00:10:45.760 --> 00:10:49.600
Caption: and that one thread spends obviously too

00:10:48.159 --> 00:10:50.559
Caption: long from getting a decision from the

00:10:49.599 --> 00:10:52.559
Caption: cache

00:10:50.559 --> 00:10:54.320
Caption: but but why still why does it take so

00:10:52.559 --> 00:10:55.599
Caption: long to get a decision from the cache

00:10:54.320 --> 00:10:58.320
Caption: and to be fair it doesn&#39;t actually take

00:10:55.599 --> 00:11:00.479
Caption: that long but um the difference here is

00:10:58.320 --> 00:11:02.799
Caption: that tree map is based on a red black

00:11:00.479 --> 00:11:03.679
Caption: tree and hash map is based on a hash

00:11:02.799 --> 00:11:05.760
Caption: table

00:11:03.679 --> 00:11:07.838
Caption: now i realize at this point not everyone

00:11:05.760 --> 00:11:10.078
Caption: in this room has probably

00:11:07.838 --> 00:11:12.398
Caption: studied computer science and and knows

00:11:10.078 --> 00:11:14.880
Caption: about big o notation so that search

00:11:12.398 --> 00:11:16.479
Caption: column is big o notation

00:11:14.880 --> 00:11:18.559
Caption: and it says that

00:11:16.479 --> 00:11:20.799
Caption: a red black tree runs in log in time and

00:11:18.559 --> 00:11:22.559
Caption: a hash table runs in constant time but

00:11:20.799 --> 00:11:24.719
Caption: what does that actually mean

00:11:22.559 --> 00:11:27.440
Caption: so the the next two columns are if i

00:11:24.719 --> 00:11:30.398
Caption: have a cache of size 100 and a cache of

00:11:27.440 --> 00:11:32.479
Caption: size 100 000 how long does it take me to

00:11:30.398 --> 00:11:34.958
Caption: look up my item

00:11:32.479 --> 00:11:37.440
Caption: well if we&#39;re using the tree map

00:11:34.958 --> 00:11:38.958
Caption: i may need to look at six elements

00:11:37.440 --> 00:11:40.398
Caption: before i find the one that i&#39;m looking

00:11:38.958 --> 00:11:42.000
Caption: for

00:11:40.398 --> 00:11:43.919
Caption: if there are 100 elements in the cache

00:11:42.000 --> 00:11:45.278
Caption: but if that&#39;s 100 000 then i&#39;m going to

00:11:43.919 --> 00:11:48.239
Caption: need to examine

00:11:45.278 --> 00:11:51.119
Caption: uh 16 elements but our good old hash

00:11:48.239 --> 00:11:52.719
Caption: table i only i can find the element that

00:11:51.119 --> 00:11:56.359
Caption: i&#39;m looking for immediately regardless

00:11:52.719 --> 00:11:56.359
Caption: of the size of the cache

00:11:56.880 --> 00:12:00.799
Caption: all right so principles are done but

00:11:59.278 --> 00:12:03.119
Caption: what are some of the performance issues

00:12:00.799 --> 00:12:04.719
Caption: that i&#39;ve observed over the years and

00:12:03.119 --> 00:12:07.838
Caption: this sort of hopefully adds some

00:12:04.719 --> 00:12:07.838
Caption: credibility to this talk

00:12:07.919 --> 00:12:11.679
Caption: software engineers that is a bit of a

00:12:09.919 --> 00:12:13.039
Caption: joke

00:12:11.679 --> 00:12:15.919
Caption: but they are the they are the people

00:12:13.039 --> 00:12:15.919
Caption: that write the code

00:12:22.958 --> 00:12:27.200
Caption: all right databases this happens all the

00:12:26.159 --> 00:12:30.239
Caption: time

00:12:27.200 --> 00:12:32.160
Caption: indexes um they&#39;re either missing or

00:12:30.239 --> 00:12:34.239
Caption: misconfigured they&#39;ve got the wrong

00:12:32.159 --> 00:12:35.919
Caption: wrong columns or the wrong column order

00:12:34.239 --> 00:12:38.479
Caption: now i think there could be multiple

00:12:35.919 --> 00:12:40.719
Caption: reasons for this um

00:12:38.479 --> 00:12:42.479
Caption: like the worst being negligence but

00:12:40.719 --> 00:12:44.479
Caption: quite often i think that it&#39;s more of a

00:12:42.479 --> 00:12:46.398
Caption: maintenance issue where we change the

00:12:44.479 --> 00:12:48.479
Caption: code at the application layer but then

00:12:46.398 --> 00:12:51.200
Caption: we forget to actually go back to the db

00:12:48.479 --> 00:12:54.320
Caption: and update the indices to match

00:12:51.200 --> 00:12:56.079
Caption: similarly we have each team has

00:12:54.320 --> 00:12:57.838
Caption: individuals of different levels of

00:12:56.078 --> 00:12:59.760
Caption: experience so

00:12:57.838 --> 00:13:01.039
Caption: less experienced people may not know

00:12:59.760 --> 00:13:02.720
Caption: about

00:13:01.039 --> 00:13:06.078
Caption: indices and they also may not know about

00:13:02.719 --> 00:13:08.000
Caption: things like database query plans

00:13:06.078 --> 00:13:10.000
Caption: and then finally a little bit less

00:13:08.000 --> 00:13:12.239
Caption: column but i&#39;ve seen a fair bit of

00:13:10.000 --> 00:13:14.000
Caption: database misused so because we have a

00:13:12.239 --> 00:13:15.760
Caption: relational beat db we may as well use it

00:13:14.000 --> 00:13:17.679
Caption: as a document db

00:13:15.760 --> 00:13:19.200
Caption: or maybe we just need somewhere to

00:13:17.679 --> 00:13:21.359
Caption: aggregate data so let&#39;s just use the

00:13:19.200 --> 00:13:23.119
Caption: relational db

00:13:21.359 --> 00:13:25.838
Caption: instead of using say a stream processing

00:13:23.119 --> 00:13:28.078
Caption: engine so there&#39;s a lot

00:13:25.838 --> 00:13:30.799
Caption: quite a few examples there

00:13:28.078 --> 00:13:32.638
Caption: and probably my favorite of all is

00:13:30.799 --> 00:13:35.359
Caption: traditional orms

00:13:32.638 --> 00:13:37.199
Caption: so object relation mappings

00:13:35.359 --> 00:13:38.559
Caption: this enables us to write software

00:13:37.200 --> 00:13:40.480
Caption: without actually having to write

00:13:38.559 --> 00:13:43.518
Caption: database queries we just

00:13:40.479 --> 00:13:46.239
Caption: use higher level constructs and

00:13:43.518 --> 00:13:49.119
Caption: the orm will take care of sql generation

00:13:46.239 --> 00:13:51.679
Caption: now the primary issue with rrms that

00:13:49.119 --> 00:13:54.559
Caption: i&#39;ve observed is that the db interaction

00:13:51.679 --> 00:13:57.039
Caption: is opaque so we we don&#39;t see

00:13:54.559 --> 00:13:58.719
Caption: uh what sql gets generated we don&#39;t know

00:13:57.039 --> 00:14:01.039
Caption: if it&#39;s sufficient and we don&#39;t know how

00:13:58.719 --> 00:14:03.119
Caption: many how many times uh statements are

00:14:01.039 --> 00:14:04.880
Caption: being created and run

00:14:03.119 --> 00:14:06.638
Caption: and there&#39;s a very common problem called

00:14:04.880 --> 00:14:09.039
Caption: the m plus one problem that i won&#39;t i

00:14:06.638 --> 00:14:10.239
Caption: won&#39;t detail here but it&#39;s it&#39;s easy to

00:14:09.039 --> 00:14:11.679
Caption: solve but it&#39;s just something to be

00:14:10.239 --> 00:14:13.278
Caption: aware of

00:14:11.679 --> 00:14:16.880
Caption: and then the final

00:14:13.278 --> 00:14:19.198
Caption: performance pane with rms is select star

00:14:16.880 --> 00:14:21.599
Caption: so whenever we use an rm it always

00:14:19.198 --> 00:14:23.278
Caption: brings back every column of every table

00:14:21.599 --> 00:14:25.119
Caption: even though we mainly care about three

00:14:23.278 --> 00:14:26.398
Caption: fields and if we

00:14:25.119 --> 00:14:28.000
Caption: roll this all the way back and think

00:14:26.398 --> 00:14:30.078
Caption: about our users

00:14:28.000 --> 00:14:31.760
Caption: a good user interface it only shows the

00:14:30.078 --> 00:14:32.958
Caption: information that&#39;s relevant and nothing

00:14:31.760 --> 00:14:34.479
Caption: more so

00:14:32.958 --> 00:14:38.398
Caption: we should we should

00:14:34.479 --> 00:14:38.398
Caption: treat the db the same way really

00:14:39.440 --> 00:14:44.479
Caption: the final common performance issue that

00:14:42.159 --> 00:14:46.319
Caption: i&#39;ve observed is network ignorance

00:14:44.479 --> 00:14:48.159
Caption: and this kind of goes back to the the

00:14:46.320 --> 00:14:50.000
Caption: whole lessons more thing and unders

00:14:48.159 --> 00:14:51.518
Caption: putting ourselves in the place of a

00:14:50.000 --> 00:14:53.679
Caption: computer and think about the different

00:14:51.518 --> 00:14:56.159
Caption: latencies involved

00:14:53.679 --> 00:14:59.119
Caption: the network isn&#39;t particularly quick so

00:14:56.159 --> 00:15:01.759
Caption: we should try and avoid it but yet

00:14:59.119 --> 00:15:03.518
Caption: too often we see many network calls when

00:15:01.760 --> 00:15:06.078
Caption: only one is required

00:15:03.518 --> 00:15:07.599
Caption: and here is a very like here&#39;s an

00:15:06.078 --> 00:15:10.559
Caption: example

00:15:07.599 --> 00:15:12.479
Caption: very simple and this is in javascript

00:15:10.559 --> 00:15:14.000
Caption: we want to

00:15:12.479 --> 00:15:16.880
Caption: all we want to do is find all the

00:15:14.000 --> 00:15:19.198
Caption: devices that um are in a family

00:15:16.880 --> 00:15:20.559
Caption: and so we load all the family members

00:15:19.198 --> 00:15:22.799
Caption: and then we iterate through them and

00:15:20.559 --> 00:15:24.320
Caption: then we load the devices for each family

00:15:22.799 --> 00:15:26.638
Caption: member

00:15:24.320 --> 00:15:28.880
Caption: this is very slow um

00:15:26.638 --> 00:15:31.119
Caption: it&#39;s not a great way to do it so i&#39;d

00:15:28.880 --> 00:15:33.198
Caption: encourage us to think about

00:15:31.119 --> 00:15:36.479
Caption: having as few network calls as possible

00:15:33.198 --> 00:15:38.078
Caption: um and ideally a single call that can do

00:15:36.479 --> 00:15:39.758
Caption: everything that we want and actually you

00:15:38.078 --> 00:15:42.398
Caption: know this is why graphql for example is

00:15:39.758 --> 00:15:45.919
Caption: very popular

00:15:42.398 --> 00:15:48.320
Caption: uh the other one is large payloads so

00:15:45.919 --> 00:15:49.838
Caption: quite often um again if we&#39;re using an

00:15:48.320 --> 00:15:51.759
Caption: orm we might get everything back if

00:15:49.838 --> 00:15:52.958
Caption: we&#39;ve got a restful

00:15:51.758 --> 00:15:54.479
Caption: restful web service we might get

00:15:52.958 --> 00:15:56.159
Caption: everything back

00:15:54.479 --> 00:15:58.880
Caption: and particularly if we&#39;re sharing report

00:15:56.159 --> 00:16:00.479
Caption: data or tabular data we might just do

00:15:58.880 --> 00:16:02.559
Caption: the simple thing which is bring

00:16:00.479 --> 00:16:05.440
Caption: everything back

00:16:02.559 --> 00:16:07.039
Caption: so this is large payloads are more

00:16:05.440 --> 00:16:09.518
Caption: tolerable

00:16:07.039 --> 00:16:11.440
Caption: on fast networks with few hops but as

00:16:09.518 --> 00:16:13.440
Caption: soon as the internet&#39;s involved and

00:16:11.440 --> 00:16:16.398
Caption: traversing the public internet uh large

00:16:13.440 --> 00:16:19.359
Caption: payloads become very slow

00:16:16.398 --> 00:16:22.799
Caption: a reason for this is the tcp windows so

00:16:19.359 --> 00:16:25.278
Caption: most http is based on top of tcp

00:16:22.799 --> 00:16:28.159
Caption: and it and

00:16:25.278 --> 00:16:30.320
Caption: tcp will only send a certain number of

00:16:28.159 --> 00:16:32.638
Caption: bytes to the client before waiting for

00:16:30.320 --> 00:16:34.000
Caption: the client to acknowledge them

00:16:32.638 --> 00:16:35.440
Caption: and then after it gets the

00:16:34.000 --> 00:16:37.599
Caption: acknowledgement it will then send the

00:16:35.440 --> 00:16:39.278
Caption: next chunk of bytes and this so each one

00:16:37.599 --> 00:16:40.799
Caption: of those is effectively a round trip and

00:16:39.278 --> 00:16:43.278
Caption: it can add up if you&#39;ve got a very large

00:16:40.799 --> 00:16:43.278
Caption: payload

00:16:43.919 --> 00:16:48.559
Caption: all right no talk on performance would

00:16:46.880 --> 00:16:50.638
Caption: be uh

00:16:48.559 --> 00:16:55.278
Caption: it were like worthwhile without a war

00:16:50.638 --> 00:16:55.278
Caption: story so this is a reasonably recent one

00:16:55.440 --> 00:17:00.159
Caption: so last year family zone experienced a

00:16:57.919 --> 00:17:02.799
Caption: period of rapid growth so these are

00:17:00.159 --> 00:17:05.599
Caption: unique um unique visitors

00:17:02.799 --> 00:17:07.280
Caption: and so we went from about 15 000 in

00:17:05.599 --> 00:17:09.678
Caption: march 2020

00:17:07.280 --> 00:17:12.239
Caption: all the way through to almost um one and

00:17:09.678 --> 00:17:13.678
Caption: a half million by the end of the year

00:17:12.239 --> 00:17:15.760
Caption: and

00:17:13.678 --> 00:17:18.958
Caption: this is a wonderful way for teasing out

00:17:15.760 --> 00:17:20.000
Caption: performance bottlenecks in your system

00:17:18.958 --> 00:17:22.000
Caption: so

00:17:20.000 --> 00:17:24.479
Caption: one one of those bottlenecks we have a

00:17:22.000 --> 00:17:25.918
Caption: classroom product and so and

00:17:24.479 --> 00:17:28.719
Caption: inadvertently this was also one of the

00:17:25.918 --> 00:17:30.880
Caption: reasons why we had we grew so much is

00:17:28.719 --> 00:17:32.798
Caption: that covert struck and our product

00:17:30.880 --> 00:17:34.160
Caption: teachers could do remote learning so the

00:17:32.798 --> 00:17:35.918
Caption: teacher could be at home the students

00:17:34.160 --> 00:17:38.559
Caption: could be at home and the teacher could

00:17:35.918 --> 00:17:40.719
Caption: create classes

00:17:38.558 --> 00:17:42.719
Caption: and interact with their students so what

00:17:40.719 --> 00:17:44.880
Caption: this screenshot is showing is the

00:17:42.719 --> 00:17:47.599
Caption: teacher&#39;s view of the world and each

00:17:44.880 --> 00:17:49.280
Caption: tile is a student&#39;s desktop so the

00:17:47.599 --> 00:17:50.880
Caption: teacher can keep track of what their

00:17:49.280 --> 00:17:52.880
Caption: students are doing and make sure that

00:17:50.880 --> 00:17:56.959
Caption: they&#39;re all doing mathematics and that

00:17:52.880 --> 00:17:56.959
Caption: little johnny isn&#39;t off on youtube

00:17:57.678 --> 00:18:01.119
Caption: so

00:17:58.959 --> 00:18:04.000
Caption: an approximation of part of the

00:18:01.119 --> 00:18:05.599
Caption: architecture is this so we have the

00:18:04.000 --> 00:18:07.918
Caption: teachers browsers on the bottom right

00:18:05.599 --> 00:18:11.599
Caption: corner and up the top left we have an

00:18:07.918 --> 00:18:14.000
Caption: ingestion api and so that ingestion api

00:18:11.599 --> 00:18:15.839
Caption: is constantly receiving screenshot data

00:18:14.000 --> 00:18:18.479
Caption: from laptops

00:18:15.839 --> 00:18:21.359
Caption: and it does two things it first of all

00:18:18.479 --> 00:18:23.599
Caption: it stores the actual image data in redis

00:18:21.359 --> 00:18:25.280
Caption: which is the screenshot cache there and

00:18:23.599 --> 00:18:26.719
Caption: then it publishes an event so anyone

00:18:25.280 --> 00:18:29.039
Caption: that wants to know about that screenshot

00:18:26.719 --> 00:18:29.918
Caption: can be informed about it and really the

00:18:29.038 --> 00:18:31.038
Caption: only

00:18:29.918 --> 00:18:32.558
Caption: only

00:18:31.038 --> 00:18:34.959
Caption: subscriber of that event is the

00:18:32.558 --> 00:18:36.640
Caption: teacher&#39;s browser um so

00:18:34.959 --> 00:18:38.079
Caption: hey littlejohny&#39;s you know watching

00:18:36.640 --> 00:18:40.558
Caption: youtube a new event arrives the

00:18:38.079 --> 00:18:43.038
Caption: teacher&#39;s browser makes a request to the

00:18:40.558 --> 00:18:45.439
Caption: api to the data service and to redis to

00:18:43.038 --> 00:18:46.719
Caption: fetch the fresh image

00:18:45.439 --> 00:18:48.479
Caption: now

00:18:46.719 --> 00:18:50.319
Caption: when we first went live or sorry when we

00:18:48.479 --> 00:18:52.239
Caption: first experienced the growth

00:18:50.319 --> 00:18:53.439
Caption: our event service got destroyed and i&#39;m

00:18:52.239 --> 00:18:55.678
Caption: not actually going to talk about that

00:18:53.439 --> 00:18:58.798
Caption: but we and so as you can see here we had

00:18:55.678 --> 00:19:00.959
Caption: 1500 events going in and only 150 coming

00:18:58.798 --> 00:19:02.798
Caption: out the other side and this was actually

00:19:00.959 --> 00:19:04.000
Caption: a terrible terrible experience for our

00:19:02.798 --> 00:19:06.319
Caption: teachers

00:19:04.000 --> 00:19:09.280
Caption: they couldn&#39;t effectively

00:19:06.319 --> 00:19:11.678
Caption: conduct remote learning sessions

00:19:09.280 --> 00:19:14.320
Caption: so we replaced the event service but

00:19:11.678 --> 00:19:17.519
Caption: then something else happened kaboom

00:19:14.319 --> 00:19:19.199
Caption: redis caught on fire

00:19:17.520 --> 00:19:20.880
Caption: and and i&#39;ve seen this many times

00:19:19.199 --> 00:19:24.359
Caption: actually you remove one bottleneck to

00:19:20.880 --> 00:19:24.359
Caption: discover another

00:19:24.959 --> 00:19:29.119
Caption: so what did we do

00:19:27.038 --> 00:19:30.959
Caption: so the good news is we had thought a

00:19:29.119 --> 00:19:32.239
Caption: little bit about this and we&#39;re like ah

00:19:30.959 --> 00:19:33.839
Caption: there&#39;s gonna be more events hitting the

00:19:32.239 --> 00:19:36.239
Caption: teachers browsers so why don&#39;t we just

00:19:33.839 --> 00:19:37.918
Caption: queue them up send and then create a

00:19:36.239 --> 00:19:40.400
Caption: batch request and send that off to the

00:19:37.918 --> 00:19:41.839
Caption: api so we can load multiple screenshots

00:19:40.400 --> 00:19:43.200
Caption: in one go

00:19:41.839 --> 00:19:45.760
Caption: we did that

00:19:43.199 --> 00:19:46.959
Caption: um but then redis caught fire and so

00:19:45.760 --> 00:19:48.959
Caption: first of all

00:19:46.959 --> 00:19:50.959
Caption: personally i screamed at the impossible

00:19:48.959 --> 00:19:53.599
Caption: because i&#39;ve used redis a lot and i&#39;ve

00:19:50.959 --> 00:19:55.359
Caption: never destroyed it before so

00:19:53.599 --> 00:19:56.319
Caption: this is the first for me

00:19:55.359 --> 00:19:59.038
Caption: um

00:19:56.319 --> 00:20:00.798
Caption: now we had to resolve the customer

00:19:59.038 --> 00:20:02.798
Caption: customer issue immediately because it

00:20:00.798 --> 00:20:06.000
Caption: was effectively a complete outage to

00:20:02.798 --> 00:20:08.079
Caption: people using the classroom product so we

00:20:06.000 --> 00:20:08.798
Caption: actually added in a dynamic throttle to

00:20:08.079 --> 00:20:10.640
Caption: our

00:20:08.798 --> 00:20:13.119
Caption: event service which is just handcrafted

00:20:10.640 --> 00:20:14.799
Caption: code that basically just dropped a

00:20:13.119 --> 00:20:17.439
Caption: percentage of screenshots and so we

00:20:14.798 --> 00:20:21.519
Caption: could turn it up or turn it down

00:20:17.439 --> 00:20:23.759
Caption: at runtime and and and so we would

00:20:21.520 --> 00:20:25.119
Caption: follow the production load and um when

00:20:23.760 --> 00:20:26.959
Caption: it got too much turn it down a little

00:20:25.119 --> 00:20:29.520
Caption: bit turn it down a little bit uh and

00:20:26.959 --> 00:20:30.959
Caption: that was really good but also very sad

00:20:29.520 --> 00:20:34.000
Caption: as a developer you never really want to

00:20:30.959 --> 00:20:35.439
Caption: live at the capabilities of your service

00:20:34.000 --> 00:20:37.839
Caption: and obviously we can commenced

00:20:35.439 --> 00:20:39.759
Caption: investigation

00:20:37.839 --> 00:20:41.918
Caption: so what did we observe

00:20:39.760 --> 00:20:43.599
Caption: uh one minor observation was that our

00:20:41.918 --> 00:20:45.439
Caption: data service was a bit slow and needed

00:20:43.599 --> 00:20:47.119
Caption: replacing but that data service was

00:20:45.439 --> 00:20:49.199
Caption: horizontally scalable so whilst it

00:20:47.119 --> 00:20:51.599
Caption: wasn&#39;t wonderful we could spend a bit

00:20:49.199 --> 00:20:53.439
Caption: more and still be online

00:20:51.599 --> 00:20:55.678
Caption: and we were just using redis as a

00:20:53.439 --> 00:20:57.119
Caption: vanilla key value cache

00:20:55.678 --> 00:21:00.798
Caption: and for those that don&#39;t know redis is

00:20:57.119 --> 00:21:02.158
Caption: actually single threaded much like node

00:21:00.798 --> 00:21:03.279
Caption: and so you know there&#39;s no contention

00:21:02.159 --> 00:21:04.880
Caption: there it&#39;s just a single thread that

00:21:03.280 --> 00:21:07.200
Caption: does all the work

00:21:04.880 --> 00:21:08.640
Caption: uh and we noticed that the redis cpu was

00:21:07.199 --> 00:21:11.119
Caption: actually at 100

00:21:08.640 --> 00:21:12.400
Caption: so something&#39;s definitely going on

00:21:11.119 --> 00:21:14.640
Caption: going on here

00:21:12.400 --> 00:21:16.719
Caption: now fortunately for us we we had a

00:21:14.640 --> 00:21:19.200
Caption: dashboard and we we had the redis

00:21:16.719 --> 00:21:21.038
Caption: commands on our dash so we knew

00:21:19.199 --> 00:21:22.719
Caption: which commands were being used and we

00:21:21.038 --> 00:21:24.000
Caption: there were only four

00:21:22.719 --> 00:21:26.640
Caption: put get

00:21:24.000 --> 00:21:28.000
Caption: multiple get and keys

00:21:26.640 --> 00:21:29.919
Caption: now

00:21:28.000 --> 00:21:31.678
Caption: multiple get was interesting so this is

00:21:29.918 --> 00:21:33.599
Caption: when the teacher&#39;s browser calls back

00:21:31.678 --> 00:21:34.719
Caption: with a collection of students and says

00:21:33.599 --> 00:21:36.798
Caption: get me the

00:21:34.719 --> 00:21:38.880
Caption: screenshots for all these students

00:21:36.798 --> 00:21:41.359
Caption: but in this case um you know there might

00:21:38.880 --> 00:21:44.159
Caption: be just 10 students at absolute worst

00:21:41.359 --> 00:21:46.640
Caption: and and five keys so that&#39;s 50 50. so

00:21:44.159 --> 00:21:49.039
Caption: that&#39;s not super expensive but then

00:21:46.640 --> 00:21:50.799
Caption: keys in itself though this is the number

00:21:49.038 --> 00:21:52.558
Caption: of items in the redis cache the number

00:21:50.798 --> 00:21:54.399
Caption: of screenshots that we have in there and

00:21:52.558 --> 00:21:57.839
Caption: so there&#39;s a hundred thousand of those

00:21:54.400 --> 00:22:00.960
Caption: probably and so that that that is

00:21:57.839 --> 00:22:02.400
Caption: dubious why are we calling keys so we

00:22:00.959 --> 00:22:05.119
Caption: we weren&#39;t the authors of the data

00:22:02.400 --> 00:22:07.599
Caption: service so we dug a little deeper

00:22:05.119 --> 00:22:10.479
Caption: so it turns out that a single user can

00:22:07.599 --> 00:22:12.479
Caption: have multiple windows and so

00:22:10.479 --> 00:22:15.280
Caption: that could be another monitor or maybe

00:22:12.479 --> 00:22:16.959
Caption: they&#39;ve got separate chrome windows

00:22:15.280 --> 00:22:19.280
Caption: but each of those ends up we get a

00:22:16.959 --> 00:22:22.479
Caption: different screenshot for each of those

00:22:19.280 --> 00:22:26.239
Caption: and so we used user id plus

00:22:22.479 --> 00:22:28.158
Caption: window id as our cache key in redis and

00:22:26.239 --> 00:22:30.719
Caption: so if we looked at the data service we

00:22:28.159 --> 00:22:33.679
Caption: would see some pseudo code that says

00:22:30.719 --> 00:22:35.678
Caption: hey redis get me all all keys that match

00:22:33.678 --> 00:22:38.319
Caption: this user id

00:22:35.678 --> 00:22:41.038
Caption: and then now then i&#39;ve got my set of

00:22:38.319 --> 00:22:43.599
Caption: user ids hey redis can you please get me

00:22:41.038 --> 00:22:44.959
Caption: all the screenshots for these users

00:22:43.599 --> 00:22:47.439
Caption: so

00:22:44.959 --> 00:22:49.520
Caption: the first one is horrible because we you

00:22:47.439 --> 00:22:52.079
Caption: know we may have to redis may need to

00:22:49.520 --> 00:22:53.679
Caption: iterate through a thousand sorry 100 000

00:22:52.079 --> 00:22:55.279
Caption: cash keys

00:22:53.678 --> 00:22:58.000
Caption: and then the second ones we can deal

00:22:55.280 --> 00:23:00.400
Caption: with that&#39;s absolutely fine

00:22:58.000 --> 00:23:02.239
Caption: so we know we need to eliminate keys but

00:23:00.400 --> 00:23:04.960
Caption: how are we going to do it

00:23:02.239 --> 00:23:07.599
Caption: so we were using redis as a key valve

00:23:04.959 --> 00:23:09.439
Caption: but fortunately redis also supports hash

00:23:07.599 --> 00:23:11.599
Caption: tables as the value

00:23:09.439 --> 00:23:14.000
Caption: and so what we can actually do now is

00:23:11.599 --> 00:23:17.119
Caption: say our key is just the student or the

00:23:14.000 --> 00:23:18.798
Caption: user id and our hash table

00:23:17.119 --> 00:23:21.359
Caption: the key within the hash table is the

00:23:18.798 --> 00:23:22.719
Caption: window id and then the value is the the

00:23:21.359 --> 00:23:25.918
Caption: image data

00:23:22.719 --> 00:23:28.239
Caption: so what what effect did this have

00:23:25.918 --> 00:23:31.038
Caption: well redis was a lot happier

00:23:28.239 --> 00:23:32.959
Caption: um and so we can see that we&#39;ve

00:23:31.038 --> 00:23:34.959
Caption: we&#39;ve got two two network calls have

00:23:32.959 --> 00:23:37.599
Caption: become one which is a win

00:23:34.959 --> 00:23:41.119
Caption: um and similarly the the actual redis

00:23:37.599 --> 00:23:43.119
Caption: operation h get all um or hashgraph

00:23:41.119 --> 00:23:44.798
Caption: uh there&#39;s very few keys that we&#39;re

00:23:43.119 --> 00:23:48.880
Caption: actually examining with that so it&#39;s

00:23:44.798 --> 00:23:48.880
Caption: effectively constant time lookup for us

00:23:49.279 --> 00:23:51.119
Caption: so

00:23:50.400 --> 00:23:55.279
Caption: we

00:23:51.119 --> 00:23:57.119
Caption: we went live with this change um and

00:23:55.279 --> 00:23:59.520
Caption: all of a sudden um we were started

00:23:57.119 --> 00:24:01.199
Caption: receiving feedback from support that our

00:23:59.520 --> 00:24:03.279
Caption: customers are happy again and everything

00:24:01.199 --> 00:24:05.278
Caption: was resolved so it&#39;s a big win for us

00:24:03.279 --> 00:24:07.520
Caption: and our support staff and also the sales

00:24:05.279 --> 00:24:07.520
Caption: team

00:24:08.640 --> 00:24:12.159
Caption: but

00:24:09.520 --> 00:24:15.520
Caption: we we had observed that redis was still

00:24:12.159 --> 00:24:16.960
Caption: operating at about 70 cpu so we&#39;re

00:24:15.520 --> 00:24:19.279
Caption: putting it under

00:24:16.959 --> 00:24:20.640
Caption: pretty high load so we had some further

00:24:19.279 --> 00:24:22.640
Caption: work to do but

00:24:20.640 --> 00:24:24.239
Caption: fortunately we could spend our time here

00:24:22.640 --> 00:24:26.320
Caption: and actually do a little bit of research

00:24:24.239 --> 00:24:27.359
Caption: and plan out how we wanted to attack

00:24:26.319 --> 00:24:28.158
Caption: things

00:24:27.359 --> 00:24:29.839
Caption: so

00:24:28.159 --> 00:24:31.360
Caption: we replaced standalone redis with

00:24:29.839 --> 00:24:33.520
Caption: clustered redis

00:24:31.359 --> 00:24:35.038
Caption: we actually replaced the data service

00:24:33.520 --> 00:24:37.200
Caption: with the screenshot service which was

00:24:35.038 --> 00:24:39.759
Caption: much more performant

00:24:37.199 --> 00:24:42.319
Caption: and then all the way through we

00:24:39.760 --> 00:24:44.000
Caption: effectively used streaming so

00:24:42.319 --> 00:24:46.639
Caption: in the case of redis we use res

00:24:44.000 --> 00:24:48.079
Caption: pipelining for streaming but then that

00:24:46.640 --> 00:24:49.440
Caption: from in the case of anything that was

00:24:48.079 --> 00:24:51.760
Caption: http

00:24:49.439 --> 00:24:54.079
Caption: we used chunked encoding

00:24:51.760 --> 00:24:56.479
Caption: and that enabled us to keep

00:24:54.079 --> 00:24:59.519
Caption: memory under control and not actually

00:24:56.479 --> 00:25:01.278
Caption: have to allocate or bring the entire

00:24:59.520 --> 00:25:04.719
Caption: classroom full of screenshots into

00:25:01.279 --> 00:25:04.720
Caption: memory for our api

00:25:06.479 --> 00:25:09.278
Caption: so

00:25:07.439 --> 00:25:10.639
Caption: our job&#39;s not done though just because

00:25:09.279 --> 00:25:12.240
Caption: our customers are happy it doesn&#39;t mean

00:25:10.640 --> 00:25:15.200
Caption: we have things to do so we need to have

00:25:12.239 --> 00:25:17.038
Caption: a retrospective

00:25:15.199 --> 00:25:19.199
Caption: so what went wrong here well

00:25:17.038 --> 00:25:21.918
Caption: first of all i personally made the

00:25:19.199 --> 00:25:24.479
Caption: mistake of not doing proper analysis

00:25:21.918 --> 00:25:27.599
Caption: and load testing of the screenshots api

00:25:24.479 --> 00:25:28.880
Caption: and and the reason for that is in part

00:25:27.599 --> 00:25:30.719
Caption: because i

00:25:28.880 --> 00:25:32.558
Caption: you know i&#39;d never broken redis before i

00:25:30.719 --> 00:25:33.918
Caption: didn&#39;t think it was breakable

00:25:32.558 --> 00:25:35.918
Caption: um

00:25:33.918 --> 00:25:37.918
Caption: another observation was that good

00:25:35.918 --> 00:25:39.359
Caption: observability really did enable us to

00:25:37.918 --> 00:25:43.278
Caption: resolve this problem quickly for our

00:25:39.359 --> 00:25:44.719
Caption: customers um and that in turn gave great

00:25:43.279 --> 00:25:46.720
Caption: confidence to our support and sales

00:25:44.719 --> 00:25:48.558
Caption: teams

00:25:46.719 --> 00:25:50.239
Caption: the other one was that a root cause fix

00:25:48.558 --> 00:25:51.678
Caption: here

00:25:50.239 --> 00:25:53.038
Caption: we knew that this problem was done and

00:25:51.678 --> 00:25:54.640
Caption: dusted with and it wasn&#39;t going to come

00:25:53.038 --> 00:25:57.678
Caption: back to bite us we might have future

00:25:54.640 --> 00:26:00.479
Caption: problems but we were satisfied that this

00:25:57.678 --> 00:26:02.158
Caption: this same issue wasn&#39;t going to recur

00:26:00.479 --> 00:26:04.558
Caption: another another observation was that

00:26:02.159 --> 00:26:06.320
Caption: redis has excellent documentation every

00:26:04.558 --> 00:26:08.959
Caption: single redis command

00:26:06.319 --> 00:26:11.678
Caption: they provide us the big o notation so as

00:26:08.959 --> 00:26:12.959
Caption: software engineers we know how our code

00:26:11.678 --> 00:26:14.640
Caption: is going to perform when we interact

00:26:12.959 --> 00:26:16.000
Caption: with redis assuming we&#39;ve read the

00:26:14.640 --> 00:26:17.678
Caption: manual

00:26:16.000 --> 00:26:20.079
Caption: but

00:26:17.678 --> 00:26:23.038
Caption: and then finally um simplicity again

00:26:20.079 --> 00:26:26.079
Caption: going back to this um the kiss

00:26:23.038 --> 00:26:28.079
Caption: the kiss sorry keep it simple stupid um

00:26:26.079 --> 00:26:30.158
Caption: the data service was really easy to

00:26:28.079 --> 00:26:33.119
Caption: replace with the screenshot service and

00:26:30.159 --> 00:26:34.400
Caption: so again i felt that

00:26:33.119 --> 00:26:35.918
Caption: in my like

00:26:34.400 --> 00:26:37.839
Caption: whenever we do future software

00:26:35.918 --> 00:26:40.798
Caption: development work just again try and keep

00:26:37.839 --> 00:26:40.798
Caption: everything really simple

00:26:41.359 --> 00:26:45.599
Caption: okay so

00:26:43.279 --> 00:26:47.679
Caption: covering all of these issues

00:26:45.599 --> 00:26:51.678
Caption: how can we apply the performance

00:26:47.678 --> 00:26:53.439
Caption: principles to our day-to-day returns

00:26:51.678 --> 00:26:55.439
Caption: so the first thing for me is

00:26:53.439 --> 00:26:56.959
Caption: documentation i know documentation in

00:26:55.439 --> 00:26:58.079
Caption: some ways is a little bit of a dry

00:26:56.959 --> 00:26:59.038
Caption: subject

00:26:58.079 --> 00:27:00.719
Caption: but um

00:26:59.038 --> 00:27:03.199
Caption: i think we should document service level

00:27:00.719 --> 00:27:05.520
Caption: objectives so a service level objective

00:27:03.199 --> 00:27:08.158
Caption: is really a contract between you and

00:27:05.520 --> 00:27:09.760
Caption: your customer so and that might be from

00:27:08.159 --> 00:27:12.320
Caption: what a service being the customer of

00:27:09.760 --> 00:27:14.479
Caption: another service or or a human customer

00:27:12.319 --> 00:27:15.918
Caption: using interacting with your website

00:27:14.479 --> 00:27:18.640
Caption: and so

00:27:15.918 --> 00:27:19.599
Caption: work with your user user experience team

00:27:18.640 --> 00:27:22.239
Caption: or your

00:27:19.599 --> 00:27:24.479
Caption: product management team and define what

00:27:22.239 --> 00:27:26.319
Caption: your slos are so do you expect all of

00:27:24.479 --> 00:27:28.798
Caption: your pages to be fully rendered within

00:27:26.319 --> 00:27:31.839
Caption: two seconds

00:27:28.798 --> 00:27:33.278
Caption: maybe you probably should in that case

00:27:31.839 --> 00:27:36.319
Caption: make sure that that&#39;s widely known and

00:27:33.279 --> 00:27:37.760
Caption: documented similarly with new features

00:27:36.319 --> 00:27:42.079
Caption: make sure that we

00:27:37.760 --> 00:27:43.760
Caption: write slos into the acceptance criteria

00:27:42.079 --> 00:27:45.678
Caption: and you know different

00:27:43.760 --> 00:27:47.839
Caption: different features for example will have

00:27:45.678 --> 00:27:49.599
Caption: different slos so if you&#39;ve got a search

00:27:47.839 --> 00:27:51.119
Caption: api you&#39;re going to want that thing to

00:27:49.599 --> 00:27:53.199
Caption: be pretty quickly users are going to

00:27:51.119 --> 00:27:54.880
Caption: expect to see results quickly so make it

00:27:53.199 --> 00:27:56.880
Caption: quick

00:27:54.880 --> 00:28:01.558
Caption: but then something like a reporting job

00:27:56.880 --> 00:28:01.558
Caption: it&#39;s absolutely fine to take your time

00:28:02.000 --> 00:28:06.959
Caption: right what else can we document

00:28:04.558 --> 00:28:08.798
Caption: database index usage

00:28:06.959 --> 00:28:11.278
Caption: so it&#39;s a really simple one but if

00:28:08.798 --> 00:28:15.038
Caption: you&#39;ve got code that interacts with a db

00:28:11.279 --> 00:28:17.119
Caption: um document the index i i firmly believe

00:28:15.038 --> 00:28:18.879
Caption: this helps with long-term maintenance

00:28:17.119 --> 00:28:20.079
Caption: plus it&#39;s a really good educational

00:28:18.880 --> 00:28:22.319
Caption: piece so

00:28:20.079 --> 00:28:23.839
Caption: um newer developers kind of less

00:28:22.319 --> 00:28:26.880
Caption: experienced developers coming into a

00:28:23.839 --> 00:28:28.798
Caption: team will see this and then they&#39;ll be

00:28:26.880 --> 00:28:30.558
Caption: curious and ask questions or look at

00:28:28.798 --> 00:28:33.760
Caption: documentation so

00:28:30.558 --> 00:28:36.239
Caption: it&#39;s very very useful

00:28:33.760 --> 00:28:38.479
Caption: okay now here&#39;s a here&#39;s another example

00:28:36.239 --> 00:28:40.479
Caption: we&#39;re going to if you as a software

00:28:38.479 --> 00:28:42.000
Caption: engineer have thought about

00:28:40.479 --> 00:28:43.520
Caption: the performance implications of your

00:28:42.000 --> 00:28:45.520
Caption: code and there&#39;s something that you

00:28:43.520 --> 00:28:46.799
Caption: should point out to future readers

00:28:45.520 --> 00:28:47.599
Caption: document it

00:28:46.798 --> 00:28:49.678
Caption: so

00:28:47.599 --> 00:28:51.678
Caption: this method here is a very simple method

00:28:49.678 --> 00:28:53.839
Caption: that looks through a collection of

00:28:51.678 --> 00:28:55.038
Caption: intervals and and determines whether any

00:28:53.839 --> 00:28:56.880
Caption: of those

00:28:55.038 --> 00:28:58.798
Caption: intervals contains

00:28:56.880 --> 00:29:00.000
Caption: the current time

00:28:58.798 --> 00:29:02.398
Caption: that could be the future time as well

00:29:00.000 --> 00:29:04.319
Caption: actually it&#39;s poorly named variable

00:29:02.399 --> 00:29:07.200
Caption: um

00:29:04.319 --> 00:29:08.319
Caption: so how could we document this

00:29:07.199 --> 00:29:10.639
Caption: so

00:29:08.319 --> 00:29:12.398
Caption: in our case we might be using this to

00:29:10.640 --> 00:29:16.000
Caption: determine whether or not a teacher has a

00:29:12.399 --> 00:29:16.000
Caption: class that&#39;s active right now

00:29:16.079 --> 00:29:20.079
Caption: but we know that a teacher is never

00:29:17.760 --> 00:29:23.599
Caption: going to have more than 100 classes and

00:29:20.079 --> 00:29:25.599
Caption: and so we&#39;re super happy

00:29:23.599 --> 00:29:27.520
Caption: iterating through 100 items because that

00:29:25.599 --> 00:29:29.918
Caption: will never we we&#39;re confident this will

00:29:27.520 --> 00:29:32.000
Caption: never become a performance

00:29:29.918 --> 00:29:34.079
Caption: performance pain for us and and so we

00:29:32.000 --> 00:29:35.839
Caption: know that it runs in constant time but

00:29:34.079 --> 00:29:37.199
Caption: hey if we used an interval tree then we

00:29:35.839 --> 00:29:39.038
Caption: could get log in which would be much

00:29:37.199 --> 00:29:41.119
Caption: much faster but

00:29:39.038 --> 00:29:42.798
Caption: interval trees aren&#39;t in the jdk

00:29:41.119 --> 00:29:43.918
Caption: and and we we&#39;re never going to use this

00:29:42.798 --> 00:29:45.119
Caption: with more than 100 intervals so it

00:29:43.918 --> 00:29:48.000
Caption: doesn&#39;t matter

00:29:45.119 --> 00:29:50.399
Caption: but we can go better still

00:29:48.000 --> 00:29:52.880
Caption: i i know a few of you a few people in

00:29:50.399 --> 00:29:55.919
Caption: the audience won&#39;t be liking this one

00:29:52.880 --> 00:29:58.000
Caption: but we we should be logging this as an

00:29:55.918 --> 00:30:00.319
Caption: error because this method was designed

00:29:58.000 --> 00:30:02.479
Caption: only to support 100 intervals

00:30:00.319 --> 00:30:05.278
Caption: uh and hopefully we have monitoring on

00:30:02.479 --> 00:30:06.558
Caption: our monitoring and alerting on errors in

00:30:05.279 --> 00:30:08.559
Caption: our logs so

00:30:06.558 --> 00:30:10.319
Caption: if we get pinged about this whilst we

00:30:08.558 --> 00:30:12.798
Caption: might not have a customer issue we can

00:30:10.319 --> 00:30:14.798
Caption: prevent a customer issue from occurring

00:30:12.798 --> 00:30:17.278
Caption: well similarly this could actually we

00:30:14.798 --> 00:30:19.359
Caption: may have 100 intervals because we&#39;ve got

00:30:17.279 --> 00:30:20.559
Caption: bad data in our db something else has

00:30:19.359 --> 00:30:23.359
Caption: changed and all of a sudden we&#39;ve got

00:30:20.558 --> 00:30:25.278
Caption: more data than we need to so so these

00:30:23.359 --> 00:30:27.678
Caption: kinds of statements can be very very

00:30:25.279 --> 00:30:27.679
Caption: useful

00:30:28.239 --> 00:30:33.199
Caption: right observability

00:30:31.359 --> 00:30:35.359
Caption: super super useful

00:30:33.199 --> 00:30:38.079
Caption: now

00:30:35.359 --> 00:30:40.239
Caption: what the what that really means is that

00:30:38.079 --> 00:30:42.558
Caption: us as software engineers we&#39;re looking

00:30:40.239 --> 00:30:44.719
Caption: at logs and metrics and traces

00:30:42.558 --> 00:30:46.558
Caption: we should be able to have a reasonable

00:30:44.719 --> 00:30:48.479
Caption: idea or indication of what&#39;s going on

00:30:46.558 --> 00:30:50.479
Caption: with our software and systems

00:30:48.479 --> 00:30:53.678
Caption: that may not always be true but most of

00:30:50.479 --> 00:30:53.678
Caption: the time we should be able to

00:30:54.399 --> 00:30:59.200
Caption: why would we want to do this

00:30:56.239 --> 00:31:01.119
Caption: well if we&#39;ve got things to look at

00:30:59.199 --> 00:31:04.479
Caption: we can look at them frequently and and

00:31:01.119 --> 00:31:07.599
Caption: that enables us to become familiar so we

00:31:04.479 --> 00:31:10.000
Caption: know what what usage patterns service a

00:31:07.599 --> 00:31:11.599
Caption: has and at what times of the day

00:31:10.000 --> 00:31:13.199
Caption: and if we&#39;re looking at it frequently we

00:31:11.599 --> 00:31:15.439
Caption: know what it looks like normally and if

00:31:13.199 --> 00:31:18.319
Caption: we notice anything different then we can

00:31:15.439 --> 00:31:21.119
Caption: dig into that proactively

00:31:18.319 --> 00:31:22.959
Caption: similarly if we if we do have an outage

00:31:21.119 --> 00:31:24.880
Caption: um and actually whether or not it&#39;s

00:31:22.959 --> 00:31:26.880
Caption: related to performance we can improve

00:31:24.880 --> 00:31:29.440
Caption: our mean time to resolve by having

00:31:26.880 --> 00:31:31.839
Caption: excellent observability

00:31:29.439 --> 00:31:33.518
Caption: and the final point here is just that in

00:31:31.839 --> 00:31:35.199
Caption: this day and age a lot of our systems

00:31:33.519 --> 00:31:36.720
Caption: are quite complex so we might be talking

00:31:35.199 --> 00:31:38.479
Caption: to readers we might talk to a database

00:31:36.719 --> 00:31:40.079
Caption: we might be using

00:31:38.479 --> 00:31:41.918
Caption: pub sub there&#39;s

00:31:40.079 --> 00:31:44.079
Caption: lots of things all

00:31:41.918 --> 00:31:46.000
Caption: co-mingled and maybe we&#39;re orchestrating

00:31:44.079 --> 00:31:47.678
Caption: with kubernetes

00:31:46.000 --> 00:31:49.918
Caption: in this complex system there are many

00:31:47.678 --> 00:31:51.359
Caption: unknowns we don&#39;t know how our system is

00:31:49.918 --> 00:31:53.678
Caption: going to fail

00:31:51.359 --> 00:31:55.119
Caption: but if we&#39;ve got good observability when

00:31:53.678 --> 00:31:57.278
Caption: unknowns do

00:31:55.119 --> 00:32:01.119
Caption: come up we can normally convert them to

00:31:57.279 --> 00:32:04.000
Caption: knowns fairly effectively

00:32:01.119 --> 00:32:06.959
Caption: so what do we need

00:32:04.000 --> 00:32:07.918
Caption: and sadly there is no no perfect answer

00:32:06.959 --> 00:32:10.398
Caption: here

00:32:07.918 --> 00:32:12.719
Caption: it really depends on what the thing is

00:32:10.399 --> 00:32:14.799
Caption: are you trying to observe a web page or

00:32:12.719 --> 00:32:16.558
Caption: a mobile app or you&#39;re trying to observe

00:32:14.798 --> 00:32:17.599
Caption: something that&#39;s server-side

00:32:16.558 --> 00:32:19.038
Caption: um

00:32:17.599 --> 00:32:21.518
Caption: yeah all of these things have different

00:32:19.038 --> 00:32:22.719
Caption: requirements and how is that thing being

00:32:21.519 --> 00:32:26.320
Caption: used

00:32:22.719 --> 00:32:27.678
Caption: um you know is it is it critical uh what

00:32:26.319 --> 00:32:30.239
Caption: happened what does it mean for your

00:32:27.678 --> 00:32:32.239
Caption: customer if you have an outage and then

00:32:30.239 --> 00:32:35.599
Caption: finally what&#39;s your budget because some

00:32:32.239 --> 00:32:35.599
Caption: of the tools are expensive

00:32:37.038 --> 00:32:40.239
Caption: so yeah so as mentioned there&#39;s many

00:32:38.558 --> 00:32:42.239
Caption: kinds of things that we could also

00:32:40.239 --> 00:32:44.079
Caption: measure and monitor i won&#39;t go into

00:32:42.239 --> 00:32:46.319
Caption: those

00:32:44.079 --> 00:32:48.158
Caption: now this observability triangle really

00:32:46.319 --> 00:32:50.079
Caption: goes from the

00:32:48.159 --> 00:32:52.159
Caption: top which is the best of the

00:32:50.079 --> 00:32:54.640
Caption: observability but it&#39;s also the most

00:32:52.159 --> 00:32:57.519
Caption: expensive either through dollars or um

00:32:54.640 --> 00:32:59.359
Caption: where dollars may be just cash or or

00:32:57.519 --> 00:33:00.960
Caption: dollars could be time

00:32:59.359 --> 00:33:03.119
Caption: so apm stands for application

00:33:00.959 --> 00:33:05.278
Caption: performance monitor and this gives us

00:33:03.119 --> 00:33:06.880
Caption: wonderful insight into our

00:33:05.279 --> 00:33:08.960
Caption: existing

00:33:06.880 --> 00:33:10.479
Caption: services and

00:33:08.959 --> 00:33:12.239
Caption: uh next down the list we&#39;ve got

00:33:10.479 --> 00:33:14.558
Caption: boundaries and dump sorry boundaries

00:33:12.239 --> 00:33:17.599
Caption: which basically just means whenever your

00:33:14.558 --> 00:33:19.599
Caption: application speaks to something else or

00:33:17.599 --> 00:33:21.839
Caption: you cross a tier within the application

00:33:19.599 --> 00:33:24.000
Caption: that that&#39;s a boundary and so you should

00:33:21.839 --> 00:33:25.518
Caption: you should measure around that to

00:33:24.000 --> 00:33:26.798
Caption: understand

00:33:25.519 --> 00:33:28.960
Caption: what happens when you cross that

00:33:26.798 --> 00:33:32.000
Caption: boundary

00:33:28.959 --> 00:33:34.079
Caption: similarly it&#39;s critical to be able to

00:33:32.000 --> 00:33:35.439
Caption: heap and stack them for this they&#39;re

00:33:34.079 --> 00:33:37.119
Caption: very useful and there&#39;s different ways

00:33:35.439 --> 00:33:38.558
Caption: you can do that but

00:33:37.119 --> 00:33:40.239
Caption: definitely worth doing and then the

00:33:38.558 --> 00:33:42.000
Caption: simplest and cheapest of all is just

00:33:40.239 --> 00:33:44.079
Caption: making sure you&#39;ve got rudimentary

00:33:42.000 --> 00:33:45.678
Caption: metrics uh and monitoring over critical

00:33:44.079 --> 00:33:47.678
Caption: paths and endpoints

00:33:45.678 --> 00:33:49.760
Caption: and i&#39;ll just jump on to what an apm

00:33:47.678 --> 00:33:52.319
Caption: actually looks like because not everyone

00:33:49.760 --> 00:33:54.479
Caption: may have seen them before i stole this

00:33:52.319 --> 00:33:55.839
Caption: image from datadog&#39;s website and and i

00:33:54.479 --> 00:33:58.239
Caption: should also say that whilst we are a

00:33:55.839 --> 00:34:02.079
Caption: datadog customer we don&#39;t use datadog

00:33:58.239 --> 00:34:02.079
Caption: apms because they&#39;re expensive

00:34:02.319 --> 00:34:05.439
Caption: so

00:34:03.760 --> 00:34:08.079
Caption: all of a sudden we can see inside a

00:34:05.439 --> 00:34:09.678
Caption: particular service and we can see

00:34:08.079 --> 00:34:11.200
Caption: where we&#39;re spending a lot of time like

00:34:09.678 --> 00:34:14.239
Caption: which method we&#39;re spending a lot of

00:34:11.199 --> 00:34:16.479
Caption: time in and us as us as developers we we

00:34:14.239 --> 00:34:18.320
Caption: know whether or not this is an issue i

00:34:16.479 --> 00:34:21.040
Caption: might be expecting to sleep not asleep a

00:34:18.320 --> 00:34:23.040
Caption: lot so so that&#39;s okay but

00:34:21.040 --> 00:34:25.520
Caption: it just gives us so much insight into

00:34:23.040 --> 00:34:26.879
Caption: our running application

00:34:25.520 --> 00:34:28.719
Caption: now

00:34:26.878 --> 00:34:30.799
Caption: this is an example of where in a

00:34:28.719 --> 00:34:32.000
Caption: previous life

00:34:30.800 --> 00:34:35.040
Caption: new relic

00:34:32.000 --> 00:34:35.918
Caption: has an apm as well and new relic saved

00:34:35.040 --> 00:34:36.800
Caption: us

00:34:35.918 --> 00:34:38.878
Caption: so

00:34:36.800 --> 00:34:41.839
Caption: we had some code that this i worked for

00:34:38.878 --> 00:34:44.638
Caption: an e-commerce company and our service

00:34:41.839 --> 00:34:45.359
Caption: was responsible for showing prices on

00:34:44.638 --> 00:34:48.000
Caption: all

00:34:45.358 --> 00:34:50.398
Caption: websites and all mobile apps and we had

00:34:48.000 --> 00:34:51.439
Caption: many millions of active users

00:34:50.398 --> 00:34:53.838
Caption: um

00:34:51.439 --> 00:34:55.760
Caption: and what had happened is there&#39;s an api

00:34:53.839 --> 00:34:58.239
Caption: layer managed by another team that&#39;s

00:34:55.760 --> 00:35:00.639
Caption: that was above our service and that was

00:34:58.239 --> 00:35:03.280
Caption: moving from a caching to a non-caching

00:35:00.639 --> 00:35:05.919
Caption: architecture so our service

00:35:03.280 --> 00:35:07.439
Caption: used to get about 250 250 requests per

00:35:05.919 --> 00:35:09.280
Caption: second but then

00:35:07.439 --> 00:35:10.159
Caption: over a period of a few months got up to

00:35:09.280 --> 00:35:12.159
Caption: about

00:35:10.159 --> 00:35:13.919
Caption: 25 000 per second

00:35:12.159 --> 00:35:16.319
Caption: and so

00:35:13.919 --> 00:35:18.799
Caption: anyway we we noticed that we&#39;d started

00:35:16.320 --> 00:35:21.760
Caption: to slow down and our metrics had blown

00:35:18.800 --> 00:35:24.160
Caption: out and we got alerted and so we jumped

00:35:21.760 --> 00:35:25.199
Caption: into new relic and had a look

00:35:24.159 --> 00:35:26.959
Caption: and

00:35:25.199 --> 00:35:29.118
Caption: the bit of code that it pointed to i

00:35:26.959 --> 00:35:31.679
Caption: looked at this load deal

00:35:29.118 --> 00:35:34.000
Caption: yep i know it&#39;s going to be the

00:35:31.679 --> 00:35:37.040
Caption: talking to the db it&#39;s always the db

00:35:34.000 --> 00:35:39.040
Caption: it&#39;s going to be fined by id

00:35:37.040 --> 00:35:41.280
Caption: wrong it was not

00:35:39.040 --> 00:35:42.320
Caption: our db was fine our connection pooling

00:35:41.280 --> 00:35:44.880
Caption: was fine

00:35:42.320 --> 00:35:47.839
Caption: instead we were using java 6 at the time

00:35:44.879 --> 00:35:51.439
Caption: and the currency class within

00:35:47.839 --> 00:35:54.480
Caption: java 6 is actually pretty inefficient

00:35:51.439 --> 00:35:56.319
Caption: and the the get instance method

00:35:54.479 --> 00:35:59.280
Caption: actually takes out a synchronize a

00:35:56.320 --> 00:36:01.920
Caption: global synchronized lock

00:35:59.280 --> 00:36:04.320
Caption: and so only one thread can execute that

00:36:01.919 --> 00:36:06.078
Caption: now fortunately it is using a hash map

00:36:04.320 --> 00:36:08.400
Caption: so it does run in constant time but

00:36:06.079 --> 00:36:11.040
Caption: still there is so much contention on

00:36:08.399 --> 00:36:14.000
Caption: that lock amongst other threads that

00:36:11.040 --> 00:36:16.160
Caption: this was a major bottleneck and um

00:36:14.000 --> 00:36:18.239
Caption: new relic pointed us exactly to where

00:36:16.159 --> 00:36:20.000
Caption: that bottleneck was and we were able to

00:36:18.239 --> 00:36:21.919
Caption: resolve that

00:36:20.000 --> 00:36:24.959
Caption: in under an hour actually and get the

00:36:21.919 --> 00:36:28.239
Caption: prod fix out and so that&#39;s excellent you

00:36:24.959 --> 00:36:28.239
Caption: know mean time to recovery

00:36:28.959 --> 00:36:31.199
Caption: now

00:36:29.760 --> 00:36:32.880
Caption: we are coders

00:36:31.199 --> 00:36:34.879
Caption: and hopefully we all do code review as

00:36:32.879 --> 00:36:37.279
Caption: well maybe we pay a program

00:36:34.879 --> 00:36:40.399
Caption: and so really these practices apply

00:36:37.280 --> 00:36:42.880
Caption: equally to both

00:36:40.399 --> 00:36:44.319
Caption: i think the first and most important one

00:36:42.879 --> 00:36:45.118
Caption: or at least depends on what you&#39;re doing

00:36:44.320 --> 00:36:48.000
Caption: but

00:36:45.118 --> 00:36:48.799
Caption: always consider growth and scale like

00:36:48.000 --> 00:36:50.239
Caption: um

00:36:48.800 --> 00:36:52.000
Caption: what what&#39;s our

00:36:50.239 --> 00:36:53.598
Caption: sales forecast like how many new

00:36:52.000 --> 00:36:55.199
Caption: customers are we going to have in the

00:36:53.599 --> 00:36:58.240
Caption: future

00:36:55.199 --> 00:36:59.760
Caption: what if we have 10 000 things instead of

00:36:58.239 --> 00:37:01.839
Caption: 10

00:36:59.760 --> 00:37:03.280
Caption: is there any unnecessary io or

00:37:01.839 --> 00:37:04.400
Caption: connection

00:37:03.280 --> 00:37:07.359
Caption: uh

00:37:04.399 --> 00:37:09.439
Caption: if i&#39;m talking if i&#39;m writing code that

00:37:07.358 --> 00:37:11.838
Caption: interacts with the database if i&#39;m using

00:37:09.439 --> 00:37:14.560
Caption: hibernate or another orm well then make

00:37:11.839 --> 00:37:16.640
Caption: sure i&#39;m logging sql and run query plans

00:37:14.560 --> 00:37:19.760
Caption: against the output sql

00:37:16.639 --> 00:37:19.760
Caption: there&#39;s a lot that we can do

00:37:21.520 --> 00:37:27.280
Caption: all right so this example um

00:37:24.959 --> 00:37:29.358
Caption: was fairly recently

00:37:27.280 --> 00:37:30.959
Caption: uh at family zone we introduced a new

00:37:29.358 --> 00:37:33.519
Caption: database technology something called

00:37:30.959 --> 00:37:36.000
Caption: cockroachdb which is a horizontally

00:37:33.520 --> 00:37:40.079
Caption: scalable relational db it&#39;s very cool

00:37:36.000 --> 00:37:42.399
Caption: tech but we&#39;ve never used it before

00:37:40.079 --> 00:37:43.839
Caption: and so we had a really simple

00:37:42.399 --> 00:37:46.959
Caption: simple relationship here it&#39;s a

00:37:43.839 --> 00:37:49.200
Caption: many-to-many relationship between

00:37:46.959 --> 00:37:51.199
Caption: users and guardians

00:37:49.199 --> 00:37:53.439
Caption: and and

00:37:51.199 --> 00:37:55.280
Caption: so the fortunately the

00:37:53.439 --> 00:37:58.000
Caption: software engineers in the team

00:37:55.280 --> 00:37:59.439
Caption: they they decided to run some load up

00:37:58.000 --> 00:38:01.599
Caption: this database before we got anywhere

00:37:59.439 --> 00:38:03.679
Caption: near production with data and then run

00:38:01.599 --> 00:38:05.680
Caption: some query plans and they quickly saw

00:38:03.679 --> 00:38:09.679
Caption: that what they thought would be a really

00:38:05.679 --> 00:38:11.358
Caption: quick query actually scanned 28 000 rows

00:38:09.679 --> 00:38:13.679
Caption: and so this was strange they&#39;ve just got

00:38:11.358 --> 00:38:15.519
Caption: a very simple many-to-many relationship

00:38:13.679 --> 00:38:16.719
Caption: they&#39;ve defined their foreign keys what

00:38:15.520 --> 00:38:18.880
Caption: was going on

00:38:16.719 --> 00:38:20.800
Caption: so as it turned out um different

00:38:18.879 --> 00:38:22.159
Caption: databases have different characteristics

00:38:20.800 --> 00:38:24.079
Caption: and uh one of cockroaches

00:38:22.159 --> 00:38:26.559
Caption: characteristics is that when you create

00:38:24.079 --> 00:38:29.280
Caption: a foreign key it doesn&#39;t automatically

00:38:26.560 --> 00:38:30.800
Caption: create an index on the column referenced

00:38:29.280 --> 00:38:32.800
Caption: in the foreign table

00:38:30.800 --> 00:38:34.400
Caption: not all dbs do but they hadn&#39;t

00:38:32.800 --> 00:38:35.359
Caption: experienced it before

00:38:34.399 --> 00:38:37.118
Caption: but

00:38:35.358 --> 00:38:38.639
Caption: fortunately for them they did their due

00:38:37.118 --> 00:38:41.118
Caption: diligence as

00:38:38.639 --> 00:38:42.879
Caption: and ran query plans and they added the

00:38:41.118 --> 00:38:44.799
Caption: index and got their estimated row count

00:38:42.879 --> 00:38:47.118
Caption: down to one and the thing i like about

00:38:44.800 --> 00:38:49.119
Caption: this is it was spending time with the

00:38:47.118 --> 00:38:52.399
Caption: new technology reading the manual

00:38:49.118 --> 00:38:55.039
Caption: working through it um and

00:38:52.399 --> 00:38:57.279
Caption: this would definitely have become a

00:38:55.040 --> 00:38:58.719
Caption: production issue if they hadn&#39;t done

00:38:57.280 --> 00:39:00.000
Caption: this because we were going to load this

00:38:58.719 --> 00:39:02.399
Caption: up with

00:39:00.000 --> 00:39:05.439
Caption: about 3 million students so and it was

00:39:02.399 --> 00:39:05.439
Caption: going to be hit a lot

00:39:05.919 --> 00:39:09.598
Caption: so that&#39;s it for me thank you very much

00:39:08.320 --> 00:39:11.520
Caption: for listening

00:39:09.599 --> 00:39:13.920
Caption: just to kind of recap we

00:39:11.520 --> 00:39:16.719
Caption: i introduced a few principles and

00:39:13.919 --> 00:39:19.118
Caption: explained how i think though they help

00:39:16.719 --> 00:39:21.040
Caption: us to derive good practices as software

00:39:19.118 --> 00:39:23.519
Caption: engineers

00:39:21.040 --> 00:39:27.320
Caption: hopefully some of this was useful useful

00:39:23.520 --> 00:39:27.320
Caption: to you thank you very much

