"foreign okay well thank you everyone for coming back to jacquel Negal again up next we have Aaron who's going to be talking about unleashing the power of Visual Studio code probably one of the more industry changing editors of recent times I would say so please everyone put your hands together to welcome Aaron to the stage thanks for having me um as mentioned my name is Aaron I work for Microsoft as part of the cloud advocacy team I've been doing software development and web development for longer that I'm going to admit to or that in a session that's being recorded and streamed out but I I I've used a lot of editors in my time like I I got started with like pico and um and stuff like that emacs on on Linux machines when I was uh first at Uni and then obviously have graduated to more complex editors but yeah like vs code is it's been huge like in like the way that has changed how people think about you know Simple Text editors because at the end of the day that's that's what it is and the fact that I'm I'm here and you're stuck in a room with me for the next 45 minutes to hear me talk about a text editor I think that's kind of a kind of a big deal out but yeah if you if you want to uh get in contact with you after the session ask me any questions that I don't get a chance to cover off during uh during the talk uh that's my social media and uh website and email address and all that kind of stuff but um before we jump into the talk I want to thank the sponsors um I've been doing DDD conferences in Australia for 12 years now and they can't happen without sponsors um like all the ones we've got here particularly Microsoft they're an awesome sponsor you should really come and see us at the booth afterwards um yeah and that's where I'll be hanging out for the rest of the day so if you do want to come ask any other questions find me there but we're here to to talk about the power of vs code um no so whether whether you're brand new to the tech industry you're looking to get into Tech um or you've been in it for you know the nearly 20 years that I've been in it um yeah I hope that there's going to be something in this session for you um I I've put this together because I I'm I think that it's while it seems so simple it's a text editor there's so many hidden things in it um but to get started I'm going to just make sure that you know for those of you that haven't used vs code before or you haven't had um I had much experience with it let's just make sure that we're all on the same page so we're gonna do a quick lap around vs code so this is uh vs code um I've got a project of mine open there um don't try and read the text it's not particularly interesting or relevant um but what I'm going to do is I want to break down the core features of the text editor across the top we have the the title bar and that's where you your menu systems are and like every application Under the Sun has got a title bar of someone's description but the interesting thing about the vs code one is that it's highly customizable in fact like everything in vs code is highly customizable so at the top it's got things like the the file name um of the file that we're currently got open it's got the the information about the uh the repo this is connected to I'm connected to a remote vs code instance so I'm using it with WSL so it's got that information in there but you can actually edit that and change you know strip out information you don't think is going to be needed or you don't want to display in there and this can be really really useful some someone that has maybe some attention uh issues and some some newer diversion in that regardless I can strip out the stuff that isn't like I don't need to have it there I don't need it to tell me I'm in vs code because I know I'm in vs code um for example like you can you can modify it to be the editor that you need it to be we have the sidebar um on the left-hand side um I actually hit mine on the right hand side and you know I'll I'll show you uh why when I jump into actually editor but this is where we have like our files and our folder structure that's all there it's where we get to the debugger we get to Source control so we can um like make our commits into the git repo or um is there any other source control that people still use like it's like SVN oh now now am I really dating myself CVS anyone anyone serious yeah yeah um but so the other thing with the sidebar is that uh extensions that you can add to vs code can also introduce things in here so I've got a couple additional icons down the bottom there the Azure extension a Docker extension and a few things like that so that that um there's functionality specific to that I don't know a complex extension like the Azure one that allows you work with Azure resources you know it's all there and I can do it with inside of the editor so the editor goes beyond just being a um a text editing place it's also a more complex tool there are seats up the front feel like you don't feel like you need to awkwardly stand around the back down the bottom we have our status bar and this is again showing just a whole bunch of uh like little quick quick pieces of information things like what branch are we on in the the git repo that we've got open now are there any errors or warnings in the project that I've got open um what's the what's the lining Coatings because that's a painful thing there are still seats please do come in don't you don't feel like you need to stand in the doorway um and like what what uh language Services being used so this is It's a HTML file that's got open HTML but I can change that to you know what and that indicates then and that can be useful if uh you know you've uh working with you know multiple languages that uh maybe uh more esoteric than uh and kind of just you common run in the middle sort of stuff but again you can turn as much of this stuff off as you want because again you might not want that information you might not need it there because you know it's contextually irrelevant to you or um you find it distracting to have that kind of stuff all there uh then we've got our terminal across the bottom so there's an integrated terminal in vs code um uh that we can we can open up but we can open up as many terminal Windows as we can um when I'm working I tend to have just vs code open and I don't even have a separate terminal app running anymore I just pop the terminal up um run my npm commands or run my git installs oh sorry get my GIF commands and stuff like that um all within here also interestingly um if you do run like a node uh command so like in a npm start to how to run a web server from the VSCO terminal it will automatically attach a debugger for you you don't even have to like do anything extra to get debugging running for like a node application yeah npm start as your debugger already ready to go um and then there's actually a text editing surface as well like it's been like five minutes and I haven't talked about the fact that you could edit a text document in a text editor but I mean you can it's it's it's obviously the core feature um no it does all the things you'd expect from a text that ever does syntax highlighting um I have like errors and stuff like that will appear if the language service that you're using is um is servicing that information up um and this is a HTML file it's you know if it's got a variety of colors in there to indicate the different things inside of that and lastly we have our mini map view of the file so there's like a 10 000 view of the file that you're in um and this is not a particularly long file so it's all condensed at the top and you can see even like the the colorization appears there um but this can be useful if you're scrolling through a thousand long thousands of like a file that's like a thousand miles long not that anyone's writing like single files that are like like several thousands Lines no no one does that do they I see some I see some awkward uh awkward nodding of the head there um all right so that's vs code in a very quick nutshell uh and you know kind of like all like all the different aspects of vs code and the things that are in there so let's now talk about all right how can we use it to be productive and and for me being productive means keyboard like I'm I'm a keyboard um user I I don't have an external Mouse like when I'm when I'm using my laptop I don't use an external Mouse I can use an external Mouse at home because I have a desktop but I so I've done everything I can to try and memorize as many keyboard shortcuts as I can I know a scary amount of word shortcuts so like I can power using my way through Microsoft Word um but also in vs code um and let's jump over there's enough slides at the moment let's jump over and actually have a look at BS code and some stuff that we've got in here so I've got a couple of different vs coded this is open um the the you should be able to read the text but again don't worry about the text in there this is mostly my notes so feel free to read ahead and just then zone out to me because this is what I'm going to be covering but if there is only one shortcut key in vs code that you learn it is control p this brings up um the defaults to the file picker so I can use this to find the readme file hit enter and opens the file I'm currently in but we can also use uh this to say type a question mark and here are all the other things that we can get from this um the it moves on from being just a file a file picker to being a command palette so I could do a greater than symbol and then these are all the things like the actions I can perform within uh vs code I can open the settings or I can go to uh like uh so I've actually traveled on a thing called screencast mode uh so as I type the keyboard shortcuts uh they'll pop up quickly on the screen so you know I'm like here's the keyboard shortcut and you're like I can't see the keyboard Aaron you're up there and there's a screen um so I've got that turned on so you can see uh so control P comes with the file picker control shift p if I hit the correct Keys um go straight to the actions so uh this is just a because it's a quick one because this is probably the most common thing that you tend to do from the file picker uh so from from the the command palette um other things I like like if I type view I can get to the slide bar um on the right hand side there cool it's a false to the left-hand side I move it to the right hand side because if I expand it and collapse it pops in and out if I have it on the left let's see if I can remember how to move it to the left I actually can't remember how to move it to the left it's somewhere in settings it's been so long since I've done that oh was it ah excellent there we go um control B hides and shows it but this is really annoying for me because you now your focal point is um is Shifting because the the editor surface is moving so that's why I move mine to the right um anyway so control P View and then I can go to explore pop up into this bit or control B P view uh debug and get to the debug section okay um so I don't have to maybe like memorize um the shortcut keys I think that's wow F5 I think might get you to that I forget um but I just do control P view um but also then I can say in Explorer if I was in Explorer I can then go to like the uh the folders or the outline view or um you know so I can actually navigate the sub menus within or the sub sections with inside of um the the sidebar um using the command palette again just all off the off the keyboard there another one um term for uh quick access to anything to do with thermals and create a new terminal that one's going to be down there and a term whoops turn and then I can create another terminal and then I can swap between them um but we tell them they're all called zsh because that's the shell that I'm using in this case uh but it was like well which one which ones which how do I easily know that well Ctrl shift p command palette and then we're going to go terminal rename and we'll call this one we'll call this git because I'm going to use that for my git operations and now if I go control P term I can type git and jump to that particular terminal so this is usually if you've got a couple opens maybe you're maybe you're building an application has got a like a front end and a back end and if you've got a couple of terminals open ones running the back end um like the npm command to run the back end the others uh the the front end web application so you've got multiple terminals running node processors well you could rename them so that you can jump back and forth and you can see the uh which one like the log messages from the right one um easily from there all right um so yeah Ctrl P probably like the number one shortcut to take away and to remember uh from this now I'm talking about screencast mode which I've got turned on and we can get to that from settings control comma we'll get to settings we type screen cast and I have that done here um you can actually let me hide terminals uh control backtick will collapse the terminals um error at the bottom hide and show short back tick and how's that control B to collapse that um so with uh with screencast mode Um this can be good for pair programming as well uh so you're uh whether you're doing it like as a um like a remote peer programming session or you've just got someone um that's sitting next to you and you know you don't want them kind of breathing down your neck trying to work out well they see what you're doing um and just total it on can be a useful thing but you can it can be a little bit annoying because like every key stroke is getting captured in here but I can change that and say that I only want it to show you just like the commands so if I'm using the command or I'll sort of those kind of keys it'll just show those up um and that could be a bit more useful I guess if you're doing demos and stuff like that um change font size change uh styling all that kind of stuff there um another useful uh mode of uh this code is Zen mode control K Zed now you just you you want to kind of turn off as many of the distractions as you've got because you you're like you're you're in you're in the moment like you're trying to you know get through a bug or whatever the case may be um this as you can see it's hidden pretty much everything we've hidden the sidebar we've hit the status bar um the the top menus um hidden like we don't even have the you can't even see the different files we've got open I only have one file open at the moment anyway but like you would you could control tab to get between the the files but yeah this is like you know it's a it's a focus mode like we've hidden everything that could be a potential distraction just so we can focus on the thing that we're currently trying to do uh control KZ to get back out of that there are a bunch of settings for Zen mode as well so let's say that it's actually maybe a little bit too aggressive I do still want to have uh line numbers in here I can say that well no don't hide the line numbers go back into zen mode so I can still have my line numbers in there because I like I remember I find that useful so I can navigate up and down or I know where uh where I'm at and things like that customize it for the way that you want to use it it's not just the it's not just trying to be an editor that is generic and you like it forces you to work in a particular way no you customize it for the needs that you've got and I'm just going to turn that back on so that my zen mode is nice clean um from uh from an accessibility standpoint there's been a lot of work in vs code to make that uh an easy Editor to use um and something that I think that people don't consider um too much and and what and I know I didn't consider this for a long time but I used to work uh with a colleague who has albinism and he had very poor eyesight as a result of that so he had to have his font um incredibly large so that he could read it and and that kind of stuff but that can be a problem when you're working on code files because we tend to well I'm lazy so I just you know write things as long as I can I I've got a giant screen at home and a reasonable enough eyesight so I'm quite content to have you know hundreds and hundreds of characters spread across a 32 inch monitor because that's like that's my working experience but that might not be great for everyone on the team so we can turn on editor rules in uh there's code whoops let me just control control K control U to comment and uncomment um so control uh yeah control K is yeah okay U is uncomment control K C is to comment um but there we are so I've turned on some editor rules um and so you can see these uh lines there or you can maybe make it a bit like get that real retro experience and just have a whole heap of scan lines across the screen uh but you can then customize the colors for them and it could be usually it's like oh well we want to keep to it like an 80 character width because we know that there's someone on our team that that's kind of the the width of code that they can show at any point in time so we don't just want to be mindful of that so we you know we have an indicator in there or you know you're you're working on something that's got to be shipped to a Mainframe and it is actually like an 80 character width uh terminal that they're going to be working with so so you want to know where 80 characters is or you're one of those people that is militant about no it doesn't matter that we can have a curved 49 inch monitor around us I am going to have a fixed width of 80 characters in my texts because that's that's what I grew up with uh coding um but yeah it's just like it's it's kind of one of those random little features that I think um can be useful particularly when you're considering uh how other people are also going to be working on um a bio code base or something like that for you but we'll turn them off because they might be a little bit distracted uh another kind of actually I should have kept that open Ctrl shift t open the last file another thing that uh is um is useful and uh I tend to forget to turn it on because I I add it for like the demos I do then I take it out because um I don't try to clean up my uh my workspace beforehand and then forget to have it put it back in uh they're called code actions on save so you want to perform something when uh when the file is being saved that's what code actions on Save code action on Save and oops we can get it to do a variety of different things so what control space one of those is organize Imports so we're going to hit set that to true so let's say that we're working on like a Javascript file one here and we've got a like a a linting rule where we have to we want to keep the order of our Imports in an alphabetical manner it's a it's a fairly common integral well I've got them a bit uh back with you because I want the destructor Imports at the very top so I can go control shift p and then uh all organize Imports or shift alt o is the the default shortcut key for that one I can hit it and it's going to do that for me or with code actions on Save now as soon as I hit Ctrl s to save the file it's going to just run that for me yeah it just like it's a useful little thing particularly if like those are the sorts of things that you're putting in your like your linting rules um there's also another one in there for uh for fix all um so it'll uh if you've got a like a linter installed that is going to be applying um fixing rules it can try and run those for you so like you know eslint um it'll try and apply those fixes to the file as you hit save so okay just like little quality of life improvements that are there uh come back um oh uh the last one from a setting standpoint that could be useful is this default editor language um what it will do is it will attempt to work out from the workspace what is the most common programming language of the files that are in there and when you do control n to create a new file it will assign that language service to the new file so you immediately get your code completion turned on for the file you immediately get the correct like syntax highlighting and colorizations and stuff like that but you can actually overwrite that setting uh so you know I want new files in this repo to be always defaulted to markdown for example I do that for my my blog is running in markdown so I default the files to always be marked down unless I change the the the file with Ctrl k m it's okay m not control K control M Ctrl k m and that's how we can change the language of the file um and so yeah but you can you can set you can let vs code attempt to figure out what should be the default language for a new file or you can force that uh with settings um active active editor language is the the default that's there all right we'll come back to slides for a minute because I want to talk about extensions vs code has a huge amount of extensibility and out of that has grown a massive extensions ecosystem everyone's going to have their favorite extension that you should have installed or that they believe is that it's going to change the way that you use vs code and there are literally thousands of extensions so I am not going to cover them all off in here I'm just going to talk about a couple that I think are really useful and that I've got installed on my machine and they're generic ones they're not um they're not specific to a particular programming language or anything like that so these are these are six um top ones for me um editor config for vs code so editor config if you're unfamiliar with it is a file that you can put into a repo that that you use to define the set default things about a file like what is the default line encoding how many are we using tabs or spaces now what's in default indentation depth and you can then set that for um uh like different for different files so maybe you're like your your bash files they need to have an LF as the default line encoding whereas other files you might want to have a crlf as the the line encoding and then you can and so that that one's a useful one just to enforce standardization with inside of a code base I'll get on pull requests and issues uh just manage all your GitHub stuff uh what full requested issues aspects of GitHub from within vs code don't have to jump out to the website don't have to jump out to the the GitHub um uh desktop application or anything like that um just do it from vs code um rest client if you're doing anything that involves calling apis rest client is so useful um it's the same as like Postman and Insomniac and all those sorts of tools so it allows you to invoke HTTP um requests but the advantage of rest client is that you create a file and then you just execute the things out of that file so you can have you know your examples of how to call an API as a file that you just check in part of your git repo and then you like it's it's all there it's all in one location and you can then execute those from uh with the side of vs code uh peacock this was actually written by a colleague of mine at Microsoft uh and it's it's what a what it does is it changes the colors of like the borders of vs code so you would have seen uh the one that I had uh where is it it's my lovely background uh so see how this has got the green around it uh peacock's done that so if you've got a couple of vs code instances open maybe you want to um you set different colors on them so you know which one it is as your old tabbing um between your uh between your windows uh code spell checker funny story was uh when I was working for a company a number of years ago we were um we were building a custom CRM and we needed to keep track of our person name history because you know if someone changed their name we need to attract that so we created a table called person name history also we thought that's what we named the table it wasn't until several months later that we realized that we'd actually named the table person named his Troy we'd also read in customer RM it had generated a whole bunch of C sharp code from the database so we had all these classes called person name history uh you would get that person if you have a collection of person named his Troy's uh and all that kind of stuff um it was then like this was then in in testing and it was just it was too hard to go back and fix it so like oh well we're shipping to production with person name his choice you want an extension like this one like code spell check sure you don't do that um I I and I'm just horrendously bad at spelling you know the best of times so I use that on my blog and it's just like it's just so nice and uh that I could just not have to worry about that uh and then the last one is to do highlight so uh to do how I'd actually like to use with uh the GitHub uh one so where where you put likewife or like put a comment in you know to do I'm totally going to fix this code later like and you totally gonna come back and do that right um what what to do highlight will do is it will actually find all those in and give you a list of that like you can see that with inside of vs code like here's all the to-do's you've got with inside of the solution um but then I combine that with the GitHub full requests and issues so that you you just select that to do and then immediately create a GitHub issue out of that so that it's not just in the code base that you're totally going to fix it later it's also in your GitHub issues that you're totally going to come back and fix and you just gets de-prioritized down the back um yeah uh these things are like yeah the ones that I find really useful and like I said these aren't specific to any kind of program you're like whether you're writing markdown or python or net or whatever um these can all help out there but I'm a web developer at heart uh so I want to talk about a couple of um my favorite uh web developer or JavaScript developer extensions um and uh since my animations are not quite right uh so um prettier so uh if you're if you're doing JavaScript projects prettier is kind of like it's the de facto standard I think at the moment for doing um code formatting uh for JavaScript applications it also does like HTML and CSS and I think a couple other languages markdown stuff like that there is an extension for vs code so that uh like you don't have to do anything it just uh it includes it and then it gets you can set that as the default format of formatter for for the right files are you JavaScript files so when you um in vs code you tell it to format the file it will execute prettier for you uh combine that with eslint so then you can get your linting um rules uh the the linting information surfaced up with inside of the editor so you can quickly jump around and find those without having to wait until the CIA build has failed because you didn't run uh npm no you didn't run your yield into before pushing uh npm um this is a just a useful extension uh for working with npm I will like when you're working in a package Json file uh you can do control space uh on the version and we'll show you the the vision um versions available for that package and also give you like the the December um City attack sports are like do you want the the hat or do you want a star or whatever the case may be um so yeah you can uh make sure your lucky patch is the right point and the last one is um we shift uh for vs code a bunch of extent an extension for uh Edge so that you can do um like work with the browser from vs code and I'm going to have a crack at actually testing that one out now because I totally didn't just try and do this before okay before I came to uh into the room for the session I totally this was all pre-planned and done this is the day-to-day Perth website I brought it down um I'm gonna let's do npm start and we'll see if that works there we go um and I do have the edge extension installed uh so the edge extension I think it also works with chrome to a degree so because it's it's chromium browsers but this is not working fantastic all right um well the oh I had to do like npm building npm run build I totally didn't read that readme either so I was just like I can clone this run npm install and yeah like everything will be fine yep yep that might not be fine that's going to take a while um let's try I'll show I'll show us a slightly different uh one of it that does work but not quite as much as I wanted there uh so oh another one from there task and then these are uh scripts that I've already got inside of my repo uh that I can run uh this is my this is my blog I'm just going to uh run the the little web server for that it's open and now I'm going to use the edge extension which I've got installed here and there it is I have my website there and I want to hit open so there we go I I do apologize it is going to be very cramped because it's all zoomed in for the editor but there's my there's my website on one side and there's a Dom inspector on the other side so I could go hey let's find that element so I can like I can ins like all that Dom inspectory goodness that's there I have the the CSS um information there uh you probably can't read that unless you're in the front view rows but uh I'm actually using SAS to uh instead of like raw CSS so I'm compiling that down to CSS and that's telling me this is uh banner.scss file um and if I wasn't using it in the way that I'm using it I could actually click through that file and we'll go through the file and disk unfortunately it's not working in this particular vs code instance because I'm connected to a remote machine and it doesn't like so it can't access the file system uh properly to do that pass through that's why I was trying to get this one up and running and it's a good idea that I didn't wait for that because it's still building um but if if you're working with it just like directly on your Mac or Windows machine or Linux machine then um like it like you can click through to that file if you edit in the Styles editor with inside of this extension here it will actually push those to the file on disk so like you know just like full real-time feedback loop that you get there yeah it's a it's a really Nifty extension and I'm not just trying to pimp it because I work for Microsoft and I think Edge is actually a decent browser um like being able to like have like having everything contextually in the one location I find is quite useful all right now I did Consulting work for nearly a decade before joining Microsoft and something that was always frustrating when uh I was doing my Consulting work was that I would come to a new client and be like cool ma'am welcome um here's your machine boom big pile of paper uh that's the setup guide for your machine we'll see at the end of the week who's who's experienced something like that I'm saying I've seen a lot of heads tonight yeah it and just like I feel bad because like I know how much I'm billing for you to be here and you're telling me it's going to take me a week before I can be productive because I've got to you know like and you go through it and then it doesn't work anyway oh yeah sorry it turns out that um no we're actually using the the newer version of Reddit sorry just not like not the old version that's listed in there can you actually got to download the new can you can you upgrade that or um oh yeah we've we forgot to add this step or actually can you go talk to uh this person on the other side of the room because they're going to have to help you um because yeah we haven't documented some of the new stuff that they've added to the uh the environment and like ah it's just it's so frustrating um but with vs code um one of the one of the things we can do with that is uh I mentioned before like editor config and things like that just to reinforce them like code standardization but you can even do that to the point of like editor standardization where um where we can have inside of our DOT vs code folder uh we can include things like settings so settings that are specific for this repo so when you open this repo in vs code these settings are going to be applied so like if if you've got like a you know default file extension that you want to set you can set that just for this project so that you opened up you're not having to set this on a machine wide wide config um another one I don't have it in this one but I think I might have it in actually I'll have it in here maybe I have so many oh there's so many"