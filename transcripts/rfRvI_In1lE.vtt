WEBVTT

00:00:00.000 --> 00:00:07.250
Caption: never assorted I&#39;m gonna start perfect

00:00:02.720 --> 00:00:11.909
Caption: good evening I&#39;m sorry for the technical

00:00:07.250 --> 00:00:15.449
Caption: interruptions well first of all thank

00:00:11.909 --> 00:00:17.909
Caption: you very much for Yahoo and DDD purse

00:00:15.449 --> 00:00:20.698
Caption: and especially also for bankwest for

00:00:17.909 --> 00:00:23.129
Caption: hosting this and inviting me over to

00:00:20.698 --> 00:00:28.379
Caption: Perth it&#39;s in fact the first time I&#39;ve

00:00:23.129 --> 00:00:30.688
Caption: been in purse so great to see you all so

00:00:28.379 --> 00:00:34.349
Caption: now about this function probably

00:00:30.688 --> 00:00:36.840
Caption: programming thing well it&#39;s let&#39;s take a

00:00:34.349 --> 00:00:39.299
Caption: step back let&#39;s not start with frontal

00:00:36.840 --> 00:00:45.319
Caption: programming let&#39;s start with more slowly

00:00:39.299 --> 00:00:49.468
Caption: so in the 60s when Edsger Dijkstra

00:00:45.319 --> 00:00:51.719
Caption: introduced structured programming there

00:00:49.469 --> 00:00:55.520
Caption: were a lot of developers who call it his

00:00:51.719 --> 00:01:02.609
Caption: his his the ideas he put forward

00:00:55.520 --> 00:01:06.270
Caption: academic and not very convincing but

00:01:02.609 --> 00:01:08.400
Caption: today if we when we teach programming I

00:01:06.269 --> 00:01:11.509
Caption: mean nobody would even entertain the

00:01:08.400 --> 00:01:17.569
Caption: idea of doing something different a

00:01:11.510 --> 00:01:20.279
Caption: little later when people like L&amp;K

00:01:17.569 --> 00:01:25.099
Caption: introduced object-oriented programming

00:01:20.279 --> 00:01:28.680
Caption: and languages like small talk in C++

00:01:25.099 --> 00:01:34.500
Caption: again people said well that&#39;s kind of

00:01:28.680 --> 00:01:41.400
Caption: cute but hey I can write my stuff in C

00:01:34.500 --> 00:01:46.610
Caption: and it&#39;s just okay so now we are again

00:01:41.400 --> 00:01:49.470
Caption: in such a paradigm shift in our industry

00:01:46.610 --> 00:01:53.669
Caption: and it&#39;s all the same things all over

00:01:49.470 --> 00:01:59.279
Caption: again isn&#39;t functional programming to

00:01:53.669 --> 00:02:02.399
Caption: academic or impractical well maybe it&#39;s

00:01:59.279 --> 00:02:06.328
Caption: okay for those ninja rock star

00:02:02.399 --> 00:02:08.220
Caption: programmer people but not for the

00:02:06.329 --> 00:02:11.639
Caption: average developer

00:02:08.220 --> 00:02:16.889
Caption: and also it&#39;s inefficient and definitely

00:02:11.639 --> 00:02:20.270
Caption: way to complicate it so looks like we

00:02:16.889 --> 00:02:25.770
Caption: are going through these phases right

00:02:20.270 --> 00:02:30.839
Caption: interestingly it&#39;s not just us it turns

00:02:25.770 --> 00:02:34.200
Caption: out that a smart person a professor for

00:02:30.839 --> 00:02:38.069
Caption: Communication Studies Rota Everett

00:02:34.199 --> 00:02:40.559
Caption: Rogers he&#39;s written a book actually

00:02:38.070 --> 00:02:43.080
Caption: called a diffusion of innovation and

00:02:40.559 --> 00:02:47.819
Caption: this is a theory which has been

00:02:43.080 --> 00:02:53.510
Caption: corroborated by business scientists over

00:02:47.820 --> 00:02:59.270
Caption: and over again whether it&#39;s railroads

00:02:53.509 --> 00:03:03.589
Caption: these waters smartphones any kind of

00:02:59.270 --> 00:03:09.419
Caption: technological invention they all

00:03:03.589 --> 00:03:12.479
Caption: propagate through a social group in more

00:03:09.419 --> 00:03:16.410
Caption: or less the same manner so if you look

00:03:12.479 --> 00:03:18.208
Caption: at these curves the blue curve is the

00:03:16.410 --> 00:03:22.199
Caption: number of new people adopting a

00:03:18.208 --> 00:03:24.449
Caption: technology and the yellow curve is the

00:03:22.199 --> 00:03:27.119
Caption: sum of all people who&#39;ve adopted this

00:03:24.449 --> 00:03:28.500
Caption: technology so now when we look at

00:03:27.119 --> 00:03:31.049
Caption: functional programming or any

00:03:28.500 --> 00:03:32.669
Caption: development develop a technology then

00:03:31.050 --> 00:03:36.059
Caption: question is of course what does it mean

00:03:32.669 --> 00:03:37.768
Caption: for somebody have been adopted like it&#39;s

00:03:36.059 --> 00:03:41.130
Caption: a hard core do you have to be a hard

00:03:37.768 --> 00:03:44.279
Caption: core Haskell programmer or isn&#39;t it if

00:03:41.130 --> 00:03:46.260
Caption: you use react in JavaScript I mean

00:03:44.279 --> 00:03:49.440
Caption: you&#39;re doing functional programming so

00:03:46.259 --> 00:03:54.379
Caption: from that count so we may wonder where

00:03:49.440 --> 00:03:58.619
Caption: are we here on this scale so I would say

00:03:54.380 --> 00:04:02.610
Caption: we are kind of in the transition phase

00:03:58.619 --> 00:04:06.059
Caption: between early adopters early majority

00:04:02.610 --> 00:04:10.039
Caption: and that&#39;s important because these

00:04:06.059 --> 00:04:10.039
Caption: different groups of people

00:04:10.080 --> 00:04:14.970
Caption: they adopt technology and innovation for

00:04:13.410 --> 00:04:19.170
Caption: different reasons and in a different

00:04:14.970 --> 00:04:22.079
Caption: manner so if you are interested in kind

00:04:19.170 --> 00:04:24.000
Caption: of promoting something then it&#39;s very

00:04:22.079 --> 00:04:26.909
Caption: important that you understand where you

00:04:24.000 --> 00:04:29.279
Caption: are and you understand what the mindset

00:04:26.910 --> 00:04:32.459
Caption: of the people you are talking to is so

00:04:29.279 --> 00:04:34.859
Caption: let&#39;s look at these groups one by one so

00:04:32.459 --> 00:04:36.479
Caption: the innovators in the when we are

00:04:34.859 --> 00:04:37.919
Caption: talking about programming languages

00:04:36.480 --> 00:04:40.529
Caption: these are people like programming

00:04:37.920 --> 00:04:43.800
Caption: language resources the people who would

00:04:40.529 --> 00:04:45.540
Caption: design and standardize the programming

00:04:43.799 --> 00:04:48.690
Caption: language the people who write the

00:04:45.540 --> 00:04:51.630
Caption: compilers the ecosystems the base

00:04:48.690 --> 00:04:54.540
Caption: libraries the initial tools these are

00:04:51.630 --> 00:04:57.000
Caption: very very people who are very happy to

00:04:54.540 --> 00:04:59.100
Caption: take risk right they define a new

00:04:57.000 --> 00:05:01.320
Caption: programming language go to the extent of

00:04:59.100 --> 00:05:04.440
Caption: writing an entire compiler just to prove

00:05:01.320 --> 00:05:08.309
Caption: to the world that it&#39;s better a base for

00:05:04.440 --> 00:05:11.489
Caption: some measure of betterness right so

00:05:08.309 --> 00:05:13.769
Caption: that&#39;s high risk they&#39;re also usually in

00:05:11.489 --> 00:05:15.599
Caption: the case of pl these people typically

00:05:13.769 --> 00:05:18.750
Caption: have a background in programming

00:05:15.600 --> 00:05:23.010
Caption: language theory they know compilers may

00:05:18.750 --> 00:05:25.260
Caption: be quite a lot of math background so

00:05:23.010 --> 00:05:29.790
Caption: it&#39;s a particular type of person all

00:05:25.260 --> 00:05:32.790
Caption: right and then when you go to the early

00:05:29.790 --> 00:05:34.440
Caption: adopters the early adopters usually have

00:05:32.790 --> 00:05:37.649
Caption: good connection to the innovators and

00:05:34.440 --> 00:05:40.709
Caption: yet those are the people on your team on

00:05:37.649 --> 00:05:43.109
Caption: your test team who who take something

00:05:40.709 --> 00:05:45.509
Caption: new programming language and do the

00:05:43.109 --> 00:05:48.539
Caption: hobby project and the weekends kind of

00:05:45.510 --> 00:05:51.119
Caption: upskill themselves until one day they go

00:05:48.540 --> 00:05:54.119
Caption: in the meeting I think you should use

00:05:51.119 --> 00:05:57.660
Caption: this new technology these are people who

00:05:54.119 --> 00:06:01.769
Caption: bring something new into an existing

00:05:57.660 --> 00:06:03.089
Caption: group right they are not like the

00:06:01.769 --> 00:06:06.269
Caption: innovators they didn&#39;t make it up

00:06:03.089 --> 00:06:07.649
Caption: themselves but they also typically they

00:06:06.269 --> 00:06:10.559
Caption: have good connection to innovators

00:06:07.649 --> 00:06:13.199
Caption: they&#39;re happy to read a research paper

00:06:10.559 --> 00:06:15.809
Caption: with lots of math in it spend a long

00:06:13.200 --> 00:06:19.020
Caption: time to understand it in order to then

00:06:15.809 --> 00:06:21.209
Caption: be able to be the first person in their

00:06:19.019 --> 00:06:21.720
Caption: peer group to say I understand this I

00:06:21.209 --> 00:06:23.389
Caption: can

00:06:21.720 --> 00:06:26.489
Caption: show you how we can do everything better

00:06:23.390 --> 00:06:28.530
Caption: all right still prepare to take quite a

00:06:26.489 --> 00:06:31.649
Caption: lot of risk a lot of investment before

00:06:28.529 --> 00:06:33.029
Caption: there&#39;s a payoff right but they don&#39;t

00:06:31.649 --> 00:06:34.679
Caption: want to start from scratch they wouldn&#39;t

00:06:33.029 --> 00:06:37.459
Caption: want to write a new compilers they want

00:06:34.679 --> 00:06:40.259
Caption: a compiler tools should be kind of okay

00:06:37.459 --> 00:06:44.729
Caption: but they&#39;re happy to figure it out and

00:06:40.260 --> 00:06:47.369
Caption: then then the early majority that&#39;s the

00:06:44.730 --> 00:06:49.950
Caption: rest of the team they&#39;re going like we

00:06:47.369 --> 00:06:52.829
Caption: have to solve a problem right is this

00:06:49.950 --> 00:06:58.860
Caption: stuff ready for production can we use

00:06:52.829 --> 00:07:04.289
Caption: this right so that&#39;s a totally different

00:06:58.859 --> 00:07:06.929
Caption: mindset and they don&#39;t want to sit read

00:07:04.290 --> 00:07:09.480
Caption: a research paper read up about some math

00:07:06.929 --> 00:07:11.429
Caption: behind it they just want to use it if

00:07:09.480 --> 00:07:14.850
Caption: it&#39;s not ready to be used if it&#39;s not

00:07:11.429 --> 00:07:16.259
Caption: ready to solve a problem then rather

00:07:14.850 --> 00:07:18.350
Caption: let&#39;s wait a little longer

00:07:16.260 --> 00:07:23.520
Caption: and the people have solved this problem

00:07:18.350 --> 00:07:27.000
Caption: okay so how do we get the early majority

00:07:23.519 --> 00:07:29.069
Caption: into a functional program so now I mean

00:07:27.000 --> 00:07:32.220
Caption: I can kind of guess the answer already

00:07:29.070 --> 00:07:34.950
Caption: from earlier questions being asked but

00:07:32.220 --> 00:07:39.660
Caption: who would say well I I&#39;m doing frontal

00:07:34.950 --> 00:07:42.840
Caption: programming okay a few people that&#39;s not

00:07:39.660 --> 00:07:45.660
Caption: too surprising because it kind of was

00:07:42.839 --> 00:07:47.729
Caption: probably going to be the inverse of

00:07:45.660 --> 00:07:50.970
Caption: people what do you do functional

00:07:47.729 --> 00:07:55.760
Caption: programming introductory course okay so

00:07:50.970 --> 00:07:59.910
Caption: I&#39;m talking about you people all right

00:07:55.760 --> 00:08:01.770
Caption: so so how can we make function

00:07:59.910 --> 00:08:05.339
Caption: programming attractive to you or how can

00:08:01.769 --> 00:08:08.250
Caption: we can you communicate why it&#39;s

00:08:05.339 --> 00:08:11.040
Caption: interesting right so of course there&#39;s

00:08:08.250 --> 00:08:13.380
Caption: also the other half of the curve about

00:08:11.040 --> 00:08:15.119
Caption: but I&#39;m not interesting that tonight

00:08:13.380 --> 00:08:18.779
Caption: because this is a problem for another

00:08:15.119 --> 00:08:21.750
Caption: day so one reason why I am saying all

00:08:18.779 --> 00:08:23.570
Caption: this is something Amy already mentioned

00:08:21.750 --> 00:08:26.609
Caption: we&#39;ve got lambda cap

00:08:23.570 --> 00:08:28.740
Caption: sorry it&#39;s in Sydney I know it&#39;s far

00:08:26.609 --> 00:08:31.639
Caption: away I just noticed it&#39;s far away I

00:08:28.739 --> 00:08:38.489
Caption: spent five hours on a plane

00:08:31.640 --> 00:08:42.658
Caption: but it&#39;s a really fun conference now so

00:08:38.489 --> 00:08:46.409
Caption: forth until now the idea with lambda

00:08:42.658 --> 00:08:50.760
Caption: tram has always been to be a conference

00:08:46.409 --> 00:08:52.579
Caption: basically for the early adopters all the

00:08:50.760 --> 00:08:55.410
Caption: talks are kind of what we call

00:08:52.580 --> 00:08:58.380
Caption: intermediate to advanced level the idea

00:08:55.409 --> 00:09:00.269
Caption: is people who have maybe spent the

00:08:58.380 --> 00:09:02.429
Caption: weekends kind of trying to learn a

00:09:00.270 --> 00:09:04.470
Caption: functional programming language now at

00:09:02.429 --> 00:09:07.140
Caption: the point where they understand the

00:09:04.469 --> 00:09:09.149
Caption: basics but they want to get to the next

00:09:07.140 --> 00:09:12.299
Caption: level in order to introduce it to their

00:09:09.150 --> 00:09:15.530
Caption: team that was the purpose of the

00:09:12.299 --> 00:09:18.630
Caption: conference that was always this design

00:09:15.530 --> 00:09:21.480
Caption: if you&#39;re one of these people you still

00:09:18.630 --> 00:09:24.630
Caption: got another five days to submit

00:09:21.479 --> 00:09:26.399
Caption: something please do everybody who erased

00:09:24.630 --> 00:09:30.270
Caption: their hand really are going to ask about

00:09:26.400 --> 00:09:34.010
Caption: functional programming but as Amy also

00:09:30.270 --> 00:09:37.320
Caption: already explained there&#39;s something new

00:09:34.010 --> 00:09:40.229
Caption: we are doing this for the first time the

00:09:37.320 --> 00:09:45.270
Caption: welcome to FP day so this is a day of

00:09:40.229 --> 00:09:47.820
Caption: workshops a few workshops where the idea

00:09:45.270 --> 00:09:49.920
Caption: is to take it bit slow take our time to

00:09:47.820 --> 00:09:52.169
Caption: introduce people who who haven&#39;t taught

00:09:49.919 --> 00:09:53.549
Caption: it that much know or not that much

00:09:52.169 --> 00:09:58.829
Caption: experience this functional programming

00:09:53.549 --> 00:10:03.630
Caption: and but I interested and get them show

00:09:58.830 --> 00:10:05.070
Caption: them the basics basically a so you can

00:10:03.630 --> 00:10:06.929
Caption: use function programming if you like to

00:10:05.070 --> 00:10:12.359
Caption: and at least you know what people talk

00:10:06.929 --> 00:10:14.880
Caption: about and you can talk as well and also

00:10:12.359 --> 00:10:16.289
Caption: of course in order to get you to a point

00:10:14.880 --> 00:10:18.270
Caption: where you can throw the other two days

00:10:16.289 --> 00:10:20.489
Caption: of the conference that&#39;s why the Welcome

00:10:18.270 --> 00:10:24.360
Caption: Day is the day before the two main

00:10:20.489 --> 00:10:25.679
Caption: conference days right and yeah I&#39;m going

00:10:24.359 --> 00:10:30.510
Caption: to give an introduction to functional

00:10:25.679 --> 00:10:33.539
Caption: programming and what I want to do today

00:10:30.510 --> 00:10:39.479
Caption: is tell you a little bit about the idea

00:10:33.539 --> 00:10:41.609
Caption: behind it so the question is how what&#39;s

00:10:39.479 --> 00:10:45.739
Caption: wrong with the way function programming

00:10:41.609 --> 00:10:51.299
Caption: has been presented so far and why and

00:10:45.739 --> 00:10:56.309
Caption: and how can we change it right so so why

00:10:51.299 --> 00:11:02.269
Caption: why am I here well the reason I&#39;m here

00:10:56.309 --> 00:11:05.338
Caption: is because together with Gabriele Aquila

00:11:02.270 --> 00:11:07.020
Caption: we at the University of New South Wales

00:11:05.338 --> 00:11:11.059
Caption: we&#39;ve been teaching functional

00:11:07.020 --> 00:11:14.130
Caption: programming and Haskell to literally

00:11:11.059 --> 00:11:16.950
Caption: thousands of people that&#39;s from first

00:11:14.130 --> 00:11:18.570
Caption: year students up to postgraduate

00:11:16.950 --> 00:11:21.088
Caption: students people who are experienced

00:11:18.570 --> 00:11:26.609
Caption: developers and to master&#39;s degree or

00:11:21.088 --> 00:11:29.640
Caption: postgraduate degree so while doing that

00:11:26.609 --> 00:11:32.519
Caption: we&#39;ve put quite a lot of energy in

00:11:29.640 --> 00:11:34.350
Caption: figuring out how can we teach from the

00:11:32.520 --> 00:11:38.010
Caption: programming properly we&#39;ve done a lot of

00:11:34.349 --> 00:11:39.719
Caption: surveys to get feedback on what works

00:11:38.010 --> 00:11:46.739
Caption: what doesn&#39;t work what&#39;s the right

00:11:39.719 --> 00:11:50.639
Caption: approach and so on so we&#39;ve distilled a

00:11:46.739 --> 00:11:53.729
Caption: lot of what we learned into this thing

00:11:50.640 --> 00:11:56.220
Caption: which is an online a free online

00:11:53.729 --> 00:11:58.199
Caption: tutorial on Hezbollah so if you want to

00:11:56.219 --> 00:12:00.958
Caption: learn Hezbollah and you don&#39;t want to

00:11:58.200 --> 00:12:04.470
Caption: wait until the welcome to FPA

00:12:00.958 --> 00:12:05.519
Caption: for length of time or for Tony to issue

00:12:04.469 --> 00:12:08.338
Caption: in a few weeks

00:12:05.520 --> 00:12:12.780
Caption: well you can hop online and just get

00:12:08.338 --> 00:12:15.239
Caption: going and so this is it&#39;s a tutorial

00:12:12.780 --> 00:12:16.860
Caption: it&#39;s you don&#39;t have to have any previous

00:12:15.239 --> 00:12:19.799
Caption: knowledge of function programming it

00:12:16.859 --> 00:12:23.099
Caption: includes screencasts of life programming

00:12:19.799 --> 00:12:27.690
Caption: so you can see what happens and and so

00:12:23.099 --> 00:12:29.909
Caption: on so that&#39;s the background that&#39;s where

00:12:27.690 --> 00:12:31.859
Caption: I am coming from basically so I&#39;m not

00:12:29.909 --> 00:12:34.079
Caption: working at unist up here anymore but I

00:12:31.859 --> 00:12:39.369
Caption: did that for quite a while

00:12:34.080 --> 00:12:41.559
Caption: so let&#39;s return to our earlier story

00:12:39.369 --> 00:12:45.299
Caption: about this innovators early adopters

00:12:41.559 --> 00:12:47.289
Caption: early majority so I think one reason why

00:12:45.299 --> 00:12:53.320
Caption: functional programming is kind of

00:12:47.289 --> 00:12:55.359
Caption: mysterious is because the communication

00:12:53.320 --> 00:12:57.700
Caption: a lot of the communication has been

00:12:55.359 --> 00:13:01.000
Caption: between these groups the innovators and

00:12:57.700 --> 00:13:03.220
Caption: the early adopters and they tend to

00:13:01.000 --> 00:13:05.460
Caption: speak in their own language and if you

00:13:03.219 --> 00:13:08.109
Caption: just hop in the middle of it and you

00:13:05.460 --> 00:13:15.000
Caption: listen it just makes no sense whatsoever

00:13:08.109 --> 00:13:18.159
Caption: so why is that so there are few reasons

00:13:15.000 --> 00:13:20.830
Caption: so one reason which X is quite similar

00:13:18.159 --> 00:13:23.619
Caption: if you look at how programming

00:13:20.830 --> 00:13:28.000
Caption: programming languages are taught very

00:13:23.619 --> 00:13:30.250
Caption: often it&#39;s done in a very like language

00:13:28.000 --> 00:13:32.229
Caption: construct for language construct kind of

00:13:30.250 --> 00:13:35.200
Caption: way it&#39;s like today we are going to do

00:13:32.229 --> 00:13:39.489
Caption: while loops and next week we are going

00:13:35.200 --> 00:13:43.359
Caption: to do class definitions but that&#39;s wrong

00:13:39.489 --> 00:13:47.830
Caption: it kind of guided at the language what

00:13:43.359 --> 00:13:51.190
Caption: you really want to teach is the concepts

00:13:47.830 --> 00:13:54.730
Caption: it&#39;s like if you draw if you&#39;re supposed

00:13:51.190 --> 00:13:57.309
Caption: to learn to drive and today we are going

00:13:54.729 --> 00:13:59.979
Caption: to do the steering wheel and tomorrow

00:13:57.309 --> 00:14:04.330
Caption: we&#39;re going to do brakes what do you

00:13:59.979 --> 00:14:07.719
Caption: want to practice driving come on right

00:14:04.330 --> 00:14:10.000
Caption: so the individual bits they don&#39;t tell

00:14:07.719 --> 00:14:11.799
Caption: you that much and especially going by

00:14:10.000 --> 00:14:15.940
Caption: programming language constructs not very

00:14:11.799 --> 00:14:20.709
Caption: helpful so there&#39;s a nice paper by Phil

00:14:15.940 --> 00:14:24.039
Caption: Eisen findly flat and Krishnamurti who

00:14:20.710 --> 00:14:28.059
Caption: we were talking who did a lot of work at

00:14:24.039 --> 00:14:32.099
Caption: a few universities in the u.s. Rice

00:14:28.059 --> 00:14:34.409
Caption: University no North North Eastern

00:14:32.099 --> 00:14:37.209
Caption: opportunity teaching program teaching

00:14:34.409 --> 00:14:39.609
Caption: programming languages and

00:14:37.210 --> 00:14:42.429
Caption: and they make this point quite clearly

00:14:39.609 --> 00:14:44.529
Caption: if you&#39;re interested in teaching and

00:14:42.429 --> 00:14:49.479
Caption: learning programs interesting paper to

00:14:44.530 --> 00:14:53.410
Caption: read so that&#39;s number one number two a

00:14:49.479 --> 00:14:57.399
Caption: grave mistake which innovators like to

00:14:53.409 --> 00:14:59.979
Caption: do over and over again is look at the

00:14:57.400 --> 00:15:02.500
Caption: innovator that person has been there

00:14:59.979 --> 00:15:04.630
Caption: when the language was invented they

00:15:02.500 --> 00:15:06.309
Caption: solved all the problem to make 50

00:15:04.630 --> 00:15:08.919
Caption: mistakes until they got to the right

00:15:06.309 --> 00:15:11.109
Caption: solution now when they tell you about it

00:15:08.919 --> 00:15:13.239
Caption: they&#39;re very keen to tell you the whole

00:15:11.109 --> 00:15:16.659
Caption: story for them it&#39;s the whole thing

00:15:13.239 --> 00:15:19.149
Caption: right but you don&#39;t care you want to

00:15:16.659 --> 00:15:21.069
Caption: know what&#39;s the goal of the journey all

00:15:19.150 --> 00:15:25.090
Caption: right you don&#39;t want to know

00:15:21.070 --> 00:15:28.410
Caption: the historic way of getting there so in

00:15:25.090 --> 00:15:30.970
Caption: in the Haskell community as an example

00:15:28.409 --> 00:15:34.629
Caption: this is thing do you know category three

00:15:30.969 --> 00:15:37.989
Caption: who knows category theory it&#39;s a rather

00:15:34.630 --> 00:15:40.059
Caption: abstract branch of mathematics so I&#39;m

00:15:37.989 --> 00:15:44.619
Caption: not surprised that you don&#39;t know about

00:15:40.059 --> 00:15:48.029
Caption: it but there&#39;s an Italian mathematician

00:15:44.619 --> 00:15:52.330
Caption: see slash theoretical computer scientist

00:15:48.030 --> 00:15:55.060
Caption: his name&#39;s Eugene yomogi he&#39;s very smart

00:15:52.330 --> 00:15:58.929
Caption: person he understands category theory in

00:15:55.059 --> 00:16:02.590
Caption: contrast to me and he figured out a way

00:15:58.929 --> 00:16:07.119
Caption: to use that abstract mathematical those

00:16:02.590 --> 00:16:11.830
Caption: concepts to still quite mathematical

00:16:07.119 --> 00:16:13.719
Caption: kind of formalize the semantics of all

00:16:11.830 --> 00:16:15.640
Caption: kinds of programming languages not just

00:16:13.719 --> 00:16:17.169
Caption: fun to program imperative programming

00:16:15.640 --> 00:16:20.590
Caption: object-oriented program and so on was

00:16:17.169 --> 00:16:22.209
Caption: really breakthrough really significant

00:16:20.590 --> 00:16:24.460
Caption: work in the area of semantics of

00:16:22.210 --> 00:16:28.270
Caption: programming languages and then there was

00:16:24.460 --> 00:16:30.820
Caption: another second very smart scientist

00:16:28.270 --> 00:16:32.920
Caption: brilliant scientist Phil Wadler some of

00:16:30.820 --> 00:16:36.190
Caption: you may have heard of him he took those

00:16:32.919 --> 00:16:38.500
Caption: ideas from mokey and he forgot Wow

00:16:36.190 --> 00:16:40.630
Caption: you can&#39;t just mortal the semantics of

00:16:38.500 --> 00:16:42.909
Caption: programming languages you can use these

00:16:40.630 --> 00:16:44.919
Caption: ideas to structure functional programs

00:16:42.909 --> 00:16:47.269
Caption: and since then people have figured out

00:16:44.919 --> 00:16:50.419
Caption: how to structure C++

00:16:47.270 --> 00:16:53.570
Caption: and I mean it&#39;s not actually constrained

00:16:50.419 --> 00:16:56.109
Caption: 200 programming how to a very clear

00:16:53.570 --> 00:17:02.479
Caption: principle for structuring programs

00:16:56.109 --> 00:17:04.130
Caption: software and you may have heard these

00:17:02.479 --> 00:17:08.719
Caption: kind of thing

00:17:04.130 --> 00:17:13.520
Caption: monads one of the scary words in FP land

00:17:08.719 --> 00:17:14.719
Caption: right so when people are asked can you

00:17:13.520 --> 00:17:18.890
Caption: explain mana to me

00:17:14.719 --> 00:17:21.799
Caption: then thereof well Monat is a term

00:17:18.890 --> 00:17:25.790
Caption: from category theory at that point

00:17:21.800 --> 00:17:28.010
Caption: everybody runs away because who knows

00:17:25.790 --> 00:17:32.359
Caption: category theory we had one person in the

00:17:28.010 --> 00:17:36.558
Caption: room okay and that&#39;s this kind of half

00:17:32.359 --> 00:17:41.660
Caption: joke half truth in Haskell and it&#39;s kind

00:17:36.558 --> 00:17:45.349
Caption: of to kind of put make that point is

00:17:41.660 --> 00:17:47.090
Caption: well a mana is just mono it in the

00:17:45.349 --> 00:17:49.939
Caption: category of in the funk test what else

00:17:47.089 --> 00:17:54.109
Caption: do you need to know it&#39;s not very

00:17:49.939 --> 00:17:56.449
Caption: helpful right but the problem is exactly

00:17:54.109 --> 00:17:59.599
Caption: these explaining things in historical

00:17:56.449 --> 00:18:02.479
Caption: well well the concept of a mana in front

00:17:59.599 --> 00:18:04.189
Caption: of programming originates over a few

00:18:02.479 --> 00:18:06.589
Caption: steps from category theory

00:18:04.189 --> 00:18:08.329
Caption: so people who know about this they come

00:18:06.589 --> 00:18:10.909
Caption: oh well we have to stand at the

00:18:08.329 --> 00:18:12.649
Caption: beginning but really most people don&#39;t

00:18:10.910 --> 00:18:14.450
Caption: know want to know about that they just

00:18:12.650 --> 00:18:17.690
Caption: want to know how can i structure my

00:18:14.449 --> 00:18:19.639
Caption: program so you have to explain things in

00:18:17.689 --> 00:18:21.439
Caption: terms which are accessible to the

00:18:19.640 --> 00:18:24.678
Caption: student right which stand on their own

00:18:21.439 --> 00:18:28.399
Caption: without the historical explanation let&#39;s

00:18:24.678 --> 00:18:30.109
Caption: I think one of the biggest obstacles we

00:18:28.400 --> 00:18:32.359
Caption: are one of the biggest problems which

00:18:30.109 --> 00:18:34.010
Caption: makes a lot of the existing writing on

00:18:32.359 --> 00:18:35.599
Caption: function programming inaccessible

00:18:34.010 --> 00:18:37.780
Caption: because it takes this historical

00:18:35.599 --> 00:18:39.439
Caption: approach all right so that&#39;s the

00:18:37.780 --> 00:18:44.000
Caption: innovators

00:18:39.439 --> 00:18:46.519
Caption: how about the early adopters so early

00:18:44.000 --> 00:18:49.060
Caption: adopters I mean they&#39;re further removed

00:18:46.520 --> 00:18:52.010
Caption: from the innovation but they still

00:18:49.060 --> 00:18:54.680
Caption: because they&#39;re happy to invest quite a

00:18:52.010 --> 00:18:56.780
Caption: lot to learn something new they&#39;re happy

00:18:54.680 --> 00:18:59.990
Caption: to go to these abstract levels to read

00:18:56.780 --> 00:19:01.969
Caption: about maybe we category theory something

00:18:59.989 --> 00:19:05.479
Caption: like that and and understand things

00:19:01.969 --> 00:19:08.359
Caption: things from there but that doesn&#39;t work

00:19:05.479 --> 00:19:11.119
Caption: in general so they have a hard time

00:19:08.359 --> 00:19:14.059
Caption: communicating very often to for example

00:19:11.119 --> 00:19:17.329
Caption: their team why why is it useful how does

00:19:14.060 --> 00:19:21.470
Caption: it work because the explanations has

00:19:17.329 --> 00:19:23.510
Caption: comes comes from the abstract instead of

00:19:21.469 --> 00:19:27.520
Caption: from the concrete what you really have

00:19:23.510 --> 00:19:32.449
Caption: to do is you have to lead with examples

00:19:27.520 --> 00:19:34.969
Caption: so for example coming into the room

00:19:32.449 --> 00:19:37.250
Caption: saying well today I&#39;m going to explain

00:19:34.969 --> 00:19:39.799
Caption: to you what parametric polymorphism is

00:19:37.250 --> 00:19:41.660
Caption: it&#39;s not very helpful because you have

00:19:39.800 --> 00:19:45.440
Caption: no idea what parametric polymorphism is

00:19:41.660 --> 00:19:48.229
Caption: so why would you even care it&#39;s the

00:19:45.439 --> 00:19:53.809
Caption: wrong starting point what you have to do

00:19:48.229 --> 00:19:56.510
Caption: you have to start explaining why by way

00:19:53.810 --> 00:19:58.940
Caption: of some examples so for example you

00:19:56.510 --> 00:20:02.050
Caption: could have in your favorite programming

00:19:58.939 --> 00:20:04.309
Caption: language a few different examples of

00:20:02.050 --> 00:20:06.950
Caption: functions computing the length of list

00:20:04.310 --> 00:20:09.580
Caption: for the list of different element types

00:20:06.949 --> 00:20:13.309
Caption: and go like look at that code looks

00:20:09.579 --> 00:20:16.729
Caption: pretty similar right why do I have to

00:20:13.310 --> 00:20:19.010
Caption: retype that so that gets you to a

00:20:16.729 --> 00:20:21.260
Caption: problem statement you go like how do you

00:20:19.010 --> 00:20:23.449
Caption: reuse that code can&#39;t be kind of write

00:20:21.260 --> 00:20:25.520
Caption: less code because seems like it&#39;s all

00:20:23.449 --> 00:20:28.939
Caption: doing the same thing that seems super

00:20:25.520 --> 00:20:32.810
Caption: superfluous now from there you can

00:20:28.939 --> 00:20:35.259
Caption: introduce a generic function and then

00:20:32.810 --> 00:20:38.500
Caption: you do that a few more times and then

00:20:35.260 --> 00:20:41.930
Caption: you can come to the plural concept

00:20:38.500 --> 00:20:45.969
Caption: parametric polymorphism or sometimes

00:20:41.930 --> 00:20:48.470
Caption: mistake link called generics

00:20:45.969 --> 00:20:51.018
Caption: generics trust to general cleaner ex

00:20:48.469 --> 00:20:54.199
Caption: means everything it has too many

00:20:51.019 --> 00:20:57.619
Caption: meanings I mean anyway that&#39;s not my

00:20:54.199 --> 00:20:59.388
Caption: point my point is we need to go from the

00:20:57.619 --> 00:21:03.439
Caption: concrete to the abstract not the other

00:20:59.389 --> 00:21:05.899
Caption: way around so in particular that answers

00:21:03.439 --> 00:21:09.768
Caption: the question like do you have to be a

00:21:05.899 --> 00:21:13.940
Caption: math superhero a math Wiz to understand

00:21:09.769 --> 00:21:17.179
Caption: function programming no function

00:21:13.939 --> 00:21:19.758
Caption: math can&#39;t be the starting point in the

00:21:17.178 --> 00:21:24.758
Caption: same way as category theory can&#39;t be the

00:21:19.759 --> 00:21:24.759
Caption: starting point for structuring programs

00:21:25.329 --> 00:21:33.859
Caption: but I think when everything is said and

00:21:30.979 --> 00:21:36.168
Caption: done maybe in 10 years we can settle

00:21:33.859 --> 00:21:38.239
Caption: this question I think the biggest

00:21:36.168 --> 00:21:40.489
Caption: contribution of control programming to

00:21:38.239 --> 00:21:42.499
Caption: programming will have been that it has

00:21:40.489 --> 00:21:46.729
Caption: brought math and software development

00:21:42.499 --> 00:21:48.919
Caption: further together but for that it can&#39;t

00:21:46.729 --> 00:21:52.009
Caption: be the case we can&#39;t require everybody

00:21:48.918 --> 00:21:53.148
Caption: to be a mathematician and then start to

00:21:52.009 --> 00:21:57.379
Caption: apply this to software engineering

00:21:53.149 --> 00:22:00.820
Caption: that&#39;s that makes no sense whatsoever if

00:21:57.379 --> 00:22:04.159
Caption: what I am saying is correct then through

00:22:00.819 --> 00:22:06.829
Caption: development software development program

00:22:04.159 --> 00:22:10.279
Caption: development we have to see structures

00:22:06.829 --> 00:22:11.959
Caption: which then we can live to a level where

00:22:10.279 --> 00:22:15.470
Caption: we can talk about them in a more

00:22:11.959 --> 00:22:17.658
Caption: abstract way and that&#39;s actually good

00:22:15.469 --> 00:22:19.579
Caption: evidence for that who knows about this

00:22:17.659 --> 00:22:24.139
Caption: bootstrap program and I don&#39;t mean the

00:22:19.579 --> 00:22:26.329
Caption: web framework so this is a program which

00:22:24.139 --> 00:22:28.369
Caption: actually came out of these courses of

00:22:26.329 --> 00:22:30.709
Caption: these people I mentioned earlier filets

00:22:28.369 --> 00:22:34.249
Caption: net hour who wrote this paper business

00:22:30.709 --> 00:22:37.908
Caption: paper about teaching and from the course

00:22:34.249 --> 00:22:39.739
Caption: they because design they developed a few

00:22:37.909 --> 00:22:43.119
Caption: universities got together and they said

00:22:39.739 --> 00:22:47.719
Caption: well if this is if this holds water

00:22:43.119 --> 00:22:49.469
Caption: cleanly then shouldn&#39;t it be possible to

00:22:47.719 --> 00:22:52.359
Caption: get kids

00:22:49.469 --> 00:22:55.869
Caption: interested in writing exciting software

00:22:52.359 --> 00:22:57.359
Caption: and teach the math that way and so what

00:22:55.869 --> 00:23:01.689
Caption: they did they develop this curriculum

00:22:57.359 --> 00:23:05.949
Caption: for children between grade six to grade

00:23:01.689 --> 00:23:08.409
Caption: 12 and they win especially to schools in

00:23:05.949 --> 00:23:10.859
Caption: lower social economic regions where

00:23:08.410 --> 00:23:15.989
Caption: usually stem teaching is quite difficult

00:23:10.859 --> 00:23:19.859
Caption: and and they taught them cutting and

00:23:15.989 --> 00:23:22.929
Caption: fronting language called racket and they

00:23:19.859 --> 00:23:26.339
Caption: they did all kinds of things but they

00:23:22.930 --> 00:23:29.230
Caption: kind of did a very principled approach

00:23:26.339 --> 00:23:32.469
Caption: driving through to its algebraic

00:23:29.229 --> 00:23:36.309
Caption: principles and lo and behold not only

00:23:32.469 --> 00:23:40.719
Caption: did those kids learn coding the algebras

00:23:36.310 --> 00:23:42.030
Caption: course suddenly wind up in quite a few

00:23:40.719 --> 00:23:45.189
Caption: schools by now

00:23:42.030 --> 00:23:48.520
Caption: this quite a big program you can read up

00:23:45.189 --> 00:23:50.769
Caption: about it on that web page and so they

00:23:48.520 --> 00:23:54.099
Caption: get a lot of evidence that this actually

00:23:50.770 --> 00:23:57.820
Caption: works it works at the at the middle and

00:23:54.099 --> 00:24:00.510
Caption: high school level okay so why it

00:23:57.819 --> 00:24:04.329
Caption: shouldn&#39;t work fast

00:24:00.510 --> 00:24:07.180
Caption: all right but then there&#39;s always this

00:24:04.329 --> 00:24:10.779
Caption: question what about all these fancy

00:24:07.180 --> 00:24:12.700
Caption: words I said to already like parametric

00:24:10.780 --> 00:24:16.050
Caption: polymorphism come on can&#39;t you call it

00:24:12.699 --> 00:24:16.049
Caption: generics like everybody else

00:24:16.709 --> 00:24:24.939
Caption: so this terminology I think is not just

00:24:21.930 --> 00:24:27.070
Caption: it&#39;s here to stay why well let me give

00:24:24.939 --> 00:24:31.959
Caption: you example do you know what&#39;s common to

00:24:27.069 --> 00:24:36.069
Caption: all these words terms

00:24:31.959 --> 00:24:43.038
Caption: somebody knows yeah they&#39;ve been

00:24:36.069 --> 00:24:46.459
Caption: proposed as alternatives for a Monat now

00:24:43.038 --> 00:24:48.408
Caption: now that I&#39;ve told you those other words

00:24:46.459 --> 00:24:49.750
Caption: do you have a better understanding of

00:24:48.409 --> 00:24:53.480
Caption: what amenities

00:24:49.750 --> 00:24:57.019
Caption: so really the name wasn&#39;t the problem

00:24:53.479 --> 00:25:01.158
Caption: was it and that&#39;s actually I think it&#39;s

00:24:57.019 --> 00:25:08.029
Caption: wrong to try to reinvent all the names

00:25:01.159 --> 00:25:09.590
Caption: change all the terminology why okay we

00:25:08.029 --> 00:25:13.429
Caption: have to learn these new words and some

00:25:09.589 --> 00:25:15.768
Caption: of them may be bit weird but first of

00:25:13.428 --> 00:25:19.069
Caption: all that&#39;s the case for any programming

00:25:15.769 --> 00:25:21.080
Caption: language right do you know what a

00:25:19.069 --> 00:25:23.148
Caption: protect I have to read it off because I

00:25:21.079 --> 00:25:25.099
Caption: can never remember it what a protected

00:25:23.149 --> 00:25:27.739
Caption: abstract virtual based pure virtual

00:25:25.099 --> 00:25:33.038
Caption: private destructor is and if not do you

00:25:27.739 --> 00:25:38.028
Caption: program C++ and you don&#39;t know come on

00:25:33.038 --> 00:25:40.668
Caption: so every I mean every technically domain

00:25:38.029 --> 00:25:44.000
Caption: has its terminology that&#39;s just normal

00:25:40.668 --> 00:25:48.408
Caption: and when you learn that domain you learn

00:25:44.000 --> 00:25:49.969
Caption: the terminology goes hand-in-hand and if

00:25:48.409 --> 00:25:52.669
Caption: it&#39;s has changed all the terminology

00:25:49.969 --> 00:25:56.808
Caption: around we to people who learn this stuff

00:25:52.668 --> 00:25:59.268
Caption: really a disservice why because the

00:25:56.808 --> 00:26:03.500
Caption: learner should be able to credit to

00:25:59.269 --> 00:26:05.600
Caption: become an expert right and if you use

00:26:03.500 --> 00:26:08.389
Caption: different terminology then at the end of

00:26:05.599 --> 00:26:10.959
Caption: the day you may know everything but you

00:26:08.389 --> 00:26:13.879
Caption: don&#39;t know how to talk to somebody else

00:26:10.959 --> 00:26:15.798
Caption: who&#39;s already being expert to you don&#39;t

00:26:13.879 --> 00:26:17.840
Caption: know how to read a research paper or any

00:26:15.798 --> 00:26:19.638
Caption: of the more advanced material because it

00:26:17.839 --> 00:26:23.388
Caption: uses all different terminology that

00:26:19.639 --> 00:26:25.700
Caption: makes no sense so I think let&#39;s just

00:26:23.389 --> 00:26:29.000
Caption: learn that Hammond initially on the way

00:26:25.699 --> 00:26:32.439
Caption: by learning the concepts because the

00:26:29.000 --> 00:26:35.510
Caption: terminology is not the problem

00:26:32.439 --> 00:26:38.298
Caption: all right so I said a lot of things

00:26:35.510 --> 00:26:39.920
Caption: about what we shouldn&#39;t do or how we

00:26:38.298 --> 00:26:42.709
Caption: shouldn&#39;t present functional programming

00:26:39.920 --> 00:26:45.049
Caption: general program development so let&#39;s I

00:26:42.709 --> 00:26:48.020
Caption: also want to make four positive points

00:26:45.048 --> 00:26:49.909
Caption: okay four things so we already talked

00:26:48.020 --> 00:26:52.459
Caption: about the examples but I want to

00:26:49.910 --> 00:26:55.670
Caption: demonstrate how we can use examples to

00:26:52.459 --> 00:26:59.058
Caption: teach abstract concepts and it&#39;s really

00:26:55.670 --> 00:27:02.179
Caption: important to give guidance especially in

00:26:59.058 --> 00:27:03.260
Caption: functional programming so the one of the

00:27:02.178 --> 00:27:04.760
Caption: killer features of functional

00:27:03.260 --> 00:27:09.500
Caption: programming is that very easy to build

00:27:04.760 --> 00:27:11.928
Caption: abstractions but that also means it it

00:27:09.500 --> 00:27:16.040
Caption: can be a bit intimidating in the

00:27:11.928 --> 00:27:18.890
Caption: beginning to know how to do this and you

00:27:16.040 --> 00:27:20.750
Caption: need some unique kind of patterns of how

00:27:18.890 --> 00:27:24.589
Caption: to do that you can&#39;t just do it freeform

00:27:20.750 --> 00:27:26.689
Caption: in the beginning and then we can with

00:27:24.589 --> 00:27:28.760
Caption: development tools we can help by having

00:27:26.689 --> 00:27:30.769
Caption: tight feedback loops and we can use

00:27:28.760 --> 00:27:32.449
Caption: visualizations especially in functional

00:27:30.770 --> 00:27:35.450
Caption: programming when you don&#39;t have side

00:27:32.449 --> 00:27:37.010
Caption: effects visualizations convey really

00:27:35.449 --> 00:27:39.739
Caption: good intuition so I want to show you

00:27:37.010 --> 00:27:44.419
Caption: examples of that so let&#39;s start with the

00:27:39.739 --> 00:27:46.729
Caption: examples typically when you teach

00:27:44.418 --> 00:27:51.409
Caption: functional programming the first concept

00:27:46.729 --> 00:27:53.119
Caption: which causes trouble is recursion that&#39;s

00:27:51.410 --> 00:27:56.919
Caption: the case for people who haven&#39;t

00:27:53.119 --> 00:28:00.079
Caption: programmed before but it&#39;s also the case

00:27:56.918 --> 00:28:03.558
Caption: for people like you who are experienced

00:28:00.079 --> 00:28:05.569
Caption: developers in fact so in our experience

00:28:03.558 --> 00:28:07.880
Caption: when you&#39;ve been teaching functional

00:28:05.569 --> 00:28:09.918
Caption: programming to first-year students the

00:28:07.880 --> 00:28:11.660
Caption: students without programming experience

00:28:09.918 --> 00:28:13.459
Caption: they usually didn&#39;t have a hard time

00:28:11.660 --> 00:28:15.859
Caption: understanding haskell is the people who

00:28:13.459 --> 00:28:19.130
Caption: already did little basic who had a

00:28:15.859 --> 00:28:22.489
Caption: problem that&#39;s interesting but i&#39;m

00:28:19.130 --> 00:28:27.890
Caption: discretion so let&#39;s look at recursion

00:28:22.489 --> 00:28:30.829
Caption: a typical kind of way wrong way of

00:28:27.890 --> 00:28:33.979
Caption: explaining recursion kind of doing the

00:28:30.829 --> 00:28:37.069
Caption: well let&#39;s start with the masse kind of

00:28:33.979 --> 00:28:39.290
Caption: bit is the following because it will

00:28:37.069 --> 00:28:44.329
Caption: it&#39;s super powerful but also really

00:28:39.290 --> 00:28:49.040
Caption: simple this definition in comprehensible

00:28:44.329 --> 00:28:51.529
Caption: Haskell code is helpless the everything

00:28:49.040 --> 00:28:53.330
Caption: about recursion that is to say at least

00:28:51.530 --> 00:28:55.609
Caption: wrong mathematical point of view it&#39;s so

00:28:53.329 --> 00:28:59.709
Caption: simple is it looks awesome

00:28:55.609 --> 00:29:05.540
Caption: it&#39;s also totally confusing and useless

00:28:59.709 --> 00:29:07.760
Caption: all at once it doesn&#39;t tell us how

00:29:05.540 --> 00:29:10.190
Caption: recursion works it can doesn&#39;t tell us

00:29:07.760 --> 00:29:12.469
Caption: how we can use it how we can solve a

00:29:10.189 --> 00:29:15.189
Caption: problem and why we would even bother in

00:29:12.469 --> 00:29:18.020
Caption: the first place so what&#39;s a better way

00:29:15.189 --> 00:29:20.329
Caption: let&#39;s take a simple example let&#39;s

00:29:18.020 --> 00:29:24.558
Caption: suppose we want to write a function not

00:29:20.329 --> 00:29:29.260
Caption: sum which adds all the numbers from n

00:29:24.558 --> 00:29:32.149
Caption: down to zero in Haskell super easy

00:29:29.260 --> 00:29:34.190
Caption: because we can just write this this is a

00:29:32.150 --> 00:29:35.869
Caption: valid Haskell program well not the dot

00:29:34.189 --> 00:29:38.808
Caption: dots but you can just write more lines

00:29:35.869 --> 00:29:40.969
Caption: okay I leave it to your imagination the

00:29:38.808 --> 00:29:47.029
Caption: interface for every number what you have

00:29:40.969 --> 00:29:51.739
Caption: to add up but we can we can build on

00:29:47.030 --> 00:29:55.369
Caption: that okay we can notice that actually

00:29:51.739 --> 00:29:58.729
Caption: for every line the liner path is

00:29:55.369 --> 00:30:04.089
Caption: included in line below so we can reuse

00:29:58.729 --> 00:30:06.859
Caption: the liner path okay that&#39;s more compact

00:30:04.089 --> 00:30:08.449
Caption: so then the next thing we notice all the

00:30:06.859 --> 00:30:10.459
Caption: lines except the first one they&#39;re

00:30:08.449 --> 00:30:14.329
Caption: basically the same except for the number

00:30:10.459 --> 00:30:16.819
Caption: I mean you experienced developers so if

00:30:14.329 --> 00:30:19.609
Caption: something is the same except for one

00:30:16.819 --> 00:30:21.819
Caption: thing which varies in the same way we

00:30:19.609 --> 00:30:21.819
Caption: use

00:30:23.369 --> 00:30:32.609
Caption: variable right and then we are left with

00:30:28.709 --> 00:30:34.589
Caption: two equations and that in fact is the

00:30:32.609 --> 00:30:37.798
Caption: recursive Haskell program to do the

00:30:34.589 --> 00:30:40.018
Caption: computation we set out to do so this is

00:30:37.798 --> 00:30:42.178
Caption: constructive way to actually get to that

00:30:40.019 --> 00:30:45.149
Caption: recursive program now I know this is a

00:30:42.178 --> 00:30:46.619
Caption: super simple example but I on purpose I

00:30:45.149 --> 00:30:50.249
Caption: want to make it super simple because I

00:30:46.619 --> 00:30:52.908
Caption: don&#39;t want to this track from the point

00:30:50.249 --> 00:30:55.289
Caption: with the complexity of the example right

00:30:52.909 --> 00:30:57.029
Caption: this is how you can write recursive

00:30:55.288 --> 00:30:58.618
Caption: functions in Haskell also more

00:30:57.029 --> 00:31:03.690
Caption: complicated recursive function in high

00:30:58.619 --> 00:31:06.539
Caption: school and even more if we want to know

00:31:03.689 --> 00:31:10.229
Caption: how this definition works we can just

00:31:06.538 --> 00:31:11.998
Caption: write it out we take and concrete

00:31:10.229 --> 00:31:14.459
Caption: argument and then we substitute

00:31:11.999 --> 00:31:18.659
Caption: left-hand sides for right-hand sides and

00:31:14.459 --> 00:31:21.689
Caption: we do that until we can&#39;t do it anymore

00:31:18.659 --> 00:31:24.210
Caption: which is when we have to hit the base

00:31:21.689 --> 00:31:28.288
Caption: case and then we can add it all up and

00:31:24.209 --> 00:31:29.969
Caption: this is not just kind of like this is

00:31:28.288 --> 00:31:32.459
Caption: really it written out on paper this is

00:31:29.969 --> 00:31:34.589
Caption: exactly the semantics of that Haskell

00:31:32.459 --> 00:31:37.678
Caption: program this is exactly what your

00:31:34.589 --> 00:31:41.268
Caption: computer does when it runs it this is

00:31:37.678 --> 00:31:41.268
Caption: the semantics of the program

00:31:42.930 --> 00:31:51.520
Caption: so so this illustrates a concept it

00:31:48.219 --> 00:31:56.979
Caption: illustrates the concept of recursion and

00:31:51.520 --> 00:31:58.750
Caption: it gives us an idea for how we how we

00:31:56.979 --> 00:32:00.219
Caption: can get to a recursive definition in the

00:31:58.750 --> 00:32:03.400
Caption: first place and yes

00:32:00.219 --> 00:32:05.559
Caption: super simple example but this doesn&#39;t

00:32:03.400 --> 00:32:08.050
Caption: just work for recursion it works for

00:32:05.560 --> 00:32:10.350
Caption: more complicated forms of recursion it

00:32:08.050 --> 00:32:14.350
Caption: also works for high order functions

00:32:10.349 --> 00:32:16.839
Caption: parametric polymorphism type classes

00:32:14.349 --> 00:32:21.910
Caption: even for categorical structures stuff

00:32:16.839 --> 00:32:24.640
Caption: like monads so this approach scales to

00:32:21.910 --> 00:32:28.420
Caption: all kinds of abstractions it&#39;s basically

00:32:24.640 --> 00:32:30.219
Caption: a way of introducing abstractions in a

00:32:28.420 --> 00:32:33.220
Caption: constructive manner in a manner where

00:32:30.219 --> 00:32:35.169
Caption: you see what happens as opposed by

00:32:33.219 --> 00:32:39.459
Caption: giving you definition and letting you

00:32:35.170 --> 00:32:42.580
Caption: figure out the rest by itself all right

00:32:39.459 --> 00:32:45.339
Caption: that&#39;s example so how about this design

00:32:42.579 --> 00:32:48.250
Caption: patterns when I say design patterns I

00:32:45.339 --> 00:32:49.839
Caption: don&#39;t mean exactly what you would

00:32:48.250 --> 00:32:51.339
Caption: recognize as design patterns in

00:32:49.839 --> 00:32:54.849
Caption: object-oriented programming although

00:32:51.339 --> 00:32:57.189
Caption: there are some similarity what I mean is

00:32:54.849 --> 00:32:59.589
Caption: that for example with recursion let&#39;s

00:32:57.189 --> 00:33:02.409
Caption: stick with recursion there recursion is

00:32:59.589 --> 00:33:05.049
Caption: on one hand so simple and the other hand

00:33:02.410 --> 00:33:07.030
Caption: subchannel they&#39;re given a problem there

00:33:05.050 --> 00:33:09.250
Caption: are so many ways in which you could

00:33:07.030 --> 00:33:11.739
Caption: write a recursive function that when

00:33:09.250 --> 00:33:13.689
Caption: you&#39;re not used to it it&#39;s you don&#39;t

00:33:11.739 --> 00:33:16.540
Caption: even know where to start and in fact

00:33:13.689 --> 00:33:20.289
Caption: even if I mean for you people who are

00:33:16.540 --> 00:33:23.290
Caption: all experienced developers recursion has

00:33:20.290 --> 00:33:25.930
Caption: still still an obstacle because in other

00:33:23.290 --> 00:33:28.000
Caption: programming languages you may be use

00:33:25.930 --> 00:33:30.130
Caption: recursion when you traverse a tree or

00:33:28.000 --> 00:33:33.359
Caption: something once in a while but usually

00:33:30.130 --> 00:33:36.339
Caption: try to use a loop or some other way but

00:33:33.359 --> 00:33:38.229
Caption: in Haskell for example in most

00:33:36.339 --> 00:33:40.959
Caption: functional programming a recurrence like

00:33:38.229 --> 00:33:46.030
Caption: the Hema use for almost everything right

00:33:40.959 --> 00:33:49.419
Caption: so the recursive definitions are quite a

00:33:46.030 --> 00:33:51.099
Caption: bit more sophisticated so it&#39;s important

00:33:49.420 --> 00:33:52.519
Caption: to give some guidelines like what are

00:33:51.099 --> 00:33:54.379
Caption: the different types

00:33:52.519 --> 00:33:59.029
Caption: recursion because they&#39;re actually not

00:33:54.379 --> 00:34:00.649
Caption: that many so how can we get at that well

00:33:59.029 --> 00:34:02.659
Caption: we can have one recursive function so

00:34:00.649 --> 00:34:09.049
Caption: these functions again a haskell function

00:34:02.659 --> 00:34:12.229
Caption: takes a list and it applies X times X to

00:34:09.049 --> 00:34:14.899
Caption: every list element X so it squares all

00:34:12.229 --> 00:34:17.088
Caption: elements in the list now we can have a

00:34:14.898 --> 00:34:19.969
Caption: second recursive function looks quite

00:34:17.089 --> 00:34:21.470
Caption: similar but it applies this to upper

00:34:19.969 --> 00:34:24.469
Caption: function which takes a character and

00:34:21.469 --> 00:34:27.648
Caption: turns it in uppercase character to every

00:34:24.469 --> 00:34:29.628
Caption: element in the list now if you look at

00:34:27.648 --> 00:34:32.178
Caption: these two definitions they are actually

00:34:29.628 --> 00:34:36.408
Caption: except for the identifier the names

00:34:32.178 --> 00:34:39.828
Caption: they&#39;re basically same so we can make a

00:34:36.408 --> 00:34:42.678
Caption: more general like a pattern where

00:34:39.829 --> 00:34:45.440
Caption: whenever we want to do something for

00:34:42.678 --> 00:34:47.750
Caption: every element in a list or other data

00:34:45.439 --> 00:34:49.969
Caption: structure we can just use this type of

00:34:47.750 --> 00:34:51.648
Caption: function and trust very about writing

00:34:49.969 --> 00:34:53.898
Caption: the orange bit and not everything else

00:34:51.648 --> 00:34:55.699
Caption: that&#39;s important because if you have a

00:34:53.898 --> 00:34:57.919
Caption: programming problem and you you know you

00:34:55.699 --> 00:35:00.979
Caption: have this empty screen on your editor

00:34:57.919 --> 00:35:04.939
Caption: and the cursors can&#39;t be this is the

00:35:00.979 --> 00:35:06.949
Caption: worst bit right how to get started if

00:35:04.939 --> 00:35:09.020
Caption: you already know you can use this

00:35:06.949 --> 00:35:12.739
Caption: pattern you only have to fill in the

00:35:09.020 --> 00:35:17.989
Caption: orange bit that&#39;s much more reassuring

00:35:12.739 --> 00:35:21.260
Caption: at least there&#39;s some code and again you

00:35:17.989 --> 00:35:22.819
Caption: may say well this is just a experience

00:35:21.260 --> 00:35:24.260
Caption: function programmer now goes like this

00:35:22.819 --> 00:35:26.299
Caption: is just the map function what are you

00:35:24.260 --> 00:35:27.679
Caption: talking about yeah it&#39;s just the map

00:35:26.299 --> 00:35:29.000
Caption: function but map function is more

00:35:27.679 --> 00:35:32.000
Caption: complicated requires higher-order

00:35:29.000 --> 00:35:34.760
Caption: functions and so on so before you even

00:35:32.000 --> 00:35:37.819
Caption: get there it&#39;s important to give people

00:35:34.760 --> 00:35:40.909
Caption: these structures and not just for map of

00:35:37.819 --> 00:35:42.710
Caption: course there are all kinds of recursive

00:35:40.909 --> 00:35:45.318
Caption: idioms and it&#39;s important to present

00:35:42.709 --> 00:35:46.909
Caption: them or categorize them and say in these

00:35:45.319 --> 00:35:48.710
Caption: different situations use this type of

00:35:46.909 --> 00:35:52.669
Caption: recursion this type of recursion this

00:35:48.709 --> 00:35:54.529
Caption: type of recursion and you cover 95% of

00:35:52.669 --> 00:35:58.629
Caption: oil recursive programming problems this

00:35:54.529 --> 00:36:02.630
Caption: way it&#39;s much easier to get started

00:35:58.629 --> 00:36:08.839
Caption: okay so not just this is what you can do

00:36:02.629 --> 00:36:10.939
Caption: but how do you get there alright so that

00:36:08.840 --> 00:36:13.040
Caption: was the first two what about this tight

00:36:10.939 --> 00:36:14.449
Caption: feedback loop so now one invention of

00:36:13.040 --> 00:36:17.479
Caption: functional programming right from the

00:36:14.449 --> 00:36:19.489
Caption: beginning with this was rattles with

00:36:17.479 --> 00:36:20.959
Caption: eval print loop you you have like a

00:36:19.489 --> 00:36:22.459
Caption: command trial where you can type

00:36:20.959 --> 00:36:25.459
Caption: expressions of your programming language

00:36:22.459 --> 00:36:29.810
Caption: and it gives you answers now we can do

00:36:25.459 --> 00:36:31.820
Caption: even better and we can give continuous

00:36:29.810 --> 00:36:34.610
Caption: feedback while you write your program

00:36:31.820 --> 00:36:37.479
Caption: and that&#39;s super helpful so this is just

00:36:34.610 --> 00:36:39.530
Caption: part of a screencast from this tutorial

00:36:37.479 --> 00:36:44.570
Caption: online tutorial which I mentioned

00:36:39.530 --> 00:36:47.659
Caption: earlier so it&#39;s same example okay but

00:36:44.570 --> 00:36:49.250
Caption: the important thing is is not the

00:36:47.659 --> 00:36:50.959
Caption: definition which you know by now I mean

00:36:49.250 --> 00:36:55.610
Caption: you&#39;re experts at recursion Haskell by

00:36:50.959 --> 00:36:58.520
Caption: now I hope but that we can run it right

00:36:55.610 --> 00:37:05.390
Caption: away so there&#39;s just going to be one

00:36:58.520 --> 00:37:06.199
Caption: more case but not only that we can run

00:37:05.389 --> 00:37:09.679
Caption: it right away

00:37:06.199 --> 00:37:11.780
Caption: so we call nuts um on these different

00:37:09.679 --> 00:37:15.739
Caption: arguments and that works just fine

00:37:11.780 --> 00:37:17.300
Caption: because we covered those cases but 50

00:37:15.739 --> 00:37:20.209
Caption: doesn&#39;t quite work because we haven&#39;t

00:37:17.300 --> 00:37:23.330
Caption: gotten case for 50 all right good so now

00:37:20.209 --> 00:37:26.109
Caption: we notice what I said before that we can

00:37:23.330 --> 00:37:29.900
Caption: reuse the definition of the line above

00:37:26.110 --> 00:37:34.430
Caption: so we can just rewrite these equations

00:37:29.899 --> 00:37:37.520
Caption: and then we would expect I mean if I&#39;m

00:37:34.429 --> 00:37:40.520
Caption: right and this right way to go about

00:37:37.520 --> 00:37:43.000
Caption: writing these functions then the result

00:37:40.520 --> 00:37:45.500
Caption: students Ames I mean it&#39;s not a proof

00:37:43.000 --> 00:37:47.479
Caption: this is like a super simple test case

00:37:45.500 --> 00:37:48.770
Caption: but gives you immediate feedback you&#39;re

00:37:47.479 --> 00:37:50.119
Caption: on the right path okay the

00:37:48.770 --> 00:37:53.030
Caption: transformations you&#39;re doing to your

00:37:50.120 --> 00:37:55.850
Caption: program actually go in the right way and

00:37:53.030 --> 00:37:58.040
Caption: then when we notice that we can actually

00:37:55.850 --> 00:38:03.520
Caption: introduce a variable get rid of all

00:37:58.040 --> 00:38:07.130
Caption: these superfluous equations then again

00:38:03.520 --> 00:38:09.429
Caption: we see that the results they the same

00:38:07.129 --> 00:38:14.139
Caption: but not only that

00:38:09.429 --> 00:38:17.500
Caption: the core 250 between work before work

00:38:14.139 --> 00:38:19.869
Caption: sunny so obviously this is the general

00:38:17.500 --> 00:38:24.669
Caption: definition so the important thing here

00:38:19.870 --> 00:38:29.190
Caption: is that you&#39;re there&#39;s no you write code

00:38:24.669 --> 00:38:31.899
Caption: for half an hour and maybe get syntax

00:38:29.189 --> 00:38:34.479
Caption: mistakes for another half hour and then

00:38:31.899 --> 00:38:36.849
Caption: you compile stuff and then you run stuff

00:38:34.479 --> 00:38:38.229
Caption: but you get feedback right away now this

00:38:36.850 --> 00:38:39.880
Caption: is not particular to functional

00:38:38.229 --> 00:38:41.530
Caption: programming you can in principle do this

00:38:39.879 --> 00:38:44.789
Caption: with any programming language but

00:38:41.530 --> 00:38:48.100
Caption: something which is quite in the in the

00:38:44.790 --> 00:38:49.989
Caption: list in the tradition of functional

00:38:48.100 --> 00:38:53.650
Caption: programming and I think we can Cooper

00:38:49.989 --> 00:38:57.129
Caption: supercharge this in this way playgrounds

00:38:53.649 --> 00:38:59.439
Caption: like this ok so this is what I mean by

00:38:57.129 --> 00:39:01.539
Caption: tight feedback loops so we can use tools

00:38:59.439 --> 00:39:04.060
Caption: to make it easier to learn this stuff

00:39:01.540 --> 00:39:07.060
Caption: and one special thing about function

00:39:04.060 --> 00:39:08.979
Caption: programming is the equations everything

00:39:07.060 --> 00:39:11.650
Caption: is sound so equals on so and you can

00:39:08.979 --> 00:39:14.139
Caption: replace one thing being equal by another

00:39:11.649 --> 00:39:17.639
Caption: thing being equal and you&#39;ll never break

00:39:14.139 --> 00:39:19.989
Caption: your program in contrast to see Java and

00:39:17.639 --> 00:39:22.179
Caption: every programming language which allows

00:39:19.989 --> 00:39:25.119
Caption: you to have side effects in the middle

00:39:22.179 --> 00:39:31.479
Caption: of things so this approach works even

00:39:25.120 --> 00:39:33.010
Caption: with big programs okay so that&#39;s type

00:39:31.479 --> 00:39:35.859
Caption: feedback loop so how about the

00:39:33.010 --> 00:39:39.520
Caption: visualization again recursion or today&#39;s

00:39:35.860 --> 00:39:41.770
Caption: recursion day so there&#39;s this AI concept

00:39:39.520 --> 00:39:44.020
Caption: of fractal trees which really

00:39:41.770 --> 00:39:49.719
Caption: beautifully represents recursion

00:39:44.020 --> 00:39:53.229
Caption: visually and as I said before for pure

00:39:49.719 --> 00:39:56.080
Caption: functional data structures this works in

00:39:53.229 --> 00:39:58.179
Caption: a general way a very general way you can

00:39:56.080 --> 00:39:59.860
Caption: visualize them very well because again

00:39:58.179 --> 00:40:01.689
Caption: there are no side effects in the

00:39:59.860 --> 00:40:04.780
Caption: construction there&#39;s no destructive

00:40:01.689 --> 00:40:07.119
Caption: people so the idea here is we start with

00:40:04.780 --> 00:40:09.370
Caption: a square and the top thing is the base

00:40:07.120 --> 00:40:12.280
Caption: and then we draw a triangle on top and

00:40:09.370 --> 00:40:14.460
Caption: the two sides of the triangle that&#39;s

00:40:12.280 --> 00:40:17.110
Caption: where you put the next square and

00:40:14.459 --> 00:40:19.389
Caption: another one and another one and another

00:40:17.110 --> 00:40:21.160
Caption: one and another one you get a pre like

00:40:19.389 --> 00:40:21.639
Caption: thing all right

00:40:21.159 --> 00:40:25.719
Caption: so we

00:40:21.639 --> 00:40:27.399
Caption: can do this in code now here I come over

00:40:25.719 --> 00:40:30.098
Caption: here because she&#39;s in the other screen

00:40:27.399 --> 00:40:33.548
Caption: so here we see practically forget all

00:40:30.099 --> 00:40:35.140
Caption: the other stuff the recursion looks like

00:40:33.549 --> 00:40:37.150
Caption: a start to recursive function but it&#39;s

00:40:35.139 --> 00:40:40.709
Caption: not recursive just one list element

00:40:37.149 --> 00:40:47.108
Caption: hence we only have this one thing over

00:40:40.709 --> 00:40:53.529
Caption: there okay so that&#39;s good so now we go

00:40:47.108 --> 00:40:58.229
Caption: and we add a recursive call to the

00:40:53.529 --> 00:41:04.150
Caption: fractal tree function and as we do that

00:40:58.229 --> 00:41:06.039
Caption: we see that the tree grows right but we

00:41:04.149 --> 00:41:08.889
Caption: have only one recursive call so it&#39;s

00:41:06.039 --> 00:41:11.949
Caption: linear as the recursion depth increases

00:41:08.889 --> 00:41:15.250
Caption: so what we can do we can just take this

00:41:11.949 --> 00:41:18.250
Caption: recursive call and copy it so we get two

00:41:15.250 --> 00:41:21.368
Caption: recursive calls but we use that second

00:41:18.250 --> 00:41:25.799
Caption: color for the second roof of the

00:41:21.368 --> 00:41:28.808
Caption: triangle and lo and behold we get a tree

00:41:25.799 --> 00:41:31.059
Caption: okay so then when we increase the

00:41:28.809 --> 00:41:33.519
Caption: recursion depth the tree grows so this

00:41:31.059 --> 00:41:36.869
Caption: gives this is really the recursion of

00:41:33.519 --> 00:41:40.209
Caption: that function visualized right and

00:41:36.868 --> 00:41:41.979
Caption: actually these trees you can if you play

00:41:40.209 --> 00:41:44.049
Caption: with the parameters you can do some

00:41:41.979 --> 00:41:48.159
Caption: really nice graphics so it&#39;s also fun

00:41:44.049 --> 00:41:50.529
Caption: and it gives a visual understanding and

00:41:48.159 --> 00:41:53.439
Caption: intuition of how the computational

00:41:50.529 --> 00:41:54.939
Caption: structure works and you can do that for

00:41:53.439 --> 00:41:56.379
Caption: a lot of things in functional program

00:41:54.939 --> 00:41:59.409
Caption: it&#39;s a really good way to build

00:41:56.379 --> 00:42:02.108
Caption: intuition so that&#39;s the other tool which

00:41:59.409 --> 00:42:04.058
Caption: i think is really useful so much better

00:42:02.108 --> 00:42:05.798
Caption: than starting with math start with some

00:42:04.059 --> 00:42:07.019
Caption: graphics and then do the math later if

00:42:05.799 --> 00:42:11.400
Caption: you like

00:42:07.019 --> 00:42:14.500
Caption: so one contentious issue which you may

00:42:11.399 --> 00:42:17.739
Caption: I&#39;m sure this is like you take a group

00:42:14.500 --> 00:42:22.959
Caption: of developers and then you ask this

00:42:17.739 --> 00:42:27.879
Caption: question should we use strict type

00:42:22.959 --> 00:42:30.469
Caption: systems yes or no fight

00:42:27.879 --> 00:42:36.769
Caption: you&#39;ll have fun with that every single

00:42:30.469 --> 00:42:38.659
Caption: time so you may wonder I mean from the

00:42:36.770 --> 00:42:42.260
Caption: program makes a lot of fuss about type

00:42:38.659 --> 00:42:43.760
Caption: systems right but then their languages

00:42:42.260 --> 00:42:44.959
Caption: like Lisp like the first function

00:42:43.760 --> 00:42:46.819
Caption: programming language who didn&#39;t have a

00:42:44.959 --> 00:42:49.699
Caption: type system so should we use type system

00:42:46.819 --> 00:42:53.390
Caption: should we use type systems maybe you

00:42:49.699 --> 00:42:59.239
Caption: should ask why why does anybody use a

00:42:53.389 --> 00:43:04.368
Caption: type system you must have an opinion

00:42:59.239 --> 00:43:09.129
Caption: I&#39;m sure compile time safety so any

00:43:04.368 --> 00:43:09.129
Caption: other opinions it&#39;s good one of course

00:43:11.079 --> 00:43:18.530
Caption: proving your program semantics that&#39;s

00:43:13.429 --> 00:43:26.780
Caption: hard call to get in your way are

00:43:18.530 --> 00:43:34.369
Caption: dissenting opinions you define states

00:43:26.780 --> 00:43:36.829
Caption: that make sense yeah so you you went

00:43:34.368 --> 00:43:39.199
Caption: further but otherwise it&#39;s kind of like

00:43:36.829 --> 00:43:42.549
Caption: getting this direction right like the

00:43:39.199 --> 00:43:45.229
Caption: type system is kind of it&#39;s there to

00:43:42.549 --> 00:43:51.949
Caption: don&#39;t do this it&#39;s going to crash your

00:43:45.229 --> 00:43:56.689
Caption: program bad programmer but think about

00:43:51.949 --> 00:43:58.520
Caption: it an architect right not today you

00:43:56.689 --> 00:44:03.379
Caption: today an architect you see the program

00:43:58.520 --> 00:44:09.380
Caption: everything no no like 20 years back once

00:44:03.379 --> 00:44:12.639
Caption: draw a diagram they&#39;ve got a ruler now

00:44:09.379 --> 00:44:15.889
Caption: this ruler is this like

00:44:12.639 --> 00:44:22.519
Caption: constraining the person I can only draw

00:44:15.889 --> 00:44:26.358
Caption: straight lines with this thing now

00:44:22.520 --> 00:44:30.020
Caption: it&#39;s a design tool and the same for type

00:44:26.358 --> 00:44:32.959
Caption: system you shouldn&#39;t view a type system

00:44:30.020 --> 00:44:35.539
Caption: of something which doesn&#39;t let you do

00:44:32.959 --> 00:44:37.580
Caption: certain things if you use it like you

00:44:35.539 --> 00:44:41.479
Caption: can use it like this and yeah you

00:44:37.580 --> 00:44:46.280
Caption: you get compile time safety and you

00:44:41.479 --> 00:44:48.409
Caption: constrain your States but type systems

00:44:46.280 --> 00:44:51.020
Caption: are much more beautiful they can help

00:44:48.409 --> 00:44:53.719
Caption: you to write your program instead of

00:44:51.020 --> 00:44:56.179
Caption: just checking that your program does

00:44:53.719 --> 00:45:00.199
Caption: certain things or doesn&#39;t do certain

00:44:56.179 --> 00:45:04.309
Caption: things in fact so let me get back to

00:45:00.199 --> 00:45:07.040
Caption: Phil Eisen and and and Finland sand

00:45:04.310 --> 00:45:09.170
Caption: flats and Krishnamurthy this work which

00:45:07.040 --> 00:45:12.229
Caption: was this origin paper and remember the

00:45:09.169 --> 00:45:15.469
Caption: bootstrap program which they did at high

00:45:12.229 --> 00:45:18.260
Caption: schools and middle schools that came

00:45:15.469 --> 00:45:20.540
Caption: with the paper was actually explanation

00:45:18.260 --> 00:45:24.530
Caption: of the approach they took in this Prague

00:45:20.540 --> 00:45:26.510
Caption: called how to design programs and I

00:45:24.530 --> 00:45:29.890
Caption: mentioned before they used record or

00:45:26.510 --> 00:45:34.429
Caption: they&#39;re still using record for this and

00:45:29.889 --> 00:45:38.089
Caption: record is a variant of scheme which is a

00:45:34.429 --> 00:45:40.909
Caption: list like language so it&#39;s it doesn&#39;t

00:45:38.090 --> 00:45:43.430
Caption: have static type discipline nevertheless

00:45:40.909 --> 00:45:45.079
Caption: in this program which is about this in

00:45:43.429 --> 00:45:48.500
Caption: this book which is about designing

00:45:45.080 --> 00:45:51.560
Caption: programs they start by saying well you

00:45:48.500 --> 00:45:53.419
Caption: write out examples well I mean I said

00:45:51.560 --> 00:45:56.330
Caption: that a few times today so we are on the

00:45:53.419 --> 00:45:59.750
Caption: same same page and then they say you

00:45:56.330 --> 00:46:01.760
Caption: write out a type signature but the

00:45:59.750 --> 00:46:05.030
Caption: racket so you have to write the type

00:46:01.760 --> 00:46:07.130
Caption: system signature in comment and then you

00:46:05.030 --> 00:46:10.760
Caption: at some point you write your code and I

00:46:07.129 --> 00:46:14.029
Caption: mean the type signatures sits there and

00:46:10.760 --> 00:46:16.600
Caption: you can try to correlate it to person to

00:46:14.030 --> 00:46:19.699
Caption: program but that&#39;s it

00:46:16.600 --> 00:46:21.350
Caption: so why did they do it I mean I have to

00:46:19.699 --> 00:46:23.449
Caption: say they also worked on contracts and

00:46:21.350 --> 00:46:27.739
Caption: stuff to make try to get some checking

00:46:23.449 --> 00:46:29.929
Caption: out of that but they did it because it&#39;s

00:46:27.739 --> 00:46:31.639
Caption: a good way to write your code they wrote

00:46:29.929 --> 00:46:34.339
Caption: the signature before they wrote the code

00:46:31.639 --> 00:46:36.529
Caption: because writing down the signature is a

00:46:34.340 --> 00:46:39.290
Caption: good way of getting towards writing your

00:46:36.530 --> 00:46:42.140
Caption: program it&#39;s a good way of designing a

00:46:39.290 --> 00:46:45.410
Caption: program even if there isn&#39;t a compiler

00:46:42.139 --> 00:46:49.798
Caption: to protect the signature so now how much

00:46:45.409 --> 00:46:53.020
Caption: better in a language which does check it

00:46:49.799 --> 00:46:54.549
Caption: you get even more benefits so if you&#39;re

00:46:53.020 --> 00:46:56.439
Caption: interested in this there&#39;s actually talk

00:46:54.549 --> 00:47:01.150
Caption: which I gave y&#39;all connected two years

00:46:56.439 --> 00:47:05.199
Caption: ago and it&#39;s not about Haskell it&#39;s all

00:47:01.149 --> 00:47:07.989
Caption: about Swift and about Swift you may know

00:47:05.199 --> 00:47:10.270
Caption: is Apple&#39;s new language which is a

00:47:07.989 --> 00:47:14.608
Caption: hybrid object-oriented function language

00:47:10.270 --> 00:47:17.829
Caption: it has a very powerful type system and

00:47:14.608 --> 00:47:20.798
Caption: you can use the Swift type system

00:47:17.829 --> 00:47:24.339
Caption: beautifully to help you with your

00:47:20.799 --> 00:47:26.920
Caption: program design and so that gives you if

00:47:24.339 --> 00:47:32.799
Caption: you want to know more about how to do

00:47:26.919 --> 00:47:34.689
Caption: this the UL has not only slides but also

00:47:32.799 --> 00:47:39.359
Caption: the videos from the conference so you

00:47:34.689 --> 00:47:42.039
Caption: can have a look so then people go but

00:47:39.358 --> 00:47:44.828
Caption: okay maybe I can somehow easy to design

00:47:42.039 --> 00:47:47.979
Caption: my program but then I do experimentation

00:47:44.829 --> 00:47:50.799
Caption: prototyping then that I want to run my

00:47:47.979 --> 00:47:55.029
Caption: program but then I get a type error and

00:47:50.799 --> 00:47:57.309
Caption: the compiler annoys me and I have to fix

00:47:55.029 --> 00:47:59.559
Caption: this first and otherwise I can don&#39;t

00:47:57.309 --> 00:48:02.670
Caption: can&#39;t do tests or when I respect that

00:47:59.559 --> 00:48:06.609
Caption: then it takes ages to compile it again

00:48:02.669 --> 00:48:08.588
Caption: well truth be told this is a problem

00:48:06.608 --> 00:48:11.939
Caption: with your tools it&#39;s a problem with your

00:48:08.589 --> 00:48:15.339
Caption: compiler let&#39;s look at Haskell

00:48:11.939 --> 00:48:18.039
Caption: so you&#39;ll see has something we call

00:48:15.339 --> 00:48:22.599
Caption: default the third type error message so

00:48:18.039 --> 00:48:27.150
Caption: here we have a program the top thing

00:48:22.599 --> 00:48:29.770
Caption: data is a definition of a data type of

00:48:27.149 --> 00:48:32.919
Caption: expression Crees can be addition

00:48:29.770 --> 00:48:35.020
Caption: multiplication or integer literals in

00:48:32.919 --> 00:48:37.449
Caption: the opposite order and then we have an

00:48:35.020 --> 00:48:40.359
Caption: evil function which for each of these

00:48:37.449 --> 00:48:43.449
Caption: cases tells you how to evaluate it and

00:48:40.358 --> 00:48:45.848
Caption: on the on the right hand side are three

00:48:43.449 --> 00:48:48.939
Caption: different examples of doing the

00:48:45.849 --> 00:48:50.770
Caption: evaluation with first only internet in

00:48:48.939 --> 00:48:54.039
Caption: petrol literal than additions and

00:48:50.770 --> 00:48:57.099
Caption: everything now what if we want to add

00:48:54.039 --> 00:49:00.729
Caption: equality at the moment the eval function

00:48:57.099 --> 00:49:02.950
Caption: returns an int but if equality it has to

00:49:00.729 --> 00:49:04.149
Caption: return a bool to

00:49:02.949 --> 00:49:06.989
Caption: we have to change the type of the

00:49:04.149 --> 00:49:11.649
Caption: function so we introduce a new type

00:49:06.989 --> 00:49:14.979
Caption: value which returns either an int or a

00:49:11.649 --> 00:49:20.469
Caption: bool right where you can be in or pool

00:49:14.979 --> 00:49:24.459
Caption: one of the two and you can read the

00:49:20.469 --> 00:49:26.379
Caption: vertical bar as all its into a boil but

00:49:24.459 --> 00:49:30.040
Caption: now I have to change the type of eval

00:49:26.379 --> 00:49:37.689
Caption: and look what happens we get a type

00:49:30.040 --> 00:49:41.380
Caption: error so but I&#39;m not fast I&#39;m just going

00:49:37.689 --> 00:49:44.439
Caption: to to fix the first case the case of

00:49:41.379 --> 00:49:48.298
Caption: Trustee in title literal by returning a

00:49:44.439 --> 00:49:53.770
Caption: trustee in but the interval of Ind and

00:49:48.299 --> 00:49:55.569
Caption: now if you look at the at the right hand

00:49:53.770 --> 00:49:58.839
Caption: side on the playground look the first

00:49:55.569 --> 00:50:03.099
Caption: example runs let&#39;s the example which

00:49:58.839 --> 00:50:05.319
Caption: only uses an integer value but there is

00:50:03.099 --> 00:50:07.900
Caption: still a type error of course because the

00:50:05.319 --> 00:50:09.369
Caption: second case I mean still wrong and if

00:50:07.899 --> 00:50:10.929
Caption: you look at the exception on the right

00:50:09.368 --> 00:50:14.169
Caption: hand side well it&#39;s just the type error

00:50:10.929 --> 00:50:17.828
Caption: but SLE exception so what&#39;s the idea

00:50:14.169 --> 00:50:22.629
Caption: here the ideas are simple if your

00:50:17.829 --> 00:50:24.489
Caption: program has a type error then that means

00:50:22.629 --> 00:50:26.649
Caption: that part of the program we had the type

00:50:24.489 --> 00:50:29.049
Caption: error is you can&#39;t run but that&#39;s true

00:50:26.649 --> 00:50:31.899
Caption: in Python 2 you just get any exception

00:50:29.049 --> 00:50:34.000
Caption: when you actually get there what why

00:50:31.899 --> 00:50:38.379
Caption: should you be able to run the rest of

00:50:34.000 --> 00:50:40.239
Caption: the program except maybe your compilers

00:50:38.379 --> 00:50:42.578
Caption: too stupid to generate the code but

00:50:40.239 --> 00:50:45.608
Caption: that&#39;s compiler construction issue not a

00:50:42.579 --> 00:50:48.280
Caption: fundamental type system issue so how

00:50:45.608 --> 00:50:51.009
Caption: about we fix this next example so

00:50:48.280 --> 00:50:54.790
Caption: we add the case expression to pattern

00:50:51.010 --> 00:50:57.130
Caption: match on the two impulse which we should

00:50:54.790 --> 00:50:58.780
Caption: get if you want to add them but maybe we

00:50:57.129 --> 00:51:00.759
Caption: don&#39;t know what to return as a result

00:50:58.780 --> 00:51:05.290
Caption: and then what we do which has put an

00:51:00.760 --> 00:51:09.209
Caption: underscore what underscore means I&#39;m

00:51:05.290 --> 00:51:12.459
Caption: quite sure compiler can you help me and

00:51:09.209 --> 00:51:15.030
Caption: then you click the error message and the

00:51:12.459 --> 00:51:19.889
Caption: error message says on top

00:51:15.030 --> 00:51:21.150
Caption: a whole there&#39;s a hole in my program but

00:51:19.889 --> 00:51:24.419
Caption: the hole has a type

00:51:21.149 --> 00:51:26.369
Caption: colon colon is Haskell speak for on the

00:51:24.419 --> 00:51:29.369
Caption: right-hand side of colon colon is a type

00:51:26.370 --> 00:51:31.500
Caption: incest value so value is the new data

00:51:29.370 --> 00:51:34.010
Caption: type we introduced and this new data

00:51:31.500 --> 00:51:38.040
Caption: type introduced value has only two cases

00:51:34.010 --> 00:51:41.340
Caption: can be indoor pool now I&#39;m implementing

00:51:38.040 --> 00:51:45.750
Caption: the addition case which one has does it

00:51:41.340 --> 00:51:50.880
Caption: have to be in there&#39;s no choice really

00:51:45.750 --> 00:51:54.629
Caption: this program writes itself so we put the

00:51:50.879 --> 00:51:57.029
Caption: in case in well but then I&#39;m still not

00:51:54.629 --> 00:51:59.789
Caption: quite sure how to continue so I put a

00:51:57.030 --> 00:52:03.090
Caption: hole again and now if I look at the

00:51:59.790 --> 00:52:07.530
Caption: error message then it says well the

00:52:03.090 --> 00:52:09.770
Caption: thing should be of type int the argument

00:52:07.530 --> 00:52:12.330
Caption: I give to impel and lo and behold

00:52:09.770 --> 00:52:14.070
Caption: there&#39;s also a list of all the variables

00:52:12.330 --> 00:52:16.950
Caption: in scope and there are only two

00:52:14.070 --> 00:52:19.650
Caption: variables v1 and v2 which are off type

00:52:16.949 --> 00:52:22.979
Caption: int that&#39;s the only stuff I can put in

00:52:19.649 --> 00:52:26.179
Caption: there right and I want to do a addition

00:52:22.979 --> 00:52:31.139
Caption: so I probably want to add the two and

00:52:26.179 --> 00:52:34.319
Caption: well let&#39;s try that so I add these two

00:52:31.139 --> 00:52:37.889
Caption: variables v1 and v2 and yeah one more

00:52:34.320 --> 00:52:43.050
Caption: trace done and then we just do the same

00:52:37.889 --> 00:52:46.739
Caption: thing for for the last case so look at

00:52:43.050 --> 00:52:49.110
Caption: that with those holes we didn&#39;t have a

00:52:46.739 --> 00:52:51.419
Caption: choice right I mean once the compiler

00:52:49.110 --> 00:52:56.220
Caption: told us what type we had to put there

00:52:51.419 --> 00:52:58.379
Caption: there was very little choice and it was

00:52:56.219 --> 00:53:01.979
Caption: quite clear from the context what we had

00:52:58.379 --> 00:53:03.539
Caption: to do so type error message this can

00:53:01.979 --> 00:53:05.550
Caption: write help you write your program and

00:53:03.540 --> 00:53:07.469
Caption: the stronger your type system the more

00:53:05.550 --> 00:53:10.850
Caption: information the better the compiler can

00:53:07.469 --> 00:53:15.479
Caption: help you okay that&#39;s what I mean by

00:53:10.850 --> 00:53:17.940
Caption: types use it to design your program not

00:53:15.479 --> 00:53:21.350
Caption: just to complain about the compiler

00:53:17.939 --> 00:53:24.359
Caption: giving you a hard time all right

00:53:21.350 --> 00:53:27.720
Caption: so this is already about tools right

00:53:24.360 --> 00:53:30.030
Caption: every compiler for a language is

00:53:27.719 --> 00:53:32.159
Caption: types which allow you to run the program

00:53:30.030 --> 00:53:34.819
Caption: even when it has type errors not for

00:53:32.159 --> 00:53:37.469
Caption: production code but as an option for

00:53:34.819 --> 00:53:39.630
Caption: debugging testing refactoring that

00:53:37.469 --> 00:53:41.939
Caption: during the refactoring you can test the

00:53:39.629 --> 00:53:45.059
Caption: things which you&#39;ve rather have affected

00:53:41.939 --> 00:53:49.679
Caption: even if some are still typing correct

00:53:45.060 --> 00:53:51.329
Caption: should be able to run the rest right so

00:53:49.679 --> 00:53:53.868
Caption: now I&#39;m going to make a statement which

00:53:51.329 --> 00:53:56.520
Caption: is going to make some people unhappy I

00:53:53.868 --> 00:53:58.289
Caption: mean the one way to get everybody to

00:53:56.520 --> 00:54:00.270
Caption: fight in the room is to ask do you want

00:53:58.290 --> 00:54:02.010
Caption: to type system or not the other other

00:54:00.270 --> 00:54:08.579
Caption: thing you could do is like what&#39;s your

00:54:02.010 --> 00:54:11.339
Caption: favorite editor and we I mean I added a

00:54:08.579 --> 00:54:13.319
Caption: modern one as well but a lot of the

00:54:11.339 --> 00:54:13.650
Caption: stuff you&#39;re using is quite old all

00:54:13.319 --> 00:54:15.869
Caption: right

00:54:13.649 --> 00:54:17.760
Caption: remember beginning of this talk I talked

00:54:15.868 --> 00:54:19.379
Caption: about structured program object on that

00:54:17.760 --> 00:54:21.659
Caption: program now we do function programming

00:54:19.379 --> 00:54:24.179
Caption: so a lot happened in programming

00:54:21.659 --> 00:54:27.328
Caption: languages over those years do you want

00:54:24.179 --> 00:54:29.429
Caption: to tell me that all we can do in tools

00:54:27.329 --> 00:54:34.079
Caption: it&#39;s the same stuff we did 30 years ago

00:54:29.429 --> 00:54:35.729
Caption: I mean it&#39;s not very plausible that this

00:54:34.079 --> 00:54:37.710
Caption: is the end of the road

00:54:35.729 --> 00:54:42.540
Caption: we&#39;ve reached the optimum we can&#39;t

00:54:37.709 --> 00:54:48.270
Caption: improve anymore really do you know this

00:54:42.540 --> 00:54:51.929
Caption: guy this website and who&#39;s behind it the

00:54:48.270 --> 00:54:56.699
Caption: this website is of a chap who&#39;s name is

00:54:51.929 --> 00:54:58.800
Caption: Brett Victor he was at Apple and

00:54:56.699 --> 00:55:01.290
Caption: wherever I mean he was in all kinds of

00:54:58.800 --> 00:55:06.660
Caption: places now said Y Combinator research

00:55:01.290 --> 00:55:10.349
Caption: and he the have a look at the website at

00:55:06.659 --> 00:55:13.709
Caption: those talks he has nice ideas I mean

00:55:10.349 --> 00:55:16.800
Caption: here&#39;s this concept of how programming

00:55:13.709 --> 00:55:20.040
Caption: environments could work and very

00:55:16.800 --> 00:55:21.839
Caption: interesting ideas and some people have

00:55:20.040 --> 00:55:25.800
Caption: started to try to put them into practice

00:55:21.839 --> 00:55:27.359
Caption: so for example two other people from Y

00:55:25.800 --> 00:55:29.699
Caption: Combinator research they have this

00:55:27.358 --> 00:55:31.529
Caption: experimental programming system which

00:55:29.699 --> 00:55:33.449
Caption: which doesn&#39;t just let you evaluate

00:55:31.530 --> 00:55:35.429
Caption: things while they&#39;re running but gives

00:55:33.449 --> 00:55:38.550
Caption: you other information about intermediate

00:55:35.429 --> 00:55:39.959
Caption: values and call trees and so on and it&#39;s

00:55:38.550 --> 00:55:40.310
Caption: all when you change your program the

00:55:39.959 --> 00:55:42.469
Caption: stuff

00:55:40.310 --> 00:55:44.630
Caption: changes right away right it&#39;s not like a

00:55:42.469 --> 00:55:47.149
Caption: profiler you do it and then we wait half

00:55:44.629 --> 00:55:51.829
Caption: an hour immediate feedback type feedback

00:55:47.149 --> 00:55:53.589
Caption: loops or you&#39;ve seen like the app I used

00:55:51.830 --> 00:55:56.090
Caption: for the Haskell programs has to format

00:55:53.590 --> 00:55:58.070
Caption: has this idea of playgrounds which

00:55:56.090 --> 00:56:01.190
Caption: evaluate all the time you see what&#39;s

00:55:58.070 --> 00:56:04.459
Caption: happening immediately and it&#39;s not just

00:56:01.189 --> 00:56:08.439
Caption: Haskell for Mac we I mean which we are

00:56:04.459 --> 00:56:12.260
Caption: using for example you for teaching and

00:56:08.439 --> 00:56:14.919
Caption: it&#39;s as a teacher it&#39;s great and Hurston

00:56:12.260 --> 00:56:17.780
Caption: for Mac users liked liked it as well but

00:56:14.919 --> 00:56:20.689
Caption: Apple has this idea of playgrounds as

00:56:17.780 --> 00:56:23.419
Caption: well so for Swift Xcode has Swift

00:56:20.689 --> 00:56:26.569
Caption: playgrounds and then apples introduced

00:56:23.419 --> 00:56:29.000
Caption: this with playgrounds app for iPad in

00:56:26.570 --> 00:56:32.630
Caption: including mechanism to write tutorials

00:56:29.000 --> 00:56:36.260
Caption: in it and who have seen that who&#39;s tried

00:56:32.629 --> 00:56:38.959
Caption: it few people well everybody who&#39;s kind

00:56:36.260 --> 00:56:40.330
Caption: of can get an iPad steal it from your

00:56:38.959 --> 00:56:44.859
Caption: kids or whatever

00:56:40.330 --> 00:56:44.860
Caption: have a look at the app it&#39;s really nice

00:56:45.520 --> 00:56:50.540
Caption: again it&#39;s this idea of you do something

00:56:48.679 --> 00:56:53.179
Caption: you get immediate feedback and Apple has

00:56:50.540 --> 00:56:55.040
Caption: put quite a lot of energy into the

00:56:53.179 --> 00:56:57.379
Caption: situation where a lot of people are

00:56:55.040 --> 00:57:01.280
Caption: calling for like every every kid should

00:56:57.379 --> 00:57:03.199
Caption: learn to code right and then the parents

00:57:01.280 --> 00:57:05.090
Caption: go to school you have to teach our kids

00:57:03.199 --> 00:57:09.560
Caption: how to code and the teachers go like I

00:57:05.090 --> 00:57:11.120
Caption: have no idea how to write so after has

00:57:09.560 --> 00:57:13.130
Caption: seen this opportunity and they&#39;ve

00:57:11.120 --> 00:57:15.380
Caption: actually done a lot of teacher training

00:57:13.129 --> 00:57:17.719
Caption: they have developed the curriculum for

00:57:15.379 --> 00:57:22.039
Caption: Swift obviously and they&#39;re using this

00:57:17.719 --> 00:57:27.439
Caption: app and it&#39;s quite nice so I use my kids

00:57:22.040 --> 00:57:29.630
Caption: as guinea pigs you know so my now 13

00:57:27.439 --> 00:57:31.969
Caption: year he was 13 years at the time not

00:57:29.629 --> 00:57:33.799
Caption: this summer last summer I had him to all

00:57:31.969 --> 00:57:36.139
Caption: the tutorials in switch playgrounds in

00:57:33.800 --> 00:57:41.120
Caption: this summer I wrote an iOS iPhone app

00:57:36.139 --> 00:57:43.279
Caption: with him so it works right so I think

00:57:41.120 --> 00:57:47.120
Caption: there&#39;s a lot we can do with tooling

00:57:43.280 --> 00:57:49.040
Caption: it&#39;s just like people bit lazy pushing

00:57:47.120 --> 00:57:49.300
Caption: to leaning forward and we still use the

00:57:49.040 --> 00:57:52.449
Caption: same

00:57:49.300 --> 00:57:56.770
Caption: same stuff as we did a long time ago

00:57:52.449 --> 00:58:01.540
Caption: alright so that&#39;s my point example

00:57:56.770 --> 00:58:03.550
Caption: driven strategy you have to start put

00:58:01.540 --> 00:58:06.000
Caption: them up don&#39;t start with the abstraction

00:58:03.550 --> 00:58:08.800
Caption: start with the concrete work your way up

00:58:06.000 --> 00:58:11.979
Caption: they&#39;re important to introduce design

00:58:08.800 --> 00:58:13.660
Caption: patterns to guide people to how to use

00:58:11.979 --> 00:58:16.600
Caption: this stuff don&#39;t just put it out there

00:58:13.659 --> 00:58:18.459
Caption: there has to be concrete recipes for how

00:58:16.600 --> 00:58:22.540
Caption: to use different styles of recursion

00:58:18.459 --> 00:58:24.639
Caption: Pullum office or the stuff tight

00:58:22.540 --> 00:58:26.949
Caption: feedback loops and visualization helps a

00:58:24.639 --> 00:58:28.389
Caption: lot and well if you want to learn

00:58:26.949 --> 00:58:30.520
Caption: Haskell you see there are lots of

00:58:28.389 --> 00:58:32.799
Caption: options now you can do online tutorial

00:58:30.520 --> 00:58:34.300
Caption: you can go to Tony&#39;s course you can come

00:58:32.800 --> 00:58:39.060
Caption: to lambda2 mmm

00:58:34.300 --> 00:58:39.060
Caption: it&#39;s all happening thank you very much

00:58:39.409 --> 00:58:45.899
Caption: [Applause]

00:59:02.409 --> 00:59:07.479
Caption: with playgrounds the teaching the

00:59:06.129 --> 00:59:09.429
Caption: imperative program includes the

00:59:07.479 --> 00:59:11.590
Caption: conditionals but there&#39;s not a lot of

00:59:09.429 --> 00:59:13.329
Caption: continuity and just taking pure

00:59:11.590 --> 00:59:15.400
Caption: functional stuff is it is there any bit

00:59:13.330 --> 00:59:20.010
Caption: you know that&#39;s sort of focused towards

00:59:15.399 --> 00:59:23.079
Caption: kids yeah you&#39;re totally right so with

00:59:20.010 --> 00:59:25.689
Caption: for example switch playgrounds I said I

00:59:23.080 --> 00:59:28.690
Caption: I&#39;m using it but and I like the app a

00:59:25.689 --> 00:59:31.209
Caption: lot and they&#39;ve they fully thought about

00:59:28.689 --> 00:59:34.329
Caption: how to teach the individual things but

00:59:31.209 --> 00:59:37.109
Caption: approach I don&#39;t like very much it&#39;s

00:59:34.330 --> 00:59:42.040
Caption: very state driven in the beginning and

00:59:37.110 --> 00:59:45.400
Caption: well there&#39;s not so much out there I

00:59:42.040 --> 00:59:49.239
Caption: mean the guy at the the 13 year the guy

00:59:45.399 --> 00:59:51.189
Caption: who did switch playgrounds for 13 I we

00:59:49.239 --> 00:59:54.459
Caption: start him on Haskell when he was nine so

00:59:51.189 --> 00:59:56.829
Caption: it was okay I think the perfect age at

00:59:54.459 --> 00:59:58.419
Caption: that age the kids at school they&#39;ve

00:59:56.830 --> 01:00:01.390
Caption: learned about function definitions and

00:59:58.419 --> 01:00:03.790
Caption: they use now 2d coordinate systems

01:00:01.389 --> 01:00:05.289
Caption: because often they want to do some gave

01:00:03.790 --> 01:00:07.570
Caption: me kind of things so it&#39;s good to know

01:00:05.290 --> 01:00:10.000
Caption: coordinate systems functions and you

01:00:07.570 --> 01:00:12.250
Caption: said I mean not some is really easy kind

01:00:10.000 --> 01:00:16.060
Caption: of pocket it&#39;s kind of like what&#39;s in

01:00:12.250 --> 01:00:18.520
Caption: the deal and they don&#39;t overthink it in

01:00:16.060 --> 01:00:21.400
Caption: whole you write it out on paper it does

01:00:18.520 --> 01:00:24.040
Caption: exactly the same thing but there&#39;s very

01:00:21.399 --> 01:00:28.289
Caption: very little material so there&#39;s one

01:00:24.040 --> 01:00:34.689
Caption: thing this code world is kind of an

01:00:28.290 --> 01:00:37.510
Caption: online the environment to do Haskell and

01:00:34.689 --> 01:00:40.859
Caption: the person I forgot his name something

01:00:37.510 --> 01:00:43.419
Caption: Smith who did code word he has used this

01:00:40.860 --> 01:00:47.470
Caption: specifically he&#39;s developed the thing to

01:00:43.419 --> 01:00:52.119
Caption: teach middle school

01:00:47.469 --> 01:00:55.239
Caption: I think level just for fun I think and I

01:00:52.120 --> 01:00:58.720
Caption: think he has some material around it but

01:00:55.239 --> 01:01:01.270
Caption: there&#39;s not a lot out there that&#39;s

01:00:58.719 --> 01:01:11.118
Caption: absolutely true

01:01:01.270 --> 01:01:16.219
Caption: let&#39;s go for Mac thank ya the curriculum

01:01:11.118 --> 01:01:18.679
Caption: really so I mean when I taught Leon so

01:01:16.219 --> 01:01:21.439
Caption: I&#39;ve got a github repository which if

01:01:18.679 --> 01:01:25.328
Caption: you go might have account and it&#39;s

01:01:21.439 --> 01:01:30.348
Caption: something how let Scout I think it&#39;s got

01:01:25.329 --> 01:01:33.140
Caption: the repo and this has some even older

01:01:30.349 --> 01:01:36.140
Caption: stuff using claws and so on but it it

01:01:33.139 --> 01:01:38.899
Caption: has notes which I used to describe I

01:01:36.139 --> 01:01:40.368
Caption: actually at some point I deliver safely

01:01:38.899 --> 01:01:44.750
Caption: and I asked him to bring a few friends

01:01:40.368 --> 01:01:47.209
Caption: so I had ten children ten to eleven

01:01:44.750 --> 01:01:49.969
Caption: years old and I kind of tried to teach

01:01:47.209 --> 01:01:53.838
Caption: them together and we did Haskell was fun

01:01:49.969 --> 01:01:57.169
Caption: and yeah so there&#39;s some notes in there

01:01:53.839 --> 01:02:01.849
Caption: on the steps I took what I started with

01:01:57.169 --> 01:02:04.189
Caption: and so on but this is all kind of quite

01:02:01.849 --> 01:02:06.470
Caption: scattered material I don&#39;t think there&#39;s

01:02:04.189 --> 01:02:08.770
Caption: a really nice thing I I&#39;m not aware of

01:02:06.469 --> 01:02:13.669
Caption: anything which is really like a full

01:02:08.770 --> 01:02:16.209
Caption: thing you could take and just do so more

01:02:13.669 --> 01:02:16.209
Caption: work to be done

01:02:19.149 --> 01:02:26.469
Caption: based on accessing a relational database

01:02:22.389 --> 01:02:28.959
Caption: and getting rich data structures into

01:02:26.469 --> 01:02:31.050
Caption: your program and providing the right use

01:02:28.959 --> 01:02:34.570
Caption: case for them would you say that type of

01:02:31.050 --> 01:02:37.120
Caption: program is fit for purpose for use in

01:02:34.570 --> 01:02:39.250
Caption: the functional programming pattern

01:02:37.120 --> 01:02:41.560
Caption: because I get the sense that until the

01:02:39.250 --> 01:02:44.370
Caption: programming is very suitable for your

01:02:41.560 --> 01:02:48.130
Caption: training crate complex calculations and

01:02:44.370 --> 01:02:50.290
Caption: computations but to me it doesn&#39;t really

01:02:48.129 --> 01:02:52.649
Caption: translate into that world where you

01:02:50.290 --> 01:02:55.510
Caption: don&#39;t really necessarily need that

01:02:52.649 --> 01:02:59.049
Caption: computation we just need to get data or

01:02:55.510 --> 01:03:01.780
Caption: relational database yes so you can

01:02:59.050 --> 01:03:04.540
Caption: totally use functional programming

01:03:01.780 --> 01:03:07.209
Caption: languages for that very well in fact I

01:03:04.540 --> 01:03:08.469
Caption: mean to certain extent sequel is

01:03:07.209 --> 01:03:10.629
Caption: actually a functional programming

01:03:08.469 --> 01:03:14.530
Caption: language it&#39;s a domain-specific language

01:03:10.629 --> 01:03:16.539
Caption: but really a funky language and usually

01:03:14.530 --> 01:03:19.989
Caption: there&#39;s quite a mismatch between sequel

01:03:16.540 --> 01:03:22.270
Caption: and the language you use it in and in

01:03:19.989 --> 01:03:23.770
Caption: language like Haskell you can make this

01:03:22.270 --> 01:03:27.010
Caption: much more seamlessly you can actually

01:03:23.770 --> 01:03:30.340
Caption: use a subset of Haskell SEO sequel

01:03:27.010 --> 01:03:32.199
Caption: queries and even have type safety get

01:03:30.340 --> 01:03:34.780
Caption: the type checker to help you design your

01:03:32.199 --> 01:03:36.879
Caption: secure queries and stuff so that&#39;s

01:03:34.780 --> 01:03:39.880
Caption: totally possible and if you look at the

01:03:36.879 --> 01:03:47.879
Caption: Haskell libraries than their ex

01:03:39.879 --> 01:03:51.399
Caption: different database libraries out there

01:03:47.879 --> 01:03:53.109
Caption: so generally I mean data processing is

01:03:51.399 --> 01:03:56.349
Caption: something you can do very well you can

01:03:53.110 --> 01:03:59.050
Caption: do this more mathematical numerical

01:03:56.350 --> 01:04:02.200
Caption: stuff but you just plain data processing

01:03:59.050 --> 01:04:05.350
Caption: data science the kind of things not just

01:04:02.199 --> 01:04:07.719
Caption: the numerical things but also just kind

01:04:05.350 --> 01:04:09.550
Caption: of having big data sets looking for

01:04:07.719 --> 01:04:12.219
Caption: things searching for things combining

01:04:09.550 --> 01:04:16.650
Caption: things works beautifully in functional

01:04:12.219 --> 01:04:16.649
Caption: languages and yeah

01:04:22.189 --> 01:04:26.939
Caption: Madeline I&#39;m a bit of a skeptic of the

01:04:25.379 --> 01:04:29.489
Caption: can you put us back to business example

01:04:26.939 --> 01:04:31.319
Caption: so in light of that thing one of the

01:04:29.489 --> 01:04:33.330
Caption: toughest things I&#39;ve found is to do

01:04:31.320 --> 01:04:36.360
Caption: things like how variations on a GUI

01:04:33.330 --> 01:04:37.410
Caption: where it&#39;s going to vary it&#39;s kind of a

01:04:36.360 --> 01:04:40.080
Caption: mental problem we&#39;ve got chocolate

01:04:37.409 --> 01:04:43.219
Caption: varying depending on the nature of the

01:04:40.080 --> 01:04:45.780
Caption: data that&#39;s there so is anybody

01:04:43.219 --> 01:04:47.729
Caption: documented kind of like Hello plan s :

01:04:45.780 --> 01:04:49.830
Caption: Fe you know business programming and

01:04:47.729 --> 01:04:50.969
Caption: since it&#39;s an extension of those sort of

01:04:49.830 --> 01:04:53.000
Caption: things with examples because most

01:04:50.969 --> 01:04:58.290
Caption: examples I see tend to go down in the

01:04:53.000 --> 01:05:00.479
Caption: data structures yeah so I mean one

01:04:58.290 --> 01:05:05.100
Caption: problem which we are definitely having

01:05:00.479 --> 01:05:08.939
Caption: is a documentation teaching problem in

01:05:05.100 --> 01:05:11.580
Caption: that there&#39;s a there&#39;s a lot of beginner

01:05:08.939 --> 01:05:14.429
Caption: material along those lines then there&#39;s

01:05:11.580 --> 01:05:18.300
Caption: really high level stuff which you find

01:05:14.429 --> 01:05:20.879
Caption: it PL conferences or something like that

01:05:18.300 --> 01:05:23.580
Caption: and there&#39;s very little in the middle

01:05:20.879 --> 01:05:25.679
Caption: and this is the reason why we originally

01:05:23.580 --> 01:05:27.900
Caption: created lamda time to provide

01:05:25.679 --> 01:05:30.419
Caption: information in the middle not in a

01:05:27.899 --> 01:05:31.979
Caption: written form but in the form of a

01:05:30.419 --> 01:05:33.569
Caption: conference where you can go you can

01:05:31.979 --> 01:05:35.639
Caption: actually talk to people you get people

01:05:33.570 --> 01:05:37.860
Caption: who actually use this stuff in

01:05:35.639 --> 01:05:39.689
Caption: production and they can tell you their

01:05:37.860 --> 01:05:42.510
Caption: experiences what works what doesn&#39;t work

01:05:39.689 --> 01:05:44.310
Caption: and so on which I think at this level is

01:05:42.510 --> 01:05:50.250
Caption: much more convincing than just having a

01:05:44.310 --> 01:05:53.400
Caption: write-up and and slowly we are getting

01:05:50.250 --> 01:05:56.939
Caption: more written things at the intermediate

01:05:53.399 --> 01:05:59.549
Caption: language level as well but there&#39;s still

01:05:56.939 --> 01:06:05.300
Caption: there&#39;s still huge gaps as you&#39;re saying

01:05:59.550 --> 01:06:08.340
Caption: that&#39;s totally true nevertheless I mean

01:06:05.300 --> 01:06:13.100
Caption: so I&#39;m mostly working for software

01:06:08.340 --> 01:06:16.979
Caption: consultancy to Akaya at the moment and

01:06:13.100 --> 01:06:20.160
Caption: tweak is most of our project involves

01:06:16.979 --> 01:06:22.409
Caption: function programming usually it&#39;s a mix

01:06:20.159 --> 01:06:26.048
Caption: of things it&#39;s Heslin Java Haskell and

01:06:22.409 --> 01:06:29.688
Caption: are other things combined

01:06:26.049 --> 01:06:33.909
Caption: but we are see the uptake at the moment

01:06:29.688 --> 01:06:36.648
Caption: is enormous and tweek plays a lot in

01:06:33.908 --> 01:06:40.818
Caption: distributed systems numerical computing

01:06:36.648 --> 01:06:45.618
Caption: data science biopharma that kind of

01:06:40.819 --> 01:06:47.269
Caption: domain but there is also a lot of use of

01:06:45.618 --> 01:06:51.378
Caption: functional program in especially

01:06:47.269 --> 01:06:55.489
Caption: investment banks also in the blockchain

01:06:51.378 --> 01:06:57.648
Caption: space is very popular in fact the

01:06:55.489 --> 01:07:00.168
Caption: program web a project I am working on at

01:06:57.648 --> 01:07:05.198
Caption: the moment this was ihk which is one of

01:07:00.168 --> 01:07:07.759
Caption: the blockchain companies and yes so the

01:07:05.198 --> 01:07:08.989
Caption: this technology is very applicable to

01:07:07.759 --> 01:07:12.799
Caption: those domains

01:07:08.989 --> 01:07:15.259
Caption: it&#39;s just that yeah that&#39;s not a lot of

01:07:12.799 --> 01:07:18.109
Caption: information out there except in the

01:07:15.259 --> 01:07:20.898
Caption: heads of people who started doing it but

01:07:18.108 --> 01:07:23.748
Caption: that&#39;s that&#39;s at the stage where we are

01:07:20.898 --> 01:07:35.538
Caption: at the moment it&#39;s unfortunate I totally

01:07:23.749 --> 01:07:39.349
Caption: see it but yeah right but by now we have

01:07:35.539 --> 01:07:42.019
Caption: I mean we there are projects lots of

01:07:39.349 --> 01:07:43.489
Caption: projects out there now it&#39;s just at the

01:07:42.019 --> 01:07:45.799
Caption: moment we&#39;re at the stage where you have

01:07:43.489 --> 01:07:47.809
Caption: to know somebody you can talk to who has

01:07:45.799 --> 01:07:49.399
Caption: got this experience but there are quite

01:07:47.809 --> 01:07:52.039
Caption: a lot of people with that experience out

01:07:49.398 --> 01:07:54.229
Caption: there by now so it&#39;s getting easier and

01:07:52.039 --> 01:07:58.389
Caption: I think the conferences and so on that

01:07:54.229 --> 01:08:05.749
Caption: helps speed easier than writing a book

01:07:58.388 --> 01:08:08.058
Caption: it&#39;s time-consuming yeah it&#39;s hard to

01:08:05.749 --> 01:08:11.839
Caption: say so in my opinion I think we are in

01:08:08.059 --> 01:08:14.389
Caption: the transition from early adopters to a

01:08:11.839 --> 01:08:17.269
Caption: limit charity which is why it&#39;s getting

01:08:14.388 --> 01:08:19.039
Caption: interesting now this is why we I mean we

01:08:17.269 --> 01:08:22.519
Caption: haven&#39;t thought about it like this when

01:08:19.039 --> 01:08:24.979
Caption: you introduce the welcome to FPA it&#39;s

01:08:22.519 --> 01:08:26.479
Caption: just more and more people asking

01:08:24.979 --> 01:08:28.809
Caption: couldn&#39;t you do something like that

01:08:26.479 --> 01:08:32.358
Caption: before the conference or I can come to

01:08:28.809 --> 01:08:34.129
Caption: and from that demand we did that day but

01:08:32.358 --> 01:08:36.579
Caption: I think the reason is because we&#39;re at

01:08:34.129 --> 01:08:36.579
Caption: that stage

01:08:42.938 --> 01:08:48.409
Caption: [Applause]

01:08:48.679 --> 01:09:03.029
Caption: everybody also big THANK YOU to and also

01:08:59.729 --> 01:09:06.528
Caption: to DDD first for being our community

01:09:03.028 --> 01:09:06.528
Caption: partner for this evening

