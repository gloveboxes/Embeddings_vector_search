file,text
ndc_001.txt,all right good morning everyone welcome  to Chuck on the goal the galar room and  I'm very pleased this morning to welcome  Aaron Zimmer  uh who's going to come and talk to us  about refactoring components and already  I love the talk with the refactor  tractor  Aaron is a Google developer expert with  over 15 years experience in a variety of  languages from JavaScript to model 204  which  apparently nobody else has ever heard of  anyway  she's currently a senior web developer  at Cash app an active community of the  Melbourne Dev community and has spoken  at conferences around the world if you  see her at a conference she'll probably  have knitting needles in hand so um  I'm sure we can find out a bit more  about that but uh everyone please give a  warm welcome to Aaron and refactoring  components  uh hi yeah so I originally called this  refactoring components and then one of  my co-workers pointed out that that was  pretty boring and I was missing out an  opportunity to go getting on the  refactor tractor so that's what we're  going with  um  my name is Erin I work for the company  formerly known as Square which is now  known as block and I specifically worked  building a product called Cash app which  you may not have heard of because it's  not currently available in Australia but  our aim is basically to fix the truly  atrocious situation that is the banking  sector in the US you think we've got  about here  um but we do have Offices here in  Australia and we are very remote  friendly so if you're looking for a  change maybe come have a chat  um like I said I will have my knitting  needles around I I'll be knitting socks  because  I decided for some reason I was going to  knit everyone's socks for Christmas  um so now I'm going to knit like 10  pairs of socks by the end of the year  and there's no like once no going back  from that yet right I'm stuck  um and if you would like to follow along  uh at home these slides are available at  refactortractor.ez.codes and they really  are there this time not like at the last  talk I gave  all right so today we're going to talk  about refactoring we're going to start  with factoring is and when we might want  to do it  um  that our refactoring happens safely  we're going to look at some additional  tools we've got available for working  with jsx  and we're going to do lots of live  examples because I like Living  Dangerously  all right so what is refactoring  refactoring is when we change the  implementation without changing the  functionality right so we're changing  the code but we're not changing what  what it does  there's a few reasons we might do that  and we might want to make the code  easier to understand we might want to  wait want to make it easier to test or  mostly we want to make it easier to  change  um so  some things that we might do while we're  refactoring are things like renaming  variables right maybe the variable names  we've got out of sync with what's  actually going on and the cut the code  is hard to understand rename the  variables make it a bit easier to  understand  we might take long functions and split  them up into smaller functions which  also makes the code easier to understand  because it's easier to reason about the  smaller pieces  as well as making it easier to test  because we can test the parts  independently  and we might do things like we've got  some repeated code we might Factor it  out so it's just in one place which  makes it easier to change right it's  going to we don't have to change it in  one place later  if you're interested in this kind of  nitty-gritty details of refactoring I  highly recommend that you check out  Martin Fowler's book refactoring um he's  got like a whole taxonomy there like the  different almost like the different  moves that you can make in refactoring  and like how to do them and all like  when you might want to do these  different things but we're not going to  get into quite that nitty-gritty detail  today  okay so now we know what refactoring is  when should we do it  um and my sort of cop-out answer is when  do benefits outweigh the costs  um I say that's a common answer because  that's when you do anything right when  the benefits  so what are the benefits and the costs  of refactoring  the benefits of refactoring uh most  importantly the biggest benefit you're  going to get from it is faster future  development right if you spend some time  refactoring your cards it's easier to  build change to build things change  things fix bugs later on that's a huge  benefit of refactoring  refactoring also often leads to less  bugs if we're making code that's easier  to test then it's easier to find the  bugs that we do put in there but also  for making a code easy to understand  we're less likely to put the bugs in  there in the first place  and finally refactor  but I get a real thrill out of um taking  some code that's a huge  a huge and cleaning it all up  um maybe that's just me I don't know  uh there are some costs though the  biggest cost of refactoring is time if  we spent a day refactoring our code and  that's a day that we're not spending  building new features or fixing existing  bugs right so we need to take that into  account we need to make sure that that  trade-off exists  and there's also some risks refactoring  so I found this delight Supply crew on  Twitter  by another person named Aaron I was  pretty happy to see  um and she says this code used to work  hey I should refactor it now it does not  work  which I found very relatable  um no she was a woman on Twitter so  obviously what she got was a bunch of  men telling her that uh she should just  have written about her tests  um which is easy to say but it can be  quite difficult right it's it's hard to  write tests for code when you don't know  what it was intending to do in the first  place right it's quite tricky to write  those tests and also when you are  writing those tests often you'll pick up  existing bugs in the code and sort of  you can't just go around fixing them  because often like if you've got bugs in  your code your users might have  workarounds that they've built to deal  with those bugs when you fix the bugs  you're going to break those workarounds  um the best sort of example I can think  of with really regards to that is  Internet Explorer which was basically  one big bug but  the way that it was written is Microsoft  had gone in and fixed all of the bugs in  Internet Explorer it would have broken  millions of websites around the world  right so  I.E had its issues but they their hands  were tied to some degree about the buggy  Behavior  okay  the code that I did not  comes from a code base that I was  working on last year it was in this  component it was like a huge component  like a thousand lines long there's a  favorite  and I was working in a different part of  that Improvement that this particular  function now I hate this function this  said to me immensely this should be like  three lines of code there is no need for  any of this  but it also was refactoring it like I  wasn't do you have a bit of code but  also works it's easy to understand  apart from the way that it annoys me  there's not really anything wrong with  it so I never didn't didn't touch it  resisted the urge as far as I know it's  still in the code base but I don't have  to look at it anymore  okay so as general I only reflect the  code if  I'm doing some change some other change  at the same time or someone else in my  team is doing some other change so that  has the advantage that first of all I  know that the refactor is going to be  worthwhile because it is going to speed  up the feature work that I'm doing but  also means that there's a bunch of  people with their eyes on this code at  the moment right the other people in my  team our product managers our designers  everyone's looking at  what's going on in this part of the code  base our users are expecting a change  anyway there's a better chance that if I  do accidentally break something or  accidentally fix something that  somebody's good somebody's going to  notice and we can deal with it  appropriately  we've sat down we've made our decision  and we've decided we're going to  refactor some code  the particularly Factor the specific  refactor we're going to do is our code  base is using moment.js for handling  date times  um moment.js was an absolutely fantastic  library for managing dates and times in  JavaScript when it was invented  10 years ago but these days it's a  little bit heavyweight it's got it uses  mutable dates which sort of result in  bugs and the managers at the moment also  suggest that perhaps moment is not the  library to be using for you so we've  decided that we're going to switch to  date functions date FNS  um the specificative code is this  function here so it's a function which  formats a date takes a date if the date  is falsy it returns an empty string  otherwise it uses moment to convert the  date into a string in the format YY mm-d  all right so how are we going to  approach this I like to take sort of  three steps when I'm refactoring code so  the first is we're going to use tests to  determine what the current behavior is  then we're going to refactor the code  and then we're going to write our  feature and we're not going to do step  three today because I'm assuming you  were all already really great at writing  new features and we're just going to  concentrate on the first two steps  so the way that we're going to determine  the current behavior is using something  called characterization tests so  characterization tests come from a book  called working effectively with Legacy  code by Michael feathers if you do work  with Legacy code and you would like to  do it effectively this could be the book  for you  today we're just going to talk about  characterization tests  so characterization tests work a little  bit differently to the tests that you  would normally write when you're  building a feature so when you're  normally building a feature what you  would do is you would write a test with  some expectations  and then you write the code to make the  chest pass  assuming you're doing tdd I don't know  if you don't do tdd I guess you write  the test you write the code then you  write the test and you realize the  code's wrong you go back change the code  want to wait in just write the test  first I don't know  uh the characterization test though is  the other sort of way around I guess we  write a test with no expectations  and then we change the test until the  expect we change the expectations until  the test passes  so with feature tests the code changes  but the test stays the same with  characterization tests the test change  but the code stays the same the most  important thing is that we're only ever  changing one or the other right the  chasing the code or you're changing the  test never both at once  so what does that look like  Oh wrong way  uh here we have can everybody see that  because  yeah cool because I can't make it any  bigger than that I don't think so that's  lucky  um so we have our function here and  we're ready to write some tests for it  so we're going to describe our format  date function  now uh when I'm writing tests I like to  start with the very simplest case  so when we pass in nothing  and what's going to happen then  it's this is a characterization test  right so we don't know what it's going  to do I guess it's going to return  something it returns we don't know  and then we can write the actual test is  going to be expect  format date passed in nothing  2B  and again we don't know  so what happens when we run the test we  can see that it fails because I guess  unsurprisingly  our date function doesn't return two  question marks  and we can see that what it does return  is an empty string so now we can update  our test and say it returns an empty  string  and write the test and now the test  passes  okay so then we can do that for our  other scenarios  so the next one is going to be when we  pass in uh date so the things that we  can pass into this function are sort of  determined by what you can pass into the  date Constructor so it's going to be a  date a string or a number  so we can pass in a date again we don't  know what it's going to return  um we'll pass a new date when I'm doing  this kind of thing I like to use dates  that are like have all the numbers below  10 so that we can see where the padding  is going to end up  and we can see that it fails because it  returns its formatted string  so we can say it returns a formatted  date I guess  um cool so that's our date scenario and  then we have the strings so when we pass  in a so with strings there's kind of  three scenarios that we can have here  the first is that we can have a valid  date string  which is just going to look like  on date and I'm just going to like go  out in a Wildland here and say that this  Returns the same thing as the previous  one which it does  uh we can also pass in a string that  looks like a date but isn't  so an invalid pass in an invalidate  string so that's going to be something  like  the 31st of February  right so we don't know what that's going  to return  oops  and it turns out that it actually  formats the name for us and turns it  into a validate so again it returns a  formatted date  um apparently the 31st of February is  just the 3rd of March  makes sense I guess  um the other thing that we can pass in  is a string that just isn't a date at  all so  um it returns we don't know  um and a thing that isn't a date would  be like say a banana that's a completely  different kind of fruit  and what's that going to return  it is going to return the string invalid  date  so we can stick that in  expect it to be in by the date  excellent so that just leaves one more  scenario which is the case where we pass  in a number so again there's sort of  three number scenarios to consider  so when we pass in a  number so when we pass a number to the  date Constructor what we're passing in  is the number of milliseconds that have  passed since midnight on the first of  January 1970.  because of course it is  um  so we can get that value just by pulling  get time on an on a valid date  oh no it didn't work  because you have to put  oh it has to be a new date you have to  put all of the things in right you have  to actually make it a date you can't  just call get time on a string it  doesn't work  all right have all the brackets lined up  yes  okay so then the other two cases well  the first of the other two cases for a  number is if we pass in a negative  number  so in this case a negative number is  going to be one that was before the  first of January 1970.  I don't know if anybody can imagine a  date that long ago but  so that's just going to format that's  the way that you would expect  this um this kind of testing really gets  you to exercise those copy and paste  skills  exactly what we've been training for  um cool and then the last case that I  always used to like to test with numbers  is the number zero so when we pass in  zero  [Music]  um  it's going to return I don't know it  could be anything  um let's just pass in zero here  is this suspense really getting to  everyone  okay so this has failed and uh what it's  actually returned is an empty string all  right so this is a bug in our code  and the reason that this bug is there is  because we've got this test right at the  start that says if the date is full C  return empty string and zero is of  course a faulty value  um now we could go ahead and fix this  but like I said we try not to do that  when we're refactoring so instead we're  just going to document the fact that it  has this odd behavior  um in our test here now the reason that  I wouldn't fix this even though it would  be low risk um it's unlikely to break  anything if I fix it but there could be  people in our code base who are using  this function and who have written some  work around code and their workaround  code isn't going to make any sense once  we fix the bug so it would sort of just  be you know saving a bit of tech debt if  before we fix this bug we go and check  who else is using it so we'll write up a  jira card stick it on the board someone  else's problem for later  all right so that's all of the tests  that I would write for this  um we could keep going right it's  JavaScript so we could write a test but  what happens if you pass in a Boolean  and the result of that would actually be  kind of interesting because if we passed  in false we'd get into empty string but  if we passed in true we'd get invalid  date  um but I'm not going to do that for two  reasons first of all if this was  production code I just used typescript  the only reason I'm not using typescript  here is because it's real long and it  takes up too much space but yeah just  use typescript and the other reason is  that if if you're in your code base  you've got to the point where people are  passing booleans into date formatting  functions you've got bigger problems  um maybe deal with those  okay so now finally we are ready to do  our refactor  um so like I said we're going to use the  date FNS I feel like it's pronounced  date functions so  date Simmons  um format from date fins  um we're going to replace moment with  that so date functions the format  function is going to take a date  um just like moment did and it's going  to take a formatting string as a second  argument but it's a slightly different  Library so obviously it needs to use a  slightly different render formatting  string  because it wouldn't be JavaScript if we  didn't  and we can see that all of our tests  have passed except for one and the one  that's failed is the invalid string  you can see that there it is actually  throwing an error rather than returning  a string this is I would argue that this  is actually better Behavior but  like I said we're not trying to change  anything here we're just trying to keep  it all the same so we can just wrap this  in a try catch  and instead return  invalidate  is it capital letter  we'll find out  okay so that's our refactor done now you  might ask  was this really worth the effort right  this is like eight tests or something  for four lines of code and the answer to  that is  um just like with everything else in  software development it depends  uh if this function was used by like one  component and we always knew what was  going to go into it no of course I  wouldn't write all these tests so just  maybe write one Maybe cover it by the  component tests but if this was like the  formatting function that's used across  our entire code base  um so I made a change like this in a  real live code base recently and the the  functioning question was used in over  300 places  um so to me seven eight tests for 300  usages that seems like pretty fair  um so yeah you're always gonna have to  make that that call for yourself and  work out  um just how many tests you need  okay so that's our characterization  tests work  um but the next question here is how do  we do this with jsx right jsx Works a  bit differently  um how is that going to work  so imagine we have this component here  it's a user info component it's going to  take in some user details and it's going  to print out the username was born on  and then the date formatted using our  format date function we just refactored  and also the day of the week right so  Bob was born on the 1st of first January  19th 1990 which was a Monday  okay so how does that work so we have  our function here  we can describe use a info component  I'm going to say it  does something we don't know what  um so we can render the components  oh you've got to put all the brackets in  and the user is going to have a name  and a birthday  which we can see is the first of January 1990  um okay so how can we test this well the  first thing that we can do is we can  grab a reference to the container  so the when we render a component with a  test Library it gets rendered inside a  div and this container just points div  and then we can expect the text content  of that container to be something so we  can expect container  to have text content  and we don't know what it's going to be  so we can run our test and just like  with our standard JavaScript and the  test will fail but it tells us what to  expect  so we can pop that in there  and we can say that it renders the user  details  okay so that works great  um so it works well in cases where you  can just expect the text content to be a  specific thing if you've got large  complicated components it can get a bit  messy or if you're expecting different  kinds of behavior this perhaps isn't  going to be an easy way to do things  um so the good news is we do have  another tool available to us and that  tool is Snapshot tests  so snapshot tests if you're not familiar  with them and I'm guessing you are  because you seemed very happy about them  if you're not familiar with snapshot  test the way that they work is that when  you first run your test uh it generates  a snapshot and a snapshot is just a text  representation of your component and  then you go ahead and you make your  changes do whatever you need to do and  then when you run the test again it's  going to generate another snapshot and  it's going to compare the original one  with the new one and it's going to tell  you if they match or if they're  different  so let's try that  so here we can grab  the same test again  and the test that we're doing now is  we're just going to say that it matches  the snapshot  matches the snapshot  and then instead of testing whether it  has text content we can just say we can  expect it to match  snapshot  cool and now when we run this you see  the test passes you can see down the  bottom here one snapshot written and we  can see we've got this new folder here  called underscore underscore snapshots  underscore underscore  um and a file that has the same name as  our test file with DOT snap on the end  and then here you can see this is the  text representation of our component  that's been generated  back into our test and change something  so we say actually it turns out Bob was  born on the 2nd of January  we rerun the tests this time it fails it  says that the snapshot failed  and it shows us what the difference is  right it was rendering the first now  it's rendering the second it was around  during Monday now it's rendering Tuesday  now we know that that's actually correct  because we just changed value so we can  just hit U and update the snapshot and  now if we look at our snapshot you can  see it says Tuesday everything's happy  our test is great we know we haven't  broken anything  all right cool so snapshot tests are  very handy for this kind of thing but  they do have some limitations  so the first is that you lose a lot of  clarity when you're using a snapshot  test so imagine that we have this  component called increment that we're  testing we've got a snapshot test on the  left  um and all we do is we render the  component and then we expect it to match  the snapshot then we click a button and  we expect it to match the snapshot but  there's not really information there  about what's going on whereas if we  wrote a more traditional kind of test  what we get is we render the components  and then we expect it to have the number  four which just so happens to be that  same as that initial number that we  passed in so that's probably a good hint  that it's rendering out the number we  passed in then we click the button and  we expect it to have five  that we passed in  um so there's just a lot more sort of  details for the next person who's  looking at this component um in a more  traditional test  which can you know have pros and cons  um also snapshots don't render all of  the information about the component that  you might expect them to  imagine this component this is called  clicking a jig  click Imaging renders a text box onto  the screen when you click the text block  the checkbox it waits two seconds and  then it unchecks the checkbox I can't  imagine any situation where this would  be useful  but I wrote a test for it anyway  so this test is using snapshots it's  going to use effect timers because we  need to handle that two second delay  it's going to render our components  we're going to check the checkbox  we're going to check that it matches the  snapshot then we're going to wait two  seconds and then we're going to check  that it matches the snapshot again and  this test will pass  and this test will pass even if we take  out the weight for two seconds this test  will pass even if we break the component  so that it does do anything other than  render a checkbox  and the reason for that is that the  snapshot that gets rendered looks like  this  right it just says that there's an input  with a checkbox we've got no information  about the state of the checkbox in there  so it's just something to be careful of  I've run into similar issues with  snapshot tests where people had written  the snapshot  but the component loaded everything  asynchronously so there were all these  tests that all they were was like this  empty component and they weren't really  testing anything so just make sure that  your snapshots do contain the  information that you need them to  uh and the third limitation of snapshot  test is that you can't do tdd with them  um you might say I don't care I hate tdd  and that's fair enough  um or why do we care about tdd we're  refactoring at the moment and yes that's  true but we're refactoring remember  because we're intending to make change  and when we go to make that change the  snapshot tests aren't going to provide  us a good basis for those new feature  tests that we're going to write because  they do like that Clarity  um that's not to say that they don't  have a place  but it's probably worth considering  whether you need other kinds of tests as  well  okay snapshot tests are really excellent  in two situations though and the first  is when you have those big thousand line  components and you don't want to test  every single thing that's going on in  there Snapchat tests are excellent for  that  um and the other things I quite like  them is things that have got a lot of  presentation logic I don't know if  you've ever tried to write tests for a  table but they're a mess they're brittle  um and they don't really have that good  information in them right so this is a  good use to just use a snapshot test  instead it's simpler  okay so that brings us to the example  part of the whole thing so we're going  to look at an app called The Old Farm  Shop the older Farm Shopper the  important thing to remember here is that  letter at the start isn't a why  it's a thorn and it's pronounced so in  English we used to have this letter  Thorn then the Dutch or wherever it was  came along with their printing press and  they were like we don't have that letter  you don't get to have it anymore get rid  of it  um and this sort of looks like a lot of  why so people started using the letter Y  and then we ended up with this situation  but it is legitimately pronounced  it's important okay what does that look  like  this is our app we're selling farm  produce so you can buy plants uh you can  buy seed packets or seedlings and you  can pick different numbers don't buy  zero that would be weird  um and you're going to get sort of the  unit price in this little label here  um a subturtle a postage cost and a  total  and we're all all good with that it's  not too complicated cool  we've got some new requirements so we  want to add a third product type so we  want to add a new radio button that says  plants and we're going to show the unit  price and the total price for a plant  and we're going to calculate the postage  for a plant  um so it'll start looking like this now  we could in theory Implement these  requirements in the order that they were  given but we're not going to do that and  the reason for that is that if we  Implement that radio button first  then we've got to do the whole thing in  one go right we can't we can't stop  halfway whereas if we start with the  label we can just implement the change  we need for the label we could merge  that in it can go to production without  the rest of it and it'll be fine  um so it's sort of like a a cheating  feature flag I guess  um you could argue that this is a very  small change and you could just do it  all in one go and you're absolutely  right but like we've got time limits on  this talk and I'm not confident that I'm  going to get through the whole thing so  we're just going to start with the label  all right  now  here is the component  that  renders this page  it's not an amazing bit of work  but it's what we're working with so the  bit that we care about is this label  here except actually it's these two  labels here because we've just repeated  all this code  for both this is actually some  production code that's had its identity  changed to protect the innocent but this  this is real code in production  um so we don't want to write another  block like this right  um because we don't want to have more  repetitive code in there but also  because we can't write a test for  changing the label with the code all  gone down to one component like this  right we need to separate it out so  we're going to start by creating a new  label component that is separate to  everything else  before we do that though we're going to  write some component tests some  characterization tests  product  test dot GSX  ultimately write TSX because yes code  will be like oh it's a typescript  project I'm like actually it's not  um and it'll light lead to sadness  okay so we're going to test our product  component now we've got four scenarios  that we need to test not seven or eight  like the last one this is four so that's  going to be when we've got seed packets  selected and we've got no amount entered  when we've got seed packets and an  amount when we've got seedlings and no  amount and seedlings and an amount it's  going to be a lot of copying and pasting  I promise  so when seed  pockets is selected and no amount  is entered  it now this we've got a great big  component we only compare about care  about a small part of it this is an  excellent use for snapshot tests so it  matches the snapshot  all right so we need to grab a reference  to our container  no not screen we want to render the  component first  product  get that product which takes a prop code  product we're going to do because why  not  um we need to import that  import it  yeah all right  okay  no not that one  okay we got there no thanks to UBS code  and we want to grab a reference to that  radar button so that's going to be seed  packets  screened again  roll  and the role of a radio button is Radio  nice and easy but there's a couple of  radio buttons on the screen so let's  pass it in a name as well  um  that radio button  all right we need to import screen as  well  and that's it then we can expect our  container  to match the snapshot  and we do that we get a snapshot  generated and everything is great  okay so then we've got our second  scenario  which looks a lot like the first one  except an amount is entered  so we're going to grab a reference to  the well I think it's called number or  count or something I can't remember  and you screen dot get by roll now this  time the it's an input of type number so  as everybody knows the Aria role for  that is  yes spin button  there's only one on the screen so I  won't worry about a name  and we're going to pass in four say  all right now the snapshot written  excellent then we just need to do the  same thing all over again but with the  seedlings  so if we when  see links is selected and no amounts  then grab  seedlings I guess we should rename this  too  foreign  this is going to be seedlings  and kings  and seedlings  all right we're gonna run into the  snapshots oh something failed okay  the name  that this one ah well spotted especially  when it wasn't on the screen  all right so we got all the last  snapshots written everything looks great  except actually we have this warning  that's being thrown and if you've spent  much time writing says react you've  probably seen this morning before this  warning is a lie  um it has nothing to do with anything  being wrapped in the act and it's very  misleading but important  so what's good what what causes this  warning is when the component state is  or the component state is updated after  the test has finished so in our case  we change the number  of things which changes uh  which calls this state which calls this  use effect which calls this calculate  postage function  and when it's seed Lings and it's not  zero it gets down to this postage  calculation which causes asynchronous  function so we call this asynchronous  function it goes off and does its  asynchronous thing then our test  finishes then the asynchronous function  returns then the state is updated and  then react is like oh my God I tell you  lies about Act  um so that's what's causing the warning  like it's a little a legitimate warning  it's just that it's not very hopefully  word worded  um so the way that we can deal with that  is we can just kind of wait for  um it not to be zero  so we look at the snapshot for instance  we can see  uh  postage total no the next one  we can see that the c c no not seed  packets oh my God  when ceilings are selected on an amount  that's the one  okay we can see the number is eight but  the postage is zero so we can say  the postage equals  Green Dot get by text  um let's just do a quick regex because  nothing ever goes wrong when you do that  and then we can uh await  I wait for  um  and then expect  postage  but to have text content and I whatever  it's going to be we can just run the  test and see  oh you have to make it an async function  all the time  okay so we can see the postage is  actually 32 dollars  so we can change that  and this is a slightly hacky way of  doing this but you get get the idea so  now snapshots failed because instead of  zero dollars it's thirty two dollars  instead of 32 the total is now 64.  that's what we're expecting so let's  update snapshot  okay so now we've got our  characterization tests we can do our  refactor  now I'm just going to write the new  component sort of inside here because  it's going to make it easier to copy and  paste  um but in the real world you'd probably  put it in its own file and it could have  its own like independent life and be  happy  so we're just going to return the same  value we have here now in this case you  can see we've got two bits of text that  are essentially the same thing so rather  than having it all repeated  let's kind of parameterize it so we can  pull out those names and we can say seed  packets is going to be  seed packets  and seedlings  is going to be seedlings  then we can get rid of all of  that and we can just say number of  names  product type  oh don't put a dollar sign there you're  out of control  um and again here instead of this being  seed packets it can just be  product type  oh then we need to pass in product type  I'm going to use passing count  because we're using that here  and then we just change this one more  product type  and then we get rid of all of that we  put one more closing bracket we wish  we'd set up prettier so that it  reformatted everything  um oh and it doesn't do it  okay so now we can replace all of this  with our new label component  which takes a product type  and account  and we run our snapshot test again they  all fail but the only reason they fail  is that the the white space has changed  because we've added in all of those  interpolations  so we can just update that and it's fine  cool so this is looking pretty good  except there is one more little  dependency in here that's not super  obvious but this ID on this input needs  to match the html4 on this label  um and we like we need those two things  to be the same there's a couple of ways  we could deal with that we could just  hope that no one changes it  we could pass the ID into the label  um which could work but what I would  suggest that we do is we kind of accept  that these two this label and this input  are very tightly coupled and probably  the best thing to do is just to put them  all into the component together  so now instead of this being a label  component it's going to be a number  input component  and we're going to wrap it in div  get rid of that bracket  and paste all of that in  and a closing div oh don't you wish I'd  installed prettier  okay so this is now just missing this  handle count change  handle count changer is kind of a weird  name for a prop so let's just put it on  change  all right so now that's all good we can  go back up here we can change this to  our number input we can pass it the on  change  um and then we can get rid of all of  this this is my more favorite thing than  refactoring is the leading code so thank  you rejoy  um and our Snapchat test will pass so  that's all good everything  is great  um and now we're actually ready to write  our feature  um except one small thing before I did  that like I said I don't like having  snapshot tests as the basis for my  feature tests we could go with that but  what we have here is sort of snapshot  test to cover the whole product  component we don't have any tests that  are specific to our new number input  component so I would start by actually  replicating our snapshot tests into like  a specific set of tests for the number  the number input I'm not going to make  you watch me do that though  um I have a set of tests here already  um you can see they're the same  scenarios that we wrote before for the  two different types and the amount and  no amount and then one additional test  which checks that the on change Handler  because now that these two things are  separated up we just need to test that  integration is working  um now you might argue that this is a  waste of time we already had these tests  I don't need to do all this and I look I  don't know how busy you are but I did  time myself  those copy and paste fingers going fast  okay so now we've got these tests here  we're ready to write the test for our  new feature  which honestly is going to look just  like the existing ones except we're  going to replace  um everything with plants so when the  product type is plants  um it's going to be plants  it's going to show the number of  plants and plants as I'm sure you all  remember from the spec cost 15 each  and again we're going to make the plants  we're going to have 12 of them we're  going to make plants and 15 times 12 is  of course  anyone no 180 yeah  we run these tests they fail because we  haven't written that code  but now when we actually go to write our  feature it's going to be so easy okay  all we need to do is add plants  to our little names here  and then there's a little config file  here that has the prices in it and we  can add the plants here  and that's also a pass so how fast was  that after we did that refactoring so  this component is now super easy to  change it's super easy to work with  okay so what did we learn today some  important things we learned to think  about when we should refactor because  even though it's fun sometimes we maybe  shouldn't do it we've learned how to  write characterization tests to ensure  our refactors are safe  we've learned about substantial tests  and how we can use those to write  refactoring tests and most importantly  of all we learned that this thing that  looks like these actually pronounced the  and that's what a thorn sort of looks  like normally  all right I've been Aaron Zimmer if you  would like to see the code other slides  are available here  um  don't know why Firefox hates rendering  the peas in this font but some reason uh  the examples are a funky tub with a  completed example as well  um and thank you all very much  [Applause]  [Music]  [Applause]
ndc_002.txt,okay well thank you everyone for coming back to jacquel Negal again up next we have Aaron who's going to be talking about unleashing the power of Visual Studio code probably one of the more industry changing editors of recent times I would say so please everyone put your hands together to welcome Aaron to the stage thanks for having me um as mentioned my name is Aaron I work for Microsoft as part of the cloud advocacy team I've been doing software development and web development for longer that I'm going to admit to or that in a session that's being recorded and streamed out but I I I've used a lot of editors in my time like I I got started with like pico and um and stuff like that emacs on on Linux machines when I was uh first at Uni and then obviously have graduated to more complex editors but yeah like vs code is it's been huge like in like the way that has changed how people think about you know Simple Text editors because at the end of the day that's that's what it is and the fact that I'm I'm here and you're stuck in a room with me for the next 45 minutes to hear me talk about a text editor I think that's kind of a kind of a big deal out but yeah if you if you want to uh get in contact with you after the session ask me any questions that I don't get a chance to cover off during uh during the talk uh that's my social media and uh website and email address and all that kind of stuff but um before we jump into the talk I want to thank the sponsors um I've been doing DDD conferences in Australia for 12 years now and they can't happen without sponsors um like all the ones we've got here particularly Microsoft they're an awesome sponsor you should really come and see us at the booth afterwards um yeah and that's where I'll be hanging out for the rest of the day so if you do want to come ask any other questions find me there but we're here to to talk about the power of vs code um no so whether whether you're brand new to the tech industry you're looking to get into Tech um or you've been in it for you know the nearly 20 years that I've been in it um yeah I hope that there's going to be something in this session for you um I I've put this together because I I'm I think that it's while it seems so simple it's a text editor there's so many hidden things in it um but to get started I'm going to just make sure that you know for those of you that haven't used vs code before or you haven't had um I had much experience with it let's just make sure that we're all on the same page so we're gonna do a quick lap around vs code so this is uh vs code um I've got a project of mine open there um don't try and read the text it's not particularly interesting or relevant um but what I'm going to do is I want to break down the core features of the text editor across the top we have the the title bar and that's where you your menu systems are and like every application Under the Sun has got a title bar of someone's description but the interesting thing about the vs code one is that it's highly customizable in fact like everything in vs code is highly customizable so at the top it's got things like the the file name um of the file that we're currently got open it's got the the information about the uh the repo this is connected to I'm connected to a remote vs code instance so I'm using it with WSL so it's got that information in there but you can actually edit that and change you know strip out information you don't think is going to be needed or you don't want to display in there and this can be really really useful some someone that has maybe some attention uh issues and some some newer diversion in that regardless I can strip out the stuff that isn't like I don't need to have it there I don't need it to tell me I'm in vs code because I know I'm in vs code um for example like you can you can modify it to be the editor that you need it to be we have the sidebar um on the left-hand side um I actually hit mine on the right hand side and you know I'll I'll show you uh why when I jump into actually editor but this is where we have like our files and our folder structure that's all there it's where we get to the debugger we get to Source control so we can um like make our commits into the git repo or um is there any other source control that people still use like it's like SVN oh now now am I really dating myself CVS anyone anyone serious yeah yeah um but so the other thing with the sidebar is that uh extensions that you can add to vs code can also introduce things in here so I've got a couple additional icons down the bottom there the Azure extension a Docker extension and a few things like that so that that um there's functionality specific to that I don't know a complex extension like the Azure one that allows you work with Azure resources you know it's all there and I can do it with inside of the editor so the editor goes beyond just being a um a text editing place it's also a more complex tool there are seats up the front feel like you don't feel like you need to awkwardly stand around the back down the bottom we have our status bar and this is again showing just a whole bunch of uh like little quick quick pieces of information things like what branch are we on in the the git repo that we've got open now are there any errors or warnings in the project that I've got open um what's the what's the lining Coatings because that's a painful thing there are still seats please do come in don't you don't feel like you need to stand in the doorway um and like what what uh language Services being used so this is It's a HTML file that's got open HTML but I can change that to you know what and that indicates then and that can be useful if uh you know you've uh working with you know multiple languages that uh maybe uh more esoteric than uh and kind of just you common run in the middle sort of stuff but again you can turn as much of this stuff off as you want because again you might not want that information you might not need it there because you know it's contextually irrelevant to you or um you find it distracting to have that kind of stuff all there uh then we've got our terminal across the bottom so there's an integrated terminal in vs code um uh that we can we can open up but we can open up as many terminal Windows as we can um when I'm working I tend to have just vs code open and I don't even have a separate terminal app running anymore I just pop the terminal up um run my npm commands or run my git installs oh sorry get my GIF commands and stuff like that um all within here also interestingly um if you do run like a node uh command so like in a npm start to how to run a web server from the VSCO terminal it will automatically attach a debugger for you you don't even have to like do anything extra to get debugging running for like a node application yeah npm start as your debugger already ready to go um and then there's actually a text editing surface as well like it's been like five minutes and I haven't talked about the fact that you could edit a text document in a text editor but I mean you can it's it's it's obviously the core feature um no it does all the things you'd expect from a text that ever does syntax highlighting um I have like errors and stuff like that will appear if the language service that you're using is um is servicing that information up um and this is a HTML file it's you know if it's got a variety of colors in there to indicate the different things inside of that and lastly we have our mini map view of the file so there's like a 10 000 view of the file that you're in um and this is not a particularly long file so it's all condensed at the top and you can see even like the the colorization appears there um but this can be useful if you're scrolling through a thousand long thousands of like a file that's like a thousand miles long not that anyone's writing like single files that are like like several thousands Lines no no one does that do they I see some I see some awkward uh awkward nodding of the head there um all right so that's vs code in a very quick nutshell uh and you know kind of like all like all the different aspects of vs code and the things that are in there so let's now talk about all right how can we use it to be productive and and for me being productive means keyboard like I'm I'm a keyboard um user I I don't have an external Mouse like when I'm when I'm using my laptop I don't use an external Mouse I can use an external Mouse at home because I have a desktop but I so I've done everything I can to try and memorize as many keyboard shortcuts as I can I know a scary amount of word shortcuts so like I can power using my way through Microsoft Word um but also in vs code um and let's jump over there's enough slides at the moment let's jump over and actually have a look at BS code and some stuff that we've got in here so I've got a couple of different vs coded this is open um the the you should be able to read the text but again don't worry about the text in there this is mostly my notes so feel free to read ahead and just then zone out to me because this is what I'm going to be covering but if there is only one shortcut key in vs code that you learn it is control p this brings up um the defaults to the file picker so I can use this to find the readme file hit enter and opens the file I'm currently in but we can also use uh this to say type a question mark and here are all the other things that we can get from this um the it moves on from being just a file a file picker to being a command palette so I could do a greater than symbol and then these are all the things like the actions I can perform within uh vs code I can open the settings or I can go to uh like uh so I've actually traveled on a thing called screencast mode uh so as I type the keyboard shortcuts uh they'll pop up quickly on the screen so you know I'm like here's the keyboard shortcut and you're like I can't see the keyboard Aaron you're up there and there's a screen um so I've got that turned on so you can see uh so control P comes with the file picker control shift p if I hit the correct Keys um go straight to the actions so uh this is just a because it's a quick one because this is probably the most common thing that you tend to do from the file picker uh so from from the the command palette um other things I like like if I type view I can get to the slide bar um on the right hand side there cool it's a false to the left-hand side I move it to the right hand side because if I expand it and collapse it pops in and out if I have it on the left let's see if I can remember how to move it to the left I actually can't remember how to move it to the left it's somewhere in settings it's been so long since I've done that oh was it ah excellent there we go um control B hides and shows it but this is really annoying for me because you now your focal point is um is Shifting because the the editor surface is moving so that's why I move mine to the right um anyway so control P View and then I can go to explore pop up into this bit or control B P view uh debug and get to the debug section okay um so I don't have to maybe like memorize um the shortcut keys I think that's wow F5 I think might get you to that I forget um but I just do control P view um but also then I can say in Explorer if I was in Explorer I can then go to like the uh the folders or the outline view or um you know so I can actually navigate the sub menus within or the sub sections with inside of um the the sidebar um using the command palette again just all off the off the keyboard there another one um term for uh quick access to anything to do with thermals and create a new terminal that one's going to be down there and a term whoops turn and then I can create another terminal and then I can swap between them um but we tell them they're all called zsh because that's the shell that I'm using in this case uh but it was like well which one which ones which how do I easily know that well Ctrl shift p command palette and then we're going to go terminal rename and we'll call this one we'll call this git because I'm going to use that for my git operations and now if I go control P term I can type git and jump to that particular terminal so this is usually if you've got a couple opens maybe you're maybe you're building an application has got a like a front end and a back end and if you've got a couple of terminals open ones running the back end um like the npm command to run the back end the others uh the the front end web application so you've got multiple terminals running node processors well you could rename them so that you can jump back and forth and you can see the uh which one like the log messages from the right one um easily from there all right um so yeah Ctrl P probably like the number one shortcut to take away and to remember uh from this now I'm talking about screencast mode which I've got turned on and we can get to that from settings control comma we'll get to settings we type screen cast and I have that done here um you can actually let me hide terminals uh control backtick will collapse the terminals um error at the bottom hide and show short back tick and how's that control B to collapse that um so with uh with screencast mode Um this can be good for pair programming as well uh so you're uh whether you're doing it like as a um like a remote peer programming session or you've just got someone um that's sitting next to you and you know you don't want them kind of breathing down your neck trying to work out well they see what you're doing um and just total it on can be a useful thing but you can it can be a little bit annoying because like every key stroke is getting captured in here but I can change that and say that I only want it to show you just like the commands so if I'm using the command or I'll sort of those kind of keys it'll just show those up um and that could be a bit more useful I guess if you're doing demos and stuff like that um change font size change uh styling all that kind of stuff there um another useful uh mode of uh this code is Zen mode control K Zed now you just you you want to kind of turn off as many of the distractions as you've got because you you're like you're you're in you're in the moment like you're trying to you know get through a bug or whatever the case may be um this as you can see it's hidden pretty much everything we've hidden the sidebar we've hit the status bar um the the top menus um hidden like we don't even have the you can't even see the different files we've got open I only have one file open at the moment anyway but like you would you could control tab to get between the the files but yeah this is like you know it's a it's a focus mode like we've hidden everything that could be a potential distraction just so we can focus on the thing that we're currently trying to do uh control KZ to get back out of that there are a bunch of settings for Zen mode as well so let's say that it's actually maybe a little bit too aggressive I do still want to have uh line numbers in here I can say that well no don't hide the line numbers go back into zen mode so I can still have my line numbers in there because I like I remember I find that useful so I can navigate up and down or I know where uh where I'm at and things like that customize it for the way that you want to use it it's not just the it's not just trying to be an editor that is generic and you like it forces you to work in a particular way no you customize it for the needs that you've got and I'm just going to turn that back on so that my zen mode is nice clean um from uh from an accessibility standpoint there's been a lot of work in vs code to make that uh an easy Editor to use um and something that I think that people don't consider um too much and and what and I know I didn't consider this for a long time but I used to work uh with a colleague who has albinism and he had very poor eyesight as a result of that so he had to have his font um incredibly large so that he could read it and and that kind of stuff but that can be a problem when you're working on code files because we tend to well I'm lazy so I just you know write things as long as I can I I've got a giant screen at home and a reasonable enough eyesight so I'm quite content to have you know hundreds and hundreds of characters spread across a 32 inch monitor because that's like that's my working experience but that might not be great for everyone on the team so we can turn on editor rules in uh there's code whoops let me just control control K control U to comment and uncomment um so control uh yeah control K is yeah okay U is uncomment control K C is to comment um but there we are so I've turned on some editor rules um and so you can see these uh lines there or you can maybe make it a bit like get that real retro experience and just have a whole heap of scan lines across the screen uh but you can then customize the colors for them and it could be usually it's like oh well we want to keep to it like an 80 character width because we know that there's someone on our team that that's kind of the the width of code that they can show at any point in time so we don't just want to be mindful of that so we you know we have an indicator in there or you know you're you're working on something that's got to be shipped to a Mainframe and it is actually like an 80 character width uh terminal that they're going to be working with so so you want to know where 80 characters is or you're one of those people that is militant about no it doesn't matter that we can have a curved 49 inch monitor around us I am going to have a fixed width of 80 characters in my texts because that's that's what I grew up with uh coding um but yeah it's just like it's it's kind of one of those random little features that I think um can be useful particularly when you're considering uh how other people are also going to be working on um a bio code base or something like that for you but we'll turn them off because they might be a little bit distracted uh another kind of actually I should have kept that open Ctrl shift t open the last file another thing that uh is um is useful and uh I tend to forget to turn it on because I I add it for like the demos I do then I take it out because um I don't try to clean up my uh my workspace beforehand and then forget to have it put it back in uh they're called code actions on save so you want to perform something when uh when the file is being saved that's what code actions on Save code action on Save and oops we can get it to do a variety of different things so what control space one of those is organize Imports so we're going to hit set that to true so let's say that we're working on like a Javascript file one here and we've got a like a a linting rule where we have to we want to keep the order of our Imports in an alphabetical manner it's a it's a fairly common integral well I've got them a bit uh back with you because I want the destructor Imports at the very top so I can go control shift p and then uh all organize Imports or shift alt o is the the default shortcut key for that one I can hit it and it's going to do that for me or with code actions on Save now as soon as I hit Ctrl s to save the file it's going to just run that for me yeah it just like it's a useful little thing particularly if like those are the sorts of things that you're putting in your like your linting rules um there's also another one in there for uh for fix all um so it'll uh if you've got a like a linter installed that is going to be applying um fixing rules it can try and run those for you so like you know eslint um it'll try and apply those fixes to the file as you hit save so okay just like little quality of life improvements that are there uh come back um oh uh the last one from a setting standpoint that could be useful is this default editor language um what it will do is it will attempt to work out from the workspace what is the most common programming language of the files that are in there and when you do control n to create a new file it will assign that language service to the new file so you immediately get your code completion turned on for the file you immediately get the correct like syntax highlighting and colorizations and stuff like that but you can actually overwrite that setting uh so you know I want new files in this repo to be always defaulted to markdown for example I do that for my my blog is running in markdown so I default the files to always be marked down unless I change the the the file with Ctrl k m it's okay m not control K control M Ctrl k m and that's how we can change the language of the file um and so yeah but you can you can set you can let vs code attempt to figure out what should be the default language for a new file or you can force that uh with settings um active active editor language is the the default that's there all right we'll come back to slides for a minute because I want to talk about extensions vs code has a huge amount of extensibility and out of that has grown a massive extensions ecosystem everyone's going to have their favorite extension that you should have installed or that they believe is that it's going to change the way that you use vs code and there are literally thousands of extensions so I am not going to cover them all off in here I'm just going to talk about a couple that I think are really useful and that I've got installed on my machine and they're generic ones they're not um they're not specific to a particular programming language or anything like that so these are these are six um top ones for me um editor config for vs code so editor config if you're unfamiliar with it is a file that you can put into a repo that that you use to define the set default things about a file like what is the default line encoding how many are we using tabs or spaces now what's in default indentation depth and you can then set that for um uh like different for different files so maybe you're like your your bash files they need to have an LF as the default line encoding whereas other files you might want to have a crlf as the the line encoding and then you can and so that that one's a useful one just to enforce standardization with inside of a code base I'll get on pull requests and issues uh just manage all your GitHub stuff uh what full requested issues aspects of GitHub from within vs code don't have to jump out to the website don't have to jump out to the the GitHub um uh desktop application or anything like that um just do it from vs code um rest client if you're doing anything that involves calling apis rest client is so useful um it's the same as like Postman and Insomniac and all those sorts of tools so it allows you to invoke HTTP um requests but the advantage of rest client is that you create a file and then you just execute the things out of that file so you can have you know your examples of how to call an API as a file that you just check in part of your git repo and then you like it's it's all there it's all in one location and you can then execute those from uh with the side of vs code uh peacock this was actually written by a colleague of mine at Microsoft uh and it's it's what a what it does is it changes the colors of like the borders of vs code so you would have seen uh the one that I had uh where is it it's my lovely background uh so see how this has got the green around it uh peacock's done that so if you've got a couple of vs code instances open maybe you want to um you set different colors on them so you know which one it is as your old tabbing um between your uh between your windows uh code spell checker funny story was uh when I was working for a company a number of years ago we were um we were building a custom CRM and we needed to keep track of our person name history because you know if someone changed their name we need to attract that so we created a table called person name history also we thought that's what we named the table it wasn't until several months later that we realized that we'd actually named the table person named his Troy we'd also read in customer RM it had generated a whole bunch of C sharp code from the database so we had all these classes called person name history uh you would get that person if you have a collection of person named his Troy's uh and all that kind of stuff um it was then like this was then in in testing and it was just it was too hard to go back and fix it so like oh well we're shipping to production with person name his choice you want an extension like this one like code spell check sure you don't do that um I I and I'm just horrendously bad at spelling you know the best of times so I use that on my blog and it's just like it's just so nice and uh that I could just not have to worry about that uh and then the last one is to do highlight so uh to do how I'd actually like to use with uh the GitHub uh one so where where you put likewife or like put a comment in you know to do I'm totally going to fix this code later like and you totally gonna come back and do that right um what what to do highlight will do is it will actually find all those in and give you a list of that like you can see that with inside of vs code like here's all the to-do's you've got with inside of the solution um but then I combine that with the GitHub full requests and issues so that you you just select that to do and then immediately create a GitHub issue out of that so that it's not just in the code base that you're totally going to fix it later it's also in your GitHub issues that you're totally going to come back and fix and you just gets de-prioritized down the back um yeah uh these things are like yeah the ones that I find really useful and like I said these aren't specific to any kind of program you're like whether you're writing markdown or python or net or whatever um these can all help out there but I'm a web developer at heart uh so I want to talk about a couple of um my favorite uh web developer or JavaScript developer extensions um and uh since my animations are not quite right uh so um prettier so uh if you're if you're doing JavaScript projects prettier is kind of like it's the de facto standard I think at the moment for doing um code formatting uh for JavaScript applications it also does like HTML and CSS and I think a couple other languages markdown stuff like that there is an extension for vs code so that uh like you don't have to do anything it just uh it includes it and then it gets you can set that as the default format of formatter for for the right files are you JavaScript files so when you um in vs code you tell it to format the file it will execute prettier for you uh combine that with eslint so then you can get your linting um rules uh the the linting information surfaced up with inside of the editor so you can quickly jump around and find those without having to wait until the CIA build has failed because you didn't run uh npm no you didn't run your yield into before pushing uh npm um this is a just a useful extension uh for working with npm I will like when you're working in a package Json file uh you can do control space uh on the version and we'll show you the the vision um versions available for that package and also give you like the the December um City attack sports are like do you want the the hat or do you want a star or whatever the case may be um so yeah you can uh make sure your lucky patch is the right point and the last one is um we shift uh for vs code a bunch of extent an extension for uh Edge so that you can do um like work with the browser from vs code and I'm going to have a crack at actually testing that one out now because I totally didn't just try and do this before okay before I came to uh into the room for the session I totally this was all pre-planned and done this is the day-to-day Perth website I brought it down um I'm gonna let's do npm start and we'll see if that works there we go um and I do have the edge extension installed uh so the edge extension I think it also works with chrome to a degree so because it's it's chromium browsers but this is not working fantastic all right um well the oh I had to do like npm building npm run build I totally didn't read that readme either so I was just like I can clone this run npm install and yeah like everything will be fine yep yep that might not be fine that's going to take a while um let's try I'll show I'll show us a slightly different uh one of it that does work but not quite as much as I wanted there uh so oh another one from there task and then these are uh scripts that I've already got inside of my repo uh that I can run uh this is my this is my blog I'm just going to uh run the the little web server for that it's open and now I'm going to use the edge extension which I've got installed here and there it is I have my website there and I want to hit open so there we go I I do apologize it is going to be very cramped because it's all zoomed in for the editor but there's my there's my website on one side and there's a Dom inspector on the other side so I could go hey let's find that element so I can like I can ins like all that Dom inspectory goodness that's there I have the the CSS um information there uh you probably can't read that unless you're in the front view rows but uh I'm actually using SAS to uh instead of like raw CSS so I'm compiling that down to CSS and that's telling me this is uh banner.scss file um and if I wasn't using it in the way that I'm using it I could actually click through that file and we'll go through the file and disk unfortunately it's not working in this particular vs code instance because I'm connected to a remote machine and it doesn't like so it can't access the file system uh properly to do that pass through that's why I was trying to get this one up and running and it's a good idea that I didn't wait for that because it's still building um but if if you're working with it just like directly on your Mac or Windows machine or Linux machine then um like it like you can click through to that file if you edit in the Styles editor with inside of this extension here it will actually push those to the file on disk so like you know just like full real-time feedback loop that you get there yeah it's a it's a really Nifty extension and I'm not just trying to pimp it because I work for Microsoft and I think Edge is actually a decent browser um like being able to like have like having everything contextually in the one location I find is quite useful all right now I did Consulting work for nearly a decade before joining Microsoft and something that was always frustrating when uh I was doing my Consulting work was that I would come to a new client and be like cool ma'am welcome um here's your machine boom big pile of paper uh that's the setup guide for your machine we'll see at the end of the week who's who's experienced something like that I'm saying I've seen a lot of heads tonight yeah it and just like I feel bad because like I know how much I'm billing for you to be here and you're telling me it's going to take me a week before I can be productive because I've got to you know like and you go through it and then it doesn't work anyway oh yeah sorry it turns out that um no we're actually using the the newer version of Reddit sorry just not like not the old version that's listed in there can you actually got to download the new can you can you upgrade that or um oh yeah we've we forgot to add this step or actually can you go talk to uh this person on the other side of the room because they're going to have to help you um because yeah we haven't documented some of the new stuff that they've added to the uh the environment and like ah it's just it's so frustrating um but with vs code um one of the one of the things we can do with that is uh I mentioned before like editor config and things like that just to reinforce them like code standardization but you can even do that to the point of like editor standardization where um where we can have inside of our DOT vs code folder uh we can include things like settings so settings that are specific for this repo so when you open this repo in vs code these settings are going to be applied so like if if you've got like a you know default file extension that you want to set you can set that just for this project so that you opened up you're not having to set this on a machine wide wide config um another one I don't have it in this one but I think I might have it in actually I'll have it in here maybe I have so many oh there's so many things open uh whoops let's collapse that now uh you can also include uh I don't have extensions in this one either ah but I know where it was I did see one earlier inside of this vs code folder extensions so these are recommended extensions that you should have to work on this particular project so they're um they're encourage you to install the Chrome debugger which ironically is actually deprecated they're recommending that you install editor config and prettier and and uh ESPN so what will happen is when you open up this uh this folder in vs code if you don't have those extensions installed you'll get a note noticing there are recommended extensions would you like to install them so that way you can make sure that everyone's kind of got that same sort of development experience but let's go back into the slides in a moment there we go but there's another level we can take this to and that's with a feature of vs code uh called uh Dev containers so a Dev container is a way to dockerize the development environment that you're working in or dockerize the the yeah the thing that you're you're building with and then because it's in a environment's in a docking container you can control what's there so you can pre-install like the correct version of node or net or go or whatever runtime you're working with you can pre-install like a database um and I'm gonna I'm Gonna Keep just dropping in and out of my slides uh so this project Yep this one here so this is one of my open source projects it's a F-sharp project if anyone wants to talk F sharp come see me I'm like probably the only person here that actually cares about that but it's awesome and if you're a DOT net developer learn F-sharp um but this is a project for working with uh Cosmos DB uh from F-sharp but for local development well I don't have to speed up an Azure resource for for Cosmos Divi or if someone wants to come along and contribute a fix to it or a feature or anything like that I don't want them to have to stand up at Azure account stand up for a cosmos instance inside of there so I have a Dev container that does that for you um this one is using uh Docker compose so it has the environment that you're going to be actually developing with inside of so this will pre-install the.net runtime for you the correct version because I'm working on dot net six so that'll all be pre-installed for you plus a few tools make uh for working with F sharp but then I have a another Docker container that started up next to it which is going to be the cosmos DB emulator I then also so when I open in vs code it detects this Dev Contender says hey do you want to run this as a Dev container you do that it will start this all up um it will start up the the docking container side by side and now I I can do full local development and I haven't had to install anything other than Docker and vs code um and then if I when I'm finished working on this delete the repo off my machine and I don't have to uninstall you know the cosmos emulator I don't have to install the.net framework or anything like that it's all isolated uh and what this means is that yeah like it's very easy to come across as like an open source contributor pick up a project clone it open it and have all this uh like all the environment ready to go you haven't had to read like a a massive contributing guide or anything like that um the the next kind of power of this is that if you're working with GitHub code spaces uh when you open it in code spaces it will detect the dev container and provision the code space through those specifications for you um uh the the GitHub folks um over at the the booth actually have this running uh with another project of mine where it is running a cosmos DBA emulator and a a Docker container side-by-side inside of code spaces and they're running that from a Raspberry Pi so you're like doing full development with two running Docker containers off a Raspberry Pi um but a Dev containers are really useful for doing um so yeah like this remote uh so this pre-provisioned environment and it can save so much time you know having to install this uh keep these docs up to date this is the right version of whatever the dependency is that we need to install you have it all there um uh pre-built and combined into this one folder um all right we've got about um I'm going to leave some time for questions at the end um so uh we'll go for about probably I think well like 10 minutes left I think uh I'm getting some vagueness on that I'm also the thing that's standing between everyone and lunch so uh um uh I talked a bit about code spaces but there is one other thing that I will show off because I think it is super cool particularly in um and the fact that a lot more of us are working from home now I've got to find the right vs code instance.
ndc_003.txt," how's everyone going decided anything  [Music]  first up this morning we have stopped  Percival's talking about the best  engineering is with the is good and bull  so for everyone so  [Applause]  and welcome to today s engineering  inexperience but hopefully appreciate it  it's a very difficult few down so  actually you guys ever you guys sorry  you'll get a special challenge today  these techniques go on I just wanted to  thank all the amazing sponsors and  probably all the stuff behind the scenes  got you know guiding people around  working AV here until you post 2018  today it's amazing privilege to be here  to speak to all today and possible  without everyone in this room also a  pioneer oh sorry let's go  yeah  [Music]  but any piece of software I will just  try and take it apart and see how far I  got  and I failed a lot of times during this  day there's nothing more frustrating  right that knowing you are doing the  wrong thing we're just going to have to  write like search query or the right  question to ask in order to actually get  back on the right track so yeah that was  us  after waddle after after you go around  the block I started my peak a few small  victories here in the man managed to  slowly kind of piece of keep things  together  more importantly I can start to see that  for all of these all of these reverse  engineering techniques though these  invisible kind of threads that were  connecting all the ones of the same type  and in fact like full really content  sheets the ones o I just kind of wrote  it off as bait all these deduce flight  weight out of my league there's actually  two or three steps for them is an easier  version of that same technique and by  practicing the skills and the transfer  it's very strange because rather stage  now where there's I guess so much  quality material especially in the form  of layups videos getting started rolls  and it all seems to be just kind of  focused on like the view from the top of  the mountain  so basically yeah as I said we're just  gonna talk about a little sitcom today  and hopefully with luck they'll just  give you the foothold you need to get  started so very good tool that could  begin with the definition for most  engineering it is a discipline that is  focused around gaining an understanding  that's pretty much it so we're talking  about say today obviously but when we  say system could be neat if we could  mean a secret pocket ship we could mean  a the kind of process could mean ice  cream play bug but all of these things  reverse engineer pretty much anything  man right and when we were posted to  doing it's important to have a doll you  don't the other thing it's up to you but  it's nice to have a goal so we know that  trying to get out of this experience and  a very common goal some people just  extract some information in the systems  sometimes you just feel like an  accretion cave or a DVD player or some  essence from a game just just getting  some information out other times you  might be doing some reverse engineering  components who trades or can improve on  a design you can make at the moment  that's really important especially if  you are trying to for instance credit  Oakland replacement for existing system  say like you know Lionel samih replacing  windows services I'm also the emulated  [Music]  now I'm not gonna pull the trap of  saying because challenging it is quite  challenging after let's kind of is  interesting it doesn't have to be is  impossible things I figured off too like  a select few people and unfortunately  like the longest time like as for us as  far as talking the world goes there's  been this kind of stagnant elitism  around the into my food over both  engineering and it suits me a little bit  so this is probably a good time to step  out some cancerous myths  loose it out loud talk about gates so  it's more just background noise it's the  idea that it is somehow  now somewhere that's probably gonna be I  guess platform documentation the API  console where you need to go to find  information everything else you can just  learn as you go  in fact it's probably gonna be quicker  than pre-loaded pre learning and in  front of dredger dollar another one that  comes up is also important to know EC is  not true there is an overlap between I  guess knowledge of how C works cqx keys  code  [Music]  [Music]  and then finally like the Nauru Scotsman  fallacy the idea that it doesn't count  as regressive during unless it meets  some kind of ridiculous level of  planning groups that jump through and a  common one is that it just if someone  has a below done reverse engineering in  an area before doesn't  works usually there's more than one  person in succession and finally this is  a lot of kind of jumps with my pain  neurons the hottest Emily  reverse-engineering if it looks  sufficiently thankful and complex and  this one gets trafficked around so much  that I hate it because this is like this  is the root of why this started  exclusionary and self reinforcing or if  you are using reverse engineering  techniques so just very quickly talk  about three different categories of  technique there are three rough  categories you can fit every engineering  the three would be is blackbox analysis  which is basically just like messing  with the inputs and outputs that go into  a piece of software there's dynamic  analysis which is like sticking probes  into a piece of software as it runs to  figure out exactly what it's doing and  the state can also just kind of explain  the software out over on the table and  you try and just infer things from just  remaining what you have and it's always  going to have these two of these  approaches handy because generally  sometimes you might have all three if  you have all three that's brilliant but  a princess the moment I'm trying to  disassemble this boomer on this whole  synthesize that I have and the CPU  doesn't have goofy demos or come to  dynamic but I can't do the other two  just say and then I can change in  Florida which is Popoff's so if you have  less than two you and I have a difficult  time but at least two you're fine  now how am I gonna just get a show of  hands how many people would have done  something that was engineering how many  people specifically County people open  the network seven what's the traffic  coming in house sick all right you guys  sorry you've all done black post  engineering you've done my post analysis  right here I love the depth is this get  all three you get a post analysis  analysis inspector let's not focus on  that let's keep going all right sorry  today I'm gonna try a couple three  fairly complicated techniques one from  each of the categories this is it's  gonna be strongly the defense bit  between the accessible and the technical  so if I'm going too far off the deep end  please enter the opera's this is the  first time I've been kind of trying to  teach in this capacity before so it's  the only way that online so the first  few like I'm gonna talk about today is  something angel user one that's reading  mystery data now data comes from all  sorts of places when you reverse  engineer it can come from files it can  come from memory dumps become attractive  CAPTCHAs and we're very lucky and we  expanded format  we know and love like simple PNG or JSON  but usually we have to melt that lucky  and it just turns out to be just some  blow  so mr. Lowe we don't know a minute sorry  the question is how do we find out what  is in this mysterious mysterious balls  the answer is to go down a level sorry  Donovan boy spot is made up of lots of -  basically just you think of it as like a  single number between 0 and 255 or 8  bits or 0 0 2 FF in hexadecimal and 256  choices that's very small so I  thankfully there are a number of I guess  expanded ways of representing like  bigger things such as a lot of numbers  or Springs using the statements of box  and those are the contacts and codes so  there are a bunch of examples that or  some of the more popular ways of  encoding things advice you know two's  complement or negative integers in these  and such and of course we need some  tools to help us doing this kind of  thing is a hex editor now hexa to this  awful early reviews the hex editor at  some point if you're from a building  background the basics like text editors  but they just have this nice Big Bang is  showing you what the clock lab is inside  you always require they are amazing for  black box analysis you can do things  like any of them like get a program to  say 12 anything's and see how it reacts  maybe save before an opera change and  then trying to like command  is a difference and there were a lot of  pics tools out there and unfortunately  this very easy answer for which one is  the best  I must try them all eventually I will  find one that speaks to you and use that  I can make one piece of ice try and see  the dust statistics now for the  shameless plug part of the talk I really  quite like taking up complements and in  fact I was doing so long I got sick and  tired I made myself a library it is cool  a snooker table is a framework and the  idea basically there from binary file to  structure my motives to not get in you  know as few lines of code as possible so  and it also contains some cool  visualization tools which we're going to  be using in the next few slides just to  demo some stuff sorry if that thing  comes things sounds like gonna be either  speak to you at all by all means I urge  you to check it out alright so I think  it would be good at this point just kind  of short like a few examples of things  you can find  now we're talking before I thought I  guess standing files are useful because  in the stem initiative at not to use a  standard Bob it was this is another  point reinvent the wheel design my image  just there's a whole bunch of blog razor  to open game to you I'm afraid  bus at the same time companies really  just trust my message  trustus at the slide circuit if they use  a standard format sometimes they'll hide  it in something else but thankfully  worthless ID so we can dig little deeper  so is a random selection of standard  walls and all of them can be identified  by a magic number so I'll just come up  here a magic number is messages like  small sequences of bytes that happen  usually indicates is and this is the  Bristol bar you can see there's  definitely like a big pattern going  along here you can see like these large  Rosa it seems like cruising all right be  proof support and in text that's pretty  much what they are these are all kind of  these are these who've been introduced  so four bytes is representing one number  and normally don't be like enough of the  discovery of the fact that this is just  actually the numbers 353 in fact there  are 353 list entries after that oh sorry  we see here but they are going up in  size and they are less than the total  size of the file which is a game archive  sorry that could be that could be those  significance people were to pick one of  these and then jumps with a spot of the  file which corresponds to the number  clearly like some game data that they  didn't want us to see and then and you  know just to talk about the next group  there's another group before actually  the breasts are the sizes and so you  would see this exact kind of lab but  it's a good example of I guess it's used  quite a lot especially in situations  where you don't have very much memory  because this is very cheap and it easy  for the CPU to kind of like to load of  days just straight from the disk and  iterating through them and it's also  pretty lazy bug prevention relax and  programmers love these because there's  no validation is jump ms around the  bottle using things but yes  this is this is normal of one general  thumb is if you see something in the  heck stuff that looks sort of like a  picture it probably actually is as we  said before that's like basically you  know we would be matching the standard  ball or damaged bus at the same time and  take a look there are real pain to  actually use so much you just want a  graphic right and this here is an  example about the 256 colors so  everybody is one pixel  there's a high speed in somewhere else  inside  [Music]  [Music]  so that's like a really interesting  property I guess over because it's like  a wave and it's always kind of going up  and above the origin points of the sound  wave it means these really nice  symmetrical distributions and it works  but but for pretty much any type of any  number that you put into that so you see  something we've made this is basic mr.  Graham I'm sorry  video impetus but one pole what every  single violence is counting the number  of H so if you have a histogram looks  perfectly symmetrical and in fact I was  procrastinating with rather than as well  so actually made another school  I really like the histogram so I made  another tool which would just go through  fall slice it up and give you a  histogram that each line that was  actually I quite enjoy this because you  can from this you can actually kind of  make  what's in the file without actually  seeing anything it like for instance and  the bridge hope you see there's a nice  big square in the second quadrant of the  top line and that happens to be sitting  cauldron happens to be mobile the  esqueleto zealots are all the alphabet  characters and balloon oh yes its ASCII  text to that area underneath that kind  of tapestry monstrosity underneath  that's actually x86 courage this game is  pretty always fun with sound rise with  it basically but you can tell that it's  kind of toy because it's not only  depressed and let these long things I'd  like to instructions which are the most  popular now underneath that we  [Music]  compressed kind of just to go back and  kind of see that it's not fully solo  reasons compressed well so it's been  personally badly you can still make out  some detail but at school there's no  black areas which means that he is  compressed to some degree and then a  right hand side tone as we said before  it is symmetrical is probably audio and  there you can see that try to apply the  Kraken compression to that which is why  there's a noise on the side but because  and then finally guys sir when you kind  of see this this is probably the point  at which black box analysis of kind of  brought its colas sorry  and so basically this is the same file  compressing entry vehicle place and you  know what I'm lefty is based compression  and the blog rot is the same button with  like RSA encryption applied so if the  histograms probably sweat it means it's  indistinguishable amendment was posted  on us it's been encrypted but some and  yet assimilate it doesn't like Billy in  this Daily Post article Walter entropy  in the encrypted was and at this point  you can't really just determine how it's  compressed hopefully about looking for  the right lens I strongly encourage you  to just open up every single bottle  alright so secondly I want to talk about  troubleshooting any problem a very key  pot of reverse engineering in the  software space is just inspecting the  code as it runs it's an extremely  so in the engineering is just as if you  have which is to say it's  [Music]  today is almost guaranteed to be in all  the wine which is what quite nice but  there are like a couple of downsides  first one is to keep in except election  you betta Margie behold  you'll get 1291 lines of text  pumpkins number of beaches you're never  going to use  I'd like to make two things first what  we're going on mostly focusing on one  specific you can't just learn one you've  got to kind of be able to roll with it  and quick to weightless the best 1p  platform white princess if you're on an  emulator don't go to that and you want  to use the pain rather than the system  one but it's not quite as bad on being a  little melodramatic here because out of  all of that you just need to learn how  to unroll of HSA you just need to know  how to use the rest of cool with you  know how to use the rest but zone yoga  for futures you really need to know is I  guess I can't escape Dakota so how to  move backwards and forwards and continue  new gonna has set breakpoints obviously  so be able to stop  [Music]  and bumpy's one of those cases where  it's where I was talking about before  you can basically practice you can  practice through using it and the skills  will transfer over to the slightly out  of your hand so some of the best  training you can get for reverse  engineering so it'll make you better  moving around the program shopping your  investigative wits and later on when you  have the sources I just want to quickly  run through I do share parenting  this isn't prescriptive you do not have  to follow this to the letter it's more  than you by the way so these are the  steps basically firstly first step is  always to come track reduced behavior in  a testing run so behind beautiful sweet  like a problem or a feature to  investigate quite often this is the  hottest step which is actually getting  to run  but secondly is to establish some  boundaries of the system if your system  is using a bunch of saying like helper  libraries make sure that you can kind of  like I guess either include them or  eliminate them using spell it's about  like I'm fencing off the curves of just  a bit that you won't investigate  pretty much the ones message to observe  for points of interest now point of  interest would be anything that kind of  anything interesting that happens any  kind of students that would happen for  instance during a problem where the  specific voiding of an error message and  the monitor is a you're trying to kind  of figure out I guess what state inside  the program is flipping between good and  bad  I mean visit there's a specific check  that's fairly but quite making notice  but what that check is and then just  make like a short list a piece of these  things  well this define an entry point close to  one of these points of interest so an  entry point is just literally open up  the program that the buggah place of  breakpoints at love these things and  step three and finally trace through to  the exact moment that it actually  happens so this is basically Ferguson  just comes in through the code keep in  mind any of that states why don't you  grab a point let's butchers we look too  bad if you do find a spot where it has  kind of good to bad work backwards  trying to figure out what is cool is  that chain of events to reach that that  specific spot to find out what pulls the  check to me Boston for instance and  that's that's pretty much it  when you have a source card it is by  practicing this again it's just about  catching in the muscle memory the  moments and when you have no soul scars  the procedure is pretty much exactly the  same  [Music]  modifications I highly encourage you  just get as much practice as possible if  you can't just just challenge yourself  because favorite open source project  that you otherwise just kind of was  being too hot and trying to fix above  even a crazy amount finally one Eric  discussion this is how to understand any  pages I was just like power-mad on  possibilities that would open up and  he's just it seemed such like a great  thing and sorry it took me about several  types of ideas to be truly comfortable  with it and I just let's talk about  let's talk a bit about assembly language  as you might a cold as motor pool we're  building about you can break down in the  assembly language but it won't be fully  you can only see through this tiny  window about this tiny window that  follows with our progress is in the very  principle to make any kind of  [Music]  language is also is underneath there'll  be some aesthetic dog which is like old  stack of strings and such memory of  course we need members who they'll be  like a penis attack of temperature Marie  at one of the averages but is the stack  and course the program can ask the  operating system for more memory when  it's running so every time it does that  it will have a new statement allocation  it's here talking about the operators we  also need to include the entire  operating system kernel  just in case we need one thing from  antara braces and then the same ones  also causing us to income calamities so  obviously we have shin Barbies that we  use in this program they're gonna have a  signal as well  now that's the address space elevator  now CPA sorry I'm late no a little  steeper the most CPUs of kind of work  exactly the same but bear with me on  this because knowing that I'm different  but you can make you can make a bunch of  assumptions about how CP was going over  it's going to be a bunch of registers  these places just variables right but it  holds like one number one memory address  and these are used for nice and just  like you know math or reading or writing  [Music]  you have general purpose registers and  the love you like a couple special wants  to it like this voice up gonna be a  special register which points to where  we will always be that so every time we  execute instructions in program council  of it forwards there'll always be a  Flags registers so this is kind of how  if statements and such our evaluator  will see you basically every time an  instruction runs it will change the  flags register based on say  philosophy question is this value 0  value  [Music]  that's interesting so well shared  libraries again so obviously to do many  of these things it's going to call  either the shared library or the kernel  and these are public made guys which  means we still have the names now for  the for the most probably disassembly  something unless you're really lucky and  you get a debug version you're not gonna  be able to see me the next week we'll be  able to see where all of these public  you guys have been cold and it's  incredibly useful for instance sounds  trying to kind of figure out how all the  way was working to go and say okay so  there's 29,000 different  [Music]  as you can see basically sees they  really want you to use their that city  news right so one of the tools they'll  provide you is a document called an  instruction set breakfast every single  instruction in the CPU actually does  this PDF ranking text file in another  window and you copy each line into  whatever format you need to think the  least about so - like like if it goes  through 32 US aid but basically just  like by the line convert it sounds  slurred and back-breaking but you have  two advantages  interesting as we've established you can  filter out the things that are no  interesting quite quickly and secondly  it's basically that it sounds slow but  trust me here it's actually bigger than  just like staring at something written  in this dream moon language and in front  of the pond where it is just being very  rough like this but afterwards you can  ship away but you slowly add more of all  things that you found out and just to  just be clear this is like a tiny  snippet the actual function that it's  what this poem is about 300 lines we  don't have that in here but from that  you can trace through you can slowly  figure out I guess what the inputs the  outputs when we play those back up the  chain and you get upper pastas  formations you get something like this  and you can kind of make out where the  you can't make that way the other  variables were staying from but again if  you have the entire function that you  can transfer you can slowly even if it's  the no correct guesses really that's all  there is to it once you have that entry  point from which you can make more  discoveries and cross-check that with a  lot of code on the debugger you this is  basically that you can read any program  and much like much like the buggy the  school just comes with I guess amount of  time spent will you get more confident  and experience the more times you try  this even if you don't succeed so if  this sounds like something you ever  wanted to try  I recommend just giving it a shot just  once just to see unfortunately always at  the end of time here today but if  there's one thing that I hope to kind of  like shed and like people to take away  today it's the idea that it's possible  to get started in some of the very  hottest areas of reverse engineering  without knowing very much but you can  feel the side much stronger I'm ready to  progress up the chain to complicated  things and in closing I just wanted to  say the best absolute best over that is  reverse engineering  it's just passionately there's once  basically this is truly to do with  perseverance outlays absolutely  everything including skill and  [Music]  [Applause]  all the fever's proudly serving officer  pain question what's the people who were  most proud for best engineering or okay  I'm probably the thing that I like the  most is on reverse you know Macromedia  director yeah at the moment I'm trying  to kind of work on the engine for that  scummvm most of just because not sure a  lot of you what they were this kind of  this great series of educational games  by some reason Duncan and but for the  longest time like I painted this King  started there was like a streaming  version that they were getting and it  just didn't seem as been I thought well  I wanted to work on this company in  Manhattan  it's make sense right to preserve the  things before that in this particular  series was critically acclaimed the only  month cement industry come on site  absolutely no one is going to view it  unless someone steps up knows it yeah  I guess that would like depend on the  exact agreement that you what was the  what was the exact sequester it's  actually feasible to distribute the  results of your work kind of straight  pre-made question to the recording just  natural so if you are reverse engineer I  mean you want to share the results of  that are there any legal implications I  think so long as your solution doesn't  actually incorporate all the parts  itself  one more and then inside of the morning  say I can't believe it that everyone  please remember you'll lead back it's  really important to be able to win any  of the prizes you need to give you  feedback and morning tea is available us  as  you  [Applause]  which takes a product type  and account  and we run our snapshot test again they  all fail but the only reason they fail  is that the the white space has changed  because we've added in all of those  interpolations  so we can just update that and it's fine  cool so this is looking pretty good  except there is one more little  dependency in here that's not super  obvious but this ID on this input needs  to match the html4 on this label  um and we like we need those two things  to be the same there's a couple of ways  we could deal with that we could just  hope that no one changes it  we could pass the ID into the label  um which could work but what I would  suggest that we do is we kind of accept  that these two this label and this input  are very tightly coupled and probably  the best thing to do is just to put them  all into the component together  so now instead of this being a label  component it's going to be a number  input component  and we're going to wrap it in div  get rid of that bracket  and paste all of that in  and a closing div oh don't you wish I'd  installed prettier  okay so this is now just missing this  handle count change  handle count changer is kind of a weird  name for a prop so let's just put it on  change  all right so now that's all good we can  go back up here we can change this to  our number input we can pass it the on  change  um and then we can get rid of all of  this this is my more favorite thing than  refactoring is the leading code so thank  you rejoy  um and our Snapchat test will pass so  that's all good everything  is great  um and now we're actually ready to write  our feature  um except one small thing before I did  that like I said I don't like having  snapshot tests as the basis for my  feature tests we could go with that but  what we have here is sort of snapshot  test to cover the whole product  component we don't have any tests that  are specific to our new number input  component so I would start by actually  replicating our snapshot tests into like  a specific set of tests for the number  the number input I'm not going to make  you watch me do that though  um I have a set of tests here already  um you can see they're the same  scenarios that we wrote before for the  two different types and the amount and  no amount and then one additional test  which checks that the on change Handler  because now that these two things are  separated up we just need to test that  integration is working  um now you might argue that this is a  waste of time we already had these tests  I don't need to do all this and I look I  don't know how busy you are but I did  time myself  those copy and paste fingers going fast  okay so now we've got these tests here  we're ready to write the test for our  new feature  which honestly is going to look just  like the existing ones except we're  going to replace  um everything with plants so when the  product type is plants  um it's going to be plants  it's going to show the number of  plants and plants as I'm sure you all  remember from the spec cost 15 each  and again we're going to make the plants  we're going to have 12 of them we're  going to make plants and 15 times 12 is  of course  anyone no 180 yeah  we run these tests they fail because we  haven't written that code  but now when we actually go to write our  feature it's going to be so easy okay  all we need to do is add plants  to our little names here  and then there's a little config file  here that has the prices in it and we  can add the plants here  and that's also a pass so how fast was  that after we did that refactoring so  this component is now super easy to  change it's super easy to work with  okay so what did we learn today some  important things we learned to think  about when we should refactor because  even though it's fun sometimes we maybe  shouldn't do it we've learned how to  write characterization tests to ensure  our refactors are safe  we've learned about substantial tests  and how we can use those to write  refactoring tests and most importantly  of all we learned that this thing that  looks like these actually pronounced the  and that's what a thorn sort of looks  like normally  all right I've been Aaron Zimmer if you  would like to see the code other slides  are available here  um  don't know why Firefox hates rendering  the peas in this font but some reason uh  the examples are a funky tub with a  completed example as well  um and thank you all very much  [Applause]  [Music]  [Applause]"
ndc_004.txt, hello everyone my name is sam price and  i'm currently a software architect with  family zone cyber  over safety  last probably six or seven years or so  i've had the opportunity to  be involved with systems that have  needed to scale um quite often scale  quite considerable amounts and  through those experiences there have  been lessons learned observations and  changes to daily routines  and it's the ladder bit that i'd like to  talk a little bit about today so things  how i've changed my daily routine to  keep performance in mind  okay  now before we get into it i just wanted  to say thank you to all of our amazing  sponsors um dignity perth  as an attendee has always been my my  favorite con conference and it wouldn't  be possible without all of the sponsors  so thank you very much for supporting  local local perth talent  why practical performance  well i'm going to suggest a few reasons  that um the companies that i've worked  for  value but then later suggest one of my  own  our customers without customers we we  can't make money typically  and so we we need our customers to have  compelling experiences  now jacob nielsen was actually a very  well regarded usability expert  and a lot of the ux  design  principles these days are actually based  on on his foundation  foundational research  if you do a quick google search you'll  find many many statistics on  what happens when sites are unresponsive  or apps take a long time to to load  screens  and i'm sure we've all seen these kinds  of things before so i've just selected a  few random  stats  both from google in the hope that you  trust it there they're real and true  why else  low operating costs  uh  these days uh infrastructure hosting is  a major expense for a lot of a lot of  companies and particularly in the the  new world or newish world of cloud it's  very easy to inadvertently dial up uh  how much you're spending and so i'm  hoping that through good  good performance practices we can keep  our costs a little bit lower and  i think we all may have experienced this  this kind of thing before where the  easiest thing to do is to vertically  scale um but it's not not effectively  the most cost effective  and so if we we have good performance  practices quite often our software will  end up performing too  which typically keeps our costs low  and the final reason is that  i've observed that a lot of software  engineers don't necessarily include  practical  performance practices in their daily  routine  now i don't necessarily blame them  i think this is sort of the  classic quote premature optimization is  the root of all evil  i think  most of us have heard that and it does  discourage us a little bit from thinking  about performance  and  so  now sir tony horror actually uh expands  on his often misquoted quote  and explains that really we shouldn't  think about  micro optimizations 97 of the time but  instead spend that 97 percent of time uh  with good software design so  what algorithms and data structures  we're going to use how we'll design apis  and things like that  performance principles  i personally use when i when i look at  my day-to-day work but then also  when designing solutions  and i'll present two principles that i  use  so the first one is craftsmanship  which is really well designed software  systems using modern technologies and  processors will outperform systems built  in an ad hoc manner without good process  much like how craft beer out-tastes  factory beer  so what does it mean to be to  practice craftsmanship  so  firstly we need to understand our  customers and our users how they're  using our software  and what they need we need to need to  understand our programming languages  we need to understand what what third  party i guess technologies that our  software solutions integrate with so  databases caches queues various other  bits and pieces  um how is our software being run  are we running it are we using linux as  an os or is it an ec2 maybe we're using  kubernetes for orchestration  and then sort of the glue that holds all  of this together is  good old computer science theory so  from human computer interaction for our  users all the way through to data  structures and algorithms  and so  to exhibit craftsmanship it'd be  wonderful to be an expert in all of  these things but the reality is that's  that's not going to be possible and so  we'll each have  various skill depths  but really i think what we what we kind  of need to do is to uh as software  engineers spend a little bit of time to  to understand  our tools so that we can hopefully write  performance solutions that are good for  our businesses and customers and so how  might we do this we're all busy we've  all got different routines so i'd  suggest that actually what we want to do  is narrow our scope so don't try and  understand every aspect of a database  instead just focus on on one little  thing  similarly factor in time for planning  and learning so  some of us might be practicing agile  and so when we do estimation it's nice  to bump that up a little bit if we if we  want to go and spend time to deliver  something quality  and obviously anything that we've  learned we wish to apply during the  implementation phase  now here's an example of  where  i guess a team that i've worked with  where we had a lapse in craftsmanship  there were two services that  communicated to each other  both  http  one service used an http library called  apache http components and  we brought that in in its default  configuration without reading the manual  and the manual very clearly states  no more than two concurrent connections  per given route so that means i cannot  have more than two threads making  requests to a single uri on a single  host  which is actually very limiting and that  proved to be the case for us and sadly  this happened twice  the other principle that i wanted to  introduce is less is more i think a lot  of us would have heard of that before  but um the idea here is that a system  that does less is more for performance  than a system that does more and  certainly in the sort of ultra high  performance um  sort of category  really high performing systems like have  almost no features they do one thing and  they do it very well  now what are some examples of less is  more i could probably write a list of  about 50 things here but i'll keep it  fairly limited  one of my favorites is  complexity so kiss holds holds true and  at all levels as well so from the the  level of actually writing code  if you're using a compiled language  for example  the compiler will often optimize your  code and the compiler does a better job  of optimizing simple code than it does  complex code  all the way up to maybe a service level  if you've got a fairly simple service  maybe it's a microservice but it has  some deficiency it's much easier to  replace that service than a horribly  complex monolith  and so  i'm not advocating either way by the way  for  mono said minor services so  sorry  monoliths or micro services  um but yeah this list goes on and on but  i won't i won't go through all of these  things  and here's a classic  table from the greater internet some of  us may have seen this before  the thing that i like about this table  is enables me to understand what happens  when my software is run through the eyes  of the computer a little bit and how  long various things take  but to make it a little bit more clear i  thought it might be fun if we pretended  that  we're in perth and  for us to go to the level one cache is  just one simple step  but then for us to actually send two  kilobytes over a gigabit network well  that's that's like us going all the way  to free mountain back  well  what about if we wanted to read a meg  from memory um that's like us going to  dancer and back it's quite a while like  sorry us going just in amsterdam quite a  while and then finally a single packet  from perth to california and back to  perth again halfway to the moon  so if we think about these things when  writing software  it  puts things into perspective a little  bit  so this is a an example where we  leveraged less is more um  so the context here is that we had a  native library that filtered network  traffic now i've ported that code and  simplified it to java  and this library it one runs on our  wi-fi routers but we we wanted to reuse  that at the end of our vpn  and so all of a sudden the environment  has changed we went from 20 uh  queries per second really to about 2 000  queries per second  and our poor little filter client  library did not like it so this is the  code beforehand and  after looking at the code we made a  simple change  did anybody see it  so anyway we changed a tree map to a  hashmap  so why would replacing treemap with  hashmap make a difference  well  obviously the synchronized block itself  is a bit of an issue and it's mutually  exclusive and blocks all but one thread  and that one thread spends obviously too  long from getting a decision from the  cache  but but why still why does it take so  long to get a decision from the cache  and to be fair it doesn't actually take  that long but um the difference here is  that tree map is based on a red black  tree and hash map is based on a hash  table  now i realize at this point not everyone  in this room has probably  studied computer science and and knows  about big o notation so that search  column is big o notation  and it says that  a red black tree runs in log in time and  a hash table runs in constant time but  what does that actually mean  so the the next two columns are if i  have a cache of size 100 and a cache of  size 100 000 how long does it take me to  look up my item  well if we're using the tree map  i may need to look at six elements  before i find the one that i'm looking  for  if there are 100 elements in the cache  but if that's 100 000 then i'm going to  need to examine  uh 16 elements but our good old hash  table i only i can find the element that  i'm looking for immediately regardless  of the size of the cache  all right so principles are done but  what are some of the performance issues  that i've observed over the years and  this sort of hopefully adds some  credibility to this talk  software engineers that is a bit of a  joke  but they are the they are the people  that write the code  all right databases this happens all the  time  indexes um they're either missing or  misconfigured they've got the wrong  wrong columns or the wrong column order  now i think there could be multiple  reasons for this um  like the worst being negligence but  quite often i think that it's more of a  maintenance issue where we change the  code at the application layer but then  we forget to actually go back to the db  and update the indices to match  similarly we have each team has  individuals of different levels of  experience so  less experienced people may not know  about  indices and they also may not know about  things like database query plans  and then finally a little bit less  column but i've seen a fair bit of  database misused so because we have a  relational beat db we may as well use it  as a document db  or maybe we just need somewhere to  aggregate data so let's just use the  relational db  instead of using say a stream processing  engine so there's a lot  quite a few examples there  and probably my favorite of all is  traditional orms  so object relation mappings  this enables us to write software  without actually having to write  database queries we just  use higher level constructs and  the orm will take care of sql generation  now the primary issue with rrms that  i've observed is that the db interaction  is opaque so we we don't see  uh what sql gets generated we don't know  if it's sufficient and we don't know how  many how many times uh statements are  being created and run  and there's a very common problem called  the m plus one problem that i won't i  won't detail here but it's it's easy to  solve but it's just something to be  aware of  and then the final  performance pane with rms is select star  so whenever we use an rm it always  brings back every column of every table  even though we mainly care about three  fields and if we  roll this all the way back and think  about our users  a good user interface it only shows the  information that's relevant and nothing  more so  we should we should  treat the db the same way really  the final common performance issue that  i've observed is network ignorance  and this kind of goes back to the the  whole lessons more thing and unders  putting ourselves in the place of a  computer and think about the different  latencies involved  the network isn't particularly quick so  we should try and avoid it but yet  too often we see many network calls when  only one is required  and here is a very like here's an  example  very simple and this is in javascript  we want to  all we want to do is find all the  devices that um are in a family  and so we load all the family members  and then we iterate through them and  then we load the devices for each family  member  this is very slow um  it's not a great way to do it so i'd  encourage us to think about  having as few network calls as possible  um and ideally a single call that can do  everything that we want and actually you  know this is why graphql for example is  very popular  uh the other one is large payloads so  quite often um again if we're using an  orm we might get everything back if  we've got a restful  restful web service we might get  everything back  and particularly if we're sharing report  data or tabular data we might just do  the simple thing which is bring  everything back  so this is large payloads are more  tolerable  on fast networks with few hops but as  soon as the internet's involved and  traversing the public internet uh large  payloads become very slow  a reason for this is the tcp windows so  most http is based on top of tcp  and it and  tcp will only send a certain number of  bytes to the client before waiting for  the client to acknowledge them  and then after it gets the  acknowledgement it will then send the  next chunk of bytes and this so each one  of those is effectively a round trip and  it can add up if you've got a very large  payload  all right no talk on performance would  be uh  it were like worthwhile without a war  story so this is a reasonably recent one  so last year family zone experienced a  period of rapid growth so these are  unique um unique visitors  and so we went from about 15 000 in  march 2020  all the way through to almost um one and  a half million by the end of the year  and  this is a wonderful way for teasing out  performance bottlenecks in your system  so  one one of those bottlenecks we have a  classroom product and so and  inadvertently this was also one of the  reasons why we had we grew so much is  that covert struck and our product  teachers could do remote learning so the  teacher could be at home the students  could be at home and the teacher could  create classes  and interact with their students so what  this screenshot is showing is the  teacher's view of the world and each  tile is a student's desktop so the  teacher can keep track of what their  students are doing and make sure that  they're all doing mathematics and that  little johnny isn't off on youtube  so  an approximation of part of the  architecture is this so we have the  teachers browsers on the bottom right  corner and up the top left we have an  ingestion api and so that ingestion api  is constantly receiving screenshot data  from laptops  and it does two things it first of all  it stores the actual image data in redis  which is the screenshot cache there and  then it publishes an event so anyone  that wants to know about that screenshot  can be informed about it and really the  only  only  subscriber of that event is the  teacher's browser um so  hey littlejohny's you know watching  youtube a new event arrives the  teacher's browser makes a request to the  api to the data service and to redis to  fetch the fresh image  now  when we first went live or sorry when we  first experienced the growth  our event service got destroyed and i'm  not actually going to talk about that  but we and so as you can see here we had  1500 events going in and only 150 coming  out the other side and this was actually  a terrible terrible experience for our  teachers  they couldn't effectively  conduct remote learning sessions  so we replaced the event service but  then something else happened kaboom  redis caught on fire  and and i've seen this many times  actually you remove one bottleneck to  discover another  so what did we do  so the good news is we had thought a  little bit about this and we're like ah  there's gonna be more events hitting the  teachers browsers so why don't we just  queue them up send and then create a  batch request and send that off to the  api so we can load multiple screenshots  in one go  we did that  um but then redis caught fire and so  first of all  personally i screamed at the impossible  because i've used redis a lot and i've  never destroyed it before so  this is the first for me  um  now we had to resolve the customer  customer issue immediately because it  was effectively a complete outage to  people using the classroom product so we  actually added in a dynamic throttle to  our  event service which is just handcrafted  code that basically just dropped a  percentage of screenshots and so we  could turn it up or turn it down  at runtime and and and so we would  follow the production load and um when  it got too much turn it down a little  bit turn it down a little bit uh and  that was really good but also very sad  as a developer you never really want to  live at the capabilities of your service  and obviously we can commenced  investigation  so what did we observe  uh one minor observation was that our  data service was a bit slow and needed  replacing but that data service was  horizontally scalable so whilst it  wasn't wonderful we could spend a bit  more and still be online  and we were just using redis as a  vanilla key value cache  and for those that don't know redis is  actually single threaded much like node  and so you know there's no contention  there it's just a single thread that  does all the work  uh and we noticed that the redis cpu was  actually at 100  so something's definitely going on  going on here  now fortunately for us we we had a  dashboard and we we had the redis  commands on our dash so we knew  which commands were being used and we  there were only four  put get  multiple get and keys  now  multiple get was interesting so this is  when the teacher's browser calls back  with a collection of students and says  get me the  screenshots for all these students  but in this case um you know there might  be just 10 students at absolute worst  and and five keys so that's 50 50. so  that's not super expensive but then  keys in itself though this is the number  of items in the redis cache the number  of screenshots that we have in there and  so there's a hundred thousand of those  probably and so that that that is  dubious why are we calling keys so we  we weren't the authors of the data  service so we dug a little deeper  so it turns out that a single user can  have multiple windows and so  that could be another monitor or maybe  they've got separate chrome windows  but each of those ends up we get a  different screenshot for each of those  and so we used user id plus  window id as our cache key in redis and  so if we looked at the data service we  would see some pseudo code that says  hey redis get me all all keys that match  this user id  and then now then i've got my set of  user ids hey redis can you please get me  all the screenshots for these users  so  the first one is horrible because we you  know we may have to redis may need to  iterate through a thousand sorry 100 000  cash keys  and then the second ones we can deal  with that's absolutely fine  so we know we need to eliminate keys but  how are we going to do it  so we were using redis as a key valve  but fortunately redis also supports hash  tables as the value  and so what we can actually do now is  say our key is just the student or the  user id and our hash table  the key within the hash table is the  window id and then the value is the the  image data  so what what effect did this have  well redis was a lot happier  um and so we can see that we've  we've got two two network calls have  become one which is a win  um and similarly the the actual redis  operation h get all um or hashgraph  uh there's very few keys that we're  actually examining with that so it's  effectively constant time lookup for us  so  we  we went live with this change um and  all of a sudden um we were started  receiving feedback from support that our  customers are happy again and everything  was resolved so it's a big win for us  and our support staff and also the sales  team  but  we we had observed that redis was still  operating at about 70 cpu so we're  putting it under  pretty high load so we had some further  work to do but  fortunately we could spend our time here  and actually do a little bit of research  and plan out how we wanted to attack  things  so  we replaced standalone redis with  clustered redis  we actually replaced the data service  with the screenshot service which was  much more performant  and then all the way through we  effectively used streaming so  in the case of redis we use res  pipelining for streaming but then that  from in the case of anything that was  http  we used chunked encoding  and that enabled us to keep  memory under control and not actually  have to allocate or bring the entire  classroom full of screenshots into  memory for our api  so  our job's not done though just because  our customers are happy it doesn't mean  we have things to do so we need to have  a retrospective  so what went wrong here well  first of all i personally made the  mistake of not doing proper analysis  and load testing of the screenshots api  and and the reason for that is in part  because i  you know i'd never broken redis before i  didn't think it was breakable  um  another observation was that good  observability really did enable us to  resolve this problem quickly for our  customers um and that in turn gave great  confidence to our support and sales  teams  the other one was that a root cause fix  here  we knew that this problem was done and  dusted with and it wasn't going to come  back to bite us we might have future  problems but we were satisfied that this  this same issue wasn't going to recur  another another observation was that  redis has excellent documentation every  single redis command  they provide us the big o notation so as  software engineers we know how our code  is going to perform when we interact  with redis assuming we've read the  manual  but  and then finally um simplicity again  going back to this um the kiss  the kiss sorry keep it simple stupid um  the data service was really easy to  replace with the screenshot service and  so again i felt that  in my like  whenever we do future software  development work just again try and keep  everything really simple  okay so  covering all of these issues  how can we apply the performance  principles to our day-to-day returns  so the first thing for me is  documentation i know documentation in  some ways is a little bit of a dry  subject  but um  i think we should document service level  objectives so a service level objective  is really a contract between you and  your customer so and that might be from  what a service being the customer of  another service or or a human customer  using interacting with your website  and so  work with your user user experience team  or your  product management team and define what  your slos are so do you expect all of  your pages to be fully rendered within  two seconds  maybe you probably should in that case  make sure that that's widely known and  documented similarly with new features  make sure that we  write slos into the acceptance criteria  and you know different  different features for example will have  different slos so if you've got a search  api you're going to want that thing to  be pretty quickly users are going to  expect to see results quickly so make it  quick  but then something like a reporting job  it's absolutely fine to take your time  right what else can we document  database index usage  so it's a really simple one but if  you've got code that interacts with a db  um document the index i i firmly believe  this helps with long-term maintenance  plus it's a really good educational  piece so  um newer developers kind of less  experienced developers coming into a  team will see this and then they'll be  curious and ask questions or look at  documentation so  it's very very useful  okay now here's a here's another example  we're going to if you as a software  engineer have thought about  the performance implications of your  code and there's something that you  should point out to future readers  document it  so  this method here is a very simple method  that looks through a collection of  intervals and and determines whether any  of those  intervals contains  the current time  that could be the future time as well  actually it's poorly named variable  um  so how could we document this  so  in our case we might be using this to  determine whether or not a teacher has a  class that's active right now  but we know that a teacher is never  going to have more than 100 classes and  and so we're super happy  iterating through 100 items because that  will never we we're confident this will  never become a performance  performance pain for us and and so we  know that it runs in constant time but  hey if we used an interval tree then we  could get log in which would be much  much faster but  interval trees aren't in the jdk  and and we we're never going to use this  with more than 100 intervals so it  doesn't matter  but we can go better still  i i know a few of you a few people in  the audience won't be liking this one  but we we should be logging this as an  error because this method was designed  only to support 100 intervals  uh and hopefully we have monitoring on  our monitoring and alerting on errors in  our logs so  if we get pinged about this whilst we  might not have a customer issue we can  prevent a customer issue from occurring  well similarly this could actually we  may have 100 intervals because we've got  bad data in our db something else has  changed and all of a sudden we've got  more data than we need to so so these  kinds of statements can be very very  useful  right observability  super super useful  now  what the what that really means is that  us as software engineers we're looking  at logs and metrics and traces  we should be able to have a reasonable  idea or indication of what's going on  with our software and systems  that may not always be true but most of  the time we should be able to  why would we want to do this  well if we've got things to look at  we can look at them frequently and and  that enables us to become familiar so we  know what what usage patterns service a  has and at what times of the day  and if we're looking at it frequently we  know what it looks like normally and if  we notice anything different then we can  dig into that proactively  similarly if we if we do have an outage  um and actually whether or not it's  related to performance we can improve  our mean time to resolve by having  excellent observability  and the final point here is just that in  this day and age a lot of our systems  are quite complex so we might be talking  to readers we might talk to a database  we might be using  pub sub there's  lots of things all  co-mingled and maybe we're orchestrating  with kubernetes  in this complex system there are many  unknowns we don't know how our system is  going to fail  but if we've got good observability when  unknowns do  come up we can normally convert them to  knowns fairly effectively  so what do we need  and sadly there is no no perfect answer  here  it really depends on what the thing is  are you trying to observe a web page or  a mobile app or you're trying to observe  something that's server-side  um  yeah all of these things have different  requirements and how is that thing being  used  um you know is it is it critical uh what  happened what does it mean for your  customer if you have an outage and then  finally what's your budget because some  of the tools are expensive  so yeah so as mentioned there's many  kinds of things that we could also  measure and monitor i won't go into  those  now this observability triangle really  goes from the  top which is the best of the  observability but it's also the most  expensive either through dollars or um  where dollars may be just cash or or  dollars could be time  so apm stands for application  performance monitor and this gives us  wonderful insight into our  existing  services and  uh next down the list we've got  boundaries and dump sorry boundaries  which basically just means whenever your  application speaks to something else or  you cross a tier within the application  that that's a boundary and so you should  you should measure around that to  understand  what happens when you cross that  boundary  similarly it's critical to be able to  heap and stack them for this they're  very useful and there's different ways  you can do that but  definitely worth doing and then the  simplest and cheapest of all is just  making sure you've got rudimentary  metrics uh and monitoring over critical  paths and endpoints  and i'll just jump on to what an apm  actually looks like because not everyone  may have seen them before i stole this  image from datadog's website and and i  should also say that whilst we are a  datadog customer we don't use datadog  apms because they're expensive  so  all of a sudden we can see inside a  particular service and we can see  where we're spending a lot of time like  which method we're spending a lot of  time in and us as us as developers we we  know whether or not this is an issue i  might be expecting to sleep not asleep a  lot so so that's okay but  it just gives us so much insight into  our running application  now  this is an example of where in a  previous life  new relic  has an apm as well and new relic saved  us  so  we had some code that this i worked for  an e-commerce company and our service  was responsible for showing prices on  all  websites and all mobile apps and we had  many millions of active users  um  and what had happened is there's an api  layer managed by another team that's  that was above our service and that was  moving from a caching to a non-caching  architecture so our service  used to get about 250 250 requests per  second but then  over a period of a few months got up to  about  25 000 per second  and so  anyway we we noticed that we'd started  to slow down and our metrics had blown  out and we got alerted and so we jumped  into new relic and had a look  and  the bit of code that it pointed to i  looked at this load deal  yep i know it's going to be the  talking to the db it's always the db  it's going to be fined by id  wrong it was not  our db was fine our connection pooling  was fine  instead we were using java 6 at the time  and the currency class within  java 6 is actually pretty inefficient  and the the get instance method  actually takes out a synchronize a  global synchronized lock  and so only one thread can execute that  now fortunately it is using a hash map  so it does run in constant time but  still there is so much contention on  that lock amongst other threads that  this was a major bottleneck and um  new relic pointed us exactly to where  that bottleneck was and we were able to  resolve that  in under an hour actually and get the  prod fix out and so that's excellent you  know mean time to recovery  now  we are coders  and hopefully we all do code review as  well maybe we pay a program  and so really these practices apply  equally to both  i think the first and most important one  or at least depends on what you're doing  but  always consider growth and scale like  um  what what's our  sales forecast like how many new  customers are we going to have in the  future  what if we have 10 000 things instead of 10  is there any unnecessary io or  connection  uh  if i'm talking if i'm writing code that  interacts with the database if i'm using  hibernate or another orm well then make  sure i'm logging sql and run query plans  against the output sql  there's a lot that we can do  all right so this example um  was fairly recently  uh at family zone we introduced a new  database technology something called  cockroachdb which is a horizontally  scalable relational db it's very cool  tech but we've never used it before  and so we had a really simple  simple relationship here it's a  many-to-many relationship between  users and guardians  and and  so the fortunately the  software engineers in the team  they they decided to run some load up  this database before we got anywhere  near production with data and then run  some query plans and they quickly saw  that what they thought would be a really  quick query actually scanned 28 000 rows  and so this was strange they've just got  a very simple many-to-many relationship  they've defined their foreign keys what  was going on  so as it turned out um different  databases have different characteristics  and uh one of cockroaches  characteristics is that when you create  a foreign key it doesn't automatically  create an index on the column referenced  in the foreign table  not all dbs do but they hadn't  experienced it before  but  fortunately for them they did their due  diligence as  and ran query plans and they added the  index and got their estimated row count  down to one and the thing i like about  this is it was spending time with the  new technology reading the manual  working through it um and  this would definitely have become a  production issue if they hadn't done  this because we were going to load this  up with  about 3 million students so and it was  going to be hit a lot  so that's it for me thank you very much  for listening  just to kind of recap we  i introduced a few principles and  explained how i think though they help  us to derive good practices as software  engineers  hopefully some of this was useful useful  to you thank you very much
